{"version":3,"sources":["style/global.ts","config.ts","repository/serendyInstance.ts","repository/authRepository.ts","store/userStore.ts","components/SharedComponents/PrivateRoute.tsx","style/theme.ts","style/keyframes.ts","components/Start/StartLogo.tsx","components/Start/BigBlock.tsx","components/Start/SmallBlock.tsx","components/Start/Announces.tsx","hook/usePush.ts","pages/Start.tsx","components/SharedComponents/Container.tsx","components/Main/Icon.tsx","components/Main/Manual.tsx","components/SharedComponents/CenterView.tsx","pages/Main.tsx","components/SharedComponents/TextLogo.tsx","components/SignIn/SignInBox.tsx","pages/SignIn.tsx","components/SignUp/SignUpBox.tsx","components/SignUp/Success.tsx","pages/SignUp.tsx","components/SideBar/Category/Box.tsx","components/SideBar/Category/Category.tsx","components/SideBar/UserInfo/Menu.tsx","components/SideBar/UserInfo/UserInfo.tsx","components/SideBar/SideBar.tsx","components/Header/Header.tsx","components/MyPage/ChangeNameBox.tsx","components/MyPage/ChangePWBox.tsx","components/MyPage/Categories.tsx","components/MyPage/Boxes.tsx","pages/MyPage.tsx","store/chatStore.ts","components/SharedComponents/Announce.tsx","components/ChatPage/BeforeChat.tsx","components/ChatPage/FinishedChat.tsx","components/ChatPage/MatchedChat.tsx","components/ChatPage/SearchingChat.tsx","components/ChatPage/MatchHandler.tsx","components/ChatPage/MessageBox.tsx","components/ChatPage/ChatWindow.tsx","pages/ChatPage.tsx","components/PostPage/PostWindow.tsx","components/PostPage/PostSent.tsx","repository/postRepository.ts","store/postStore.ts","components/SharedComponents/CircleLoader.tsx","pages/PostPage.tsx","components/SharedComponents/PostComponents/HaveComment.tsx","components/SharedComponents/PostComponents/NoneComment.tsx","components/RecipientsPage/ReceivedPostViewer.tsx","components/SharedComponents/PostComponents/Post.tsx","components/SharedComponents/PostComponents/PostList.tsx","pages/RecipientsPage.tsx","components/FindPW/FindPWBox.tsx","pages/FindPW.tsx","components/SenderPage/SentPostViewer.tsx","pages/SenderPage.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","BASE_URL","TEXTLOGO_URL","serendyInstance","axios","create","baseURL","defaults","headers","common","localStorage","getItem","AuthRepository","path","account","get","this","data","post","nickName","authRepository","UserStore","_user","_userSocket","_socketID","isLogging","makeObservable","observable","user","computed","userSocket","socketID","setUser","action","signInWithToken","flow","signIn","signUp","checkAccount","changePW","changeName","findPW","signOut","bound","setIsLogging","setUserSocket","setSocketID","saveSocketID","boolean","myID","emit","on","signInWidthToken","message","token","setItem","alert","userData","console","log","changePassword","removeItem","userStore","PrivateRoute","observer","children","render","to","theme","colors","mainBlue","main60","black","yellow","white","white10","plum","red","green","arrowPop","keyframes","slideLeft","fadeIn","zoomIn","whalePop","zoomOut","paperPlane","setTimeFade","StartLogo","push","LogoBox","Logo","data-aos","data-aos-duration","StartBtn","onClick","Arrow","styled","div","button","BigBlock","item","title","subtitle","Text","data-aos-anchor-placement","SmallText","Space","SmallBlock","text","bigBlockAnnounces","smallBlockAnnounces","Announces","BlockContainer","map","TextLogo","usePush","history","useHistory","Start","useEffect","Aos","init","Wallpaper","Container","Flex","IconBox","icon","Icon","FontAwesomeIcon","iconList","id","faPaperPlane","faPlus","faComments","faEquals","faUsers","Manual","Column","x","Box","CenterView","Screen","Main","SignInBox","useForm","register","handleSubmit","setError","errors","formState","main","onSubmit","a","type","color","height","width","Row","faUserAlt","Input","placeholder","required","pattern","value","minLength","maxLength","ErrorMsg","faLock","password","autoComplete","ButtonBox","Button","ForgotPW","input","SignIn","flowResult","isSuccess","SignUpBox","submit","watch","trigger","useState","isChecked","setIsChecked","accountCheck","CheckAccountButton","Msg","style","faCheck","check","validate","faUserSecret","secretMessage","SubmitButton","Success","BoldMsg","span","SignUp","setIsSuccess","Category","chat","recipients","sender","categoryList","faEnvelopeOpenText","faSignInAlt","Menu","iconsize","mt","size","UserInfo","start","menus","faClipboard","faDoorOpen","InfoBox","marginTop","UserIcon","ml","MenuBox","visible","SideBar","Bar","Header","ChangeNameBox","fontSize","InputBox","faPen","TextBox","attrs","ChangePWBox","passwordCheck","Categories","setSelectedCategory","category","faUser","Boxes","selectedCategory","Announce","MyPage","chatStore","isSearching","isMatched","isFinished","chatLog","recentChat","setIsSearching","setIsMatched","setIsFinished","resetRecentChat","handleCancel","handleFind","handleSearch","handleMatched","handleReceiveMsg","handlePushChat","handleFinished","stopChat","chatStopped","reset","status","setVisible","length","announce","beforeAnnounce","BeforeChat","BigAnnounce","Rule","BtnBox","FinishedChat","MatchedChat","CancelBtn","SearchingChat","marginBottom","MatchHandler","MessageBox","fd","OwnChatName","OthersName","OwnBalloon","RightTail","OthersBalloon","LeftTail","ChatWindow","sendBtn","useRef","screen","current","scrollHeight","clientHeight","scroll","scrollTo","scrollToBottom","ChatBox","animation","visibility","ref","i","SenderBox","onKeyPress","e","key","click","SendBtn","disabled","autocomplete","ChatPage","io","disconnect","HandlerBox","postAnnounce","PostWindow","postSend","postArea","LetterContainer","Letter","TextArea","SendBtnBox","RuleContainer","textarea","PostSent","postRepository","_Id","postStore","sentPosts","receivedPosts","currentSentPost","currentReceivedPost","isLoading","setSentPosts","setReceivedPosts","setCurrentSentPost","setCurrentReceivedPost","setIsLoading","sendPost","getSentPosts","getReceivedPosts","handleSentOne","handleReceivedOne","sendComment","resetReceivedPosts","resetSentPosts","content","getReceivePosts","_id","find","toAccount","CircleLoader","LoaderBox","PostPage","isSending","setIsSending","isSent","setIsSent","toggleIsSending","HaveComment","LETTER","NickName","Content","CommentBox","UserName","comment","Comment","NoneComment","whatPage","commentInput","ReceivedPostViewer","Post","replied","showPost","faEnvelope","FromAccount","MessagePreview","Alert","faCircle","display","PostBox","posts","Array","isArray","undefined","RecipientsPage","FindPWBox","FindPW","SentPostViewer","SenderPage","App","exact","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28228024.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n\n    @font-face {\n        font-family: 'MGothic';\n        src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_20-04@2.1/NEXON Lv2 Gothic.woff') format('woff');\n        font-weight: normal;\n        font-style: normal;\n    }\n\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n        font-family: 'MGothic';\n        -ms-overflow-style: none; // 스크롤바 없애기\n        ::-webkit-scrollbar {\n            display: none;\n        }\n    };\n    // 자동완성 박스 색\n    input:-webkit-autofill,\n    input:-webkit-autofill:hover,\n    input:-webkit-autofill:focus,\n    input:-webkit-autofill:active {\n        transition: background-color 5000s ease-in-out 0s;\n        -webkit-transition: background-color 9999s ease-out;\n        -webkit-text-fill-color: #fff !important;\n    }\n`;\n\nexport default GlobalStyle;","export const BASE_URL = 'https://serendy-server.herokuapp.com';\nexport const LOGO_URL = '/images/start_logo.png';\nexport const TEXTLOGO_URL = '/images/serendy_text.png';\nexport const WHALE = '/images/whale.png';","import axios from \"axios\";\nimport { BASE_URL } from '../config'; // eslint-disable-line\n\nexport const serendyInstance = axios.create({\n    baseURL: BASE_URL,\n});\n\nserendyInstance.defaults.headers.common['authorization'] = localStorage.getItem('SerendyToken');","import { serendyInstance } from './serendyInstance';\nimport { AxiosResponse } from 'axios';\nimport { ISignUpData, ISignInData, IPassword, INickName, IFindPW } from '../interfaces'\n\nclass AuthRepository {\n    private path = '/api/auth';\n\n    public checkAccount(account: string): Promise<AxiosResponse> {\n        return serendyInstance.get(`${this.path}/check/${account}`);\n    };\n\n    public signUp(data: ISignUpData): Promise<AxiosResponse> {\n        return serendyInstance.post(`${this.path}/signup`, data);\n    };\n\n    public signIn(data: ISignInData): Promise<AxiosResponse> {\n        return serendyInstance.post(`${this.path}/signin`, data);\n    };\n\n    public signInWidthToken(): Promise<AxiosResponse> {\n        return serendyInstance.post(`${this.path}/refresh`);\n    };\n\n    public changePassword(data: IPassword): Promise<AxiosResponse> {\n        return serendyInstance.post(`${this.path}/changepw`, data);\n    };\n\n    public changeName(nickName: INickName): Promise<AxiosResponse> {\n        return serendyInstance.post(`${this.path}/changename`, nickName);\n    };\n\n    public findPW(data: IFindPW): Promise<AxiosResponse> {\n        return serendyInstance.post(`${this.path}/findpw`, data);\n    };\n};\n\nconst authRepository = new AuthRepository();\n\nexport default authRepository;","import { action, computed, flow, makeObservable, observable } from \"mobx\";\nimport authRepository from '../repository/authRepository';\nimport { ISignInData, IPassword, INickName, IFindPW, IUserStore, IUser, ISignUpData } from '../interfaces';\nimport { Socket } from 'socket.io-client';\n\nclass UserStore implements IUserStore {\n    private _user: IUser | null = null;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n    public isLogging: boolean = false;\n\n    constructor() {\n        makeObservable<UserStore, '_user' | '_userSocket' | '_socketID'>(this, {\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: observable,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setUser: action,\n            signInWithToken: flow,\n            signIn: flow,\n            signUp: flow,\n            checkAccount: flow,\n            changePW: flow,\n            changeName: flow,\n            findPW: flow,\n            signOut: action.bound,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action,\n            saveSocketID: action,\n        });\n    };\n\n    public get user(): IUser | null {\n        return this._user;\n    };\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    };\n\n    public get socketID(): string | null {\n        return this._socketID;\n    };\n\n    public setUser(user: IUser | null): void {\n        this._user = user;\n    };\n\n    public setIsLogging(boolean: boolean): void {\n        this.isLogging = boolean;\n    };\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    };\n\n    public setSocketID(myID: string | null): void {\n        this._socketID = myID;\n    };\n\n    public saveSocketID(): void {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('entered', myID => {\n            this.setSocketID(myID);\n        });\n    };\n\n    public *signInWithToken() {\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (token) {\n                this.setIsLogging(true);\n                const { data: {message, account, nickName, token}} = yield authRepository.signInWidthToken();\n                    if (message === 'SignIn Success') {\n                        this.setUser({ account , nickName });\n                        localStorage.setItem('SerendyToken', token);\n                        this.setIsLogging(false);\n                        return true;\n                    };\n            };\n            this.setIsLogging(false);\n            return false;\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public *signIn(userData: ISignInData) {\n        this.setIsLogging(true);\n        try {\n            const { data: { message, account, nickName, token } } = yield authRepository.signIn(userData);\n            if (message === 'SignIn Success') {\n                this.setUser({ account, nickName });\n                localStorage.setItem('SerendyToken', token);\n                this.setIsLogging(false);\n                return true;\n            };\n            this.setIsLogging(false);\n            return false;\n        } catch(err) {\n            console.log(err);\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public *signUp(userData: ISignUpData) {\n        try {\n            const { data: { message } } = yield authRepository.signUp(userData);\n            if (message === 'SignUp Success') {\n                return true;\n            };\n            return false;\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public *checkAccount(account: string) {\n        try {\n            const { data: { message } } = yield authRepository.checkAccount(account);\n            if (message === 'available') {\n                return true;\n            };\n            return false; // message = 'already exist'\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n    \n    public *changePW(data: IPassword) {\n        try {\n            const { data: { message }} = yield authRepository.changePassword(data);\n            if (message === 'Changed') {\n                alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n                return this.signOut();\n            };\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n    \n    public *changeName(nickName: INickName) {\n        try {\n            const { data: { message }} = yield authRepository.changeName(nickName);\n            if (message === 'Changed') {\n                alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`)\n                return this.signOut();\n            };\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n    \n    public *findPW(data: IFindPW) {\n        try {\n            const { data: { message }} = yield authRepository.findPW(data);\n            if (message === 'Not Exist') {\n                alert('일치하는 정보가 없습니다');\n                return false;\n            }\n            if (message === 'Valid User') {\n                alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n                return this.signOut();\n            };\n        } catch (err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public signOut(): boolean {\n        this.setUser(null);\n        localStorage.removeItem('SerendyToken');\n        return true;\n    };\n};\n\nconst userStore = new UserStore();\nexport default userStore;","import { observer } from 'mobx-react';\nimport React from 'react'\nimport { Route, Redirect } from 'react-router-dom';\nimport userStore from '../../store/userStore';\n\nconst PrivateRoute: React.FC<any>= observer(({ children }) => {\n    return (\n        <Route\n            render={() => userStore.user ? (children) : (<Redirect to='/signin' />)}\n        />\n    );\n});\n\nexport default PrivateRoute;","export const theme = {\n    colors: {\n        mainBlue: 'rgb(84, 185, 209)',\n        main60: 'rgba(84, 185, 209, 0.6)',\n        black: '#282c37',\n        yellow: '#EFDC05',\n        white: '#ffffff',\n        white10: 'rgba(255, 255, 255, 0.1)',\n        plum: '#efb8e4',\n        red: '#E53A40',\n        green: '#3ae374',\n    },\n};","import { keyframes } from 'styled-components';\n\nexport const arrowPop = keyframes`\n    from {\n        transform: translateY(20px);\n    };\n    to {\n        transform: translateY(-35px);\n    };\n`;\n\nexport const slideLeft = keyframes`\n    from {\n        right: -900px;\n    };\n    to {\n        right: 0px;\n    };\n`;\n\nexport const fadeIn = keyframes`\n    from {\n        opacity: 0;\n    };\n    to {\n        opacity: 1;\n    };\n`;\n\nexport const slideUp = keyframes`\n    from {\n        transform: translateY(1300px);      \n    };\n    to {\n        transform: translateY(0px);\n    };\n`;\n\nexport const zoomIn = keyframes`\n    from {\n        opacity: 0;\n        transform: scale(0.6);\n    };\n    to {\n        opacity: 1;\n        transform: scale(1);\n    };\n`;\n\nexport const whalePop = keyframes`\n    from {\n        transform: scale(1);\n    };\n    to {\n        transform: scale(1.1);\n    };\n`;\n\nexport const zoomOut = keyframes`\n    60% {\n        opacity: 1;\n        transform: scale(1.05);\n    };\n    100% {\n        opacity: 0;\n        transform: scale(0);\n    };\n`;\n\nexport const paperPlane = keyframes`\n    50% {\n        transform: scale(1.3) translateY(100px) translateX(-100px);\n        opacity: 1;\n    };\n    100% {\n        transform: scale(1) translateY(-1000px) translateX(1000px);\n        opacity: 0;\n    };\n`;\n\nexport const setTimeFade = keyframes`\n    0% {\n        opacity: 0;\n        transform: scale(0);\n    };\n    60% {\n        opacity: 0;\n        transform: scale(0);\n    };\n    100% {\n        opacity: 1;\n        transform: scale(1);\n    };\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { LOGO_URL } from '../../config';\nimport { arrowPop } from '../../style/keyframes';\n\nconst StartLogo: React.FC<{ push: () => void }>= ({ push }) => {\n\n    return (\n        <LogoBox>\n            <Logo data-aos='zoom-in-down'\n                data-aos-duration='1000'\n            />\n            <StartBtn onClick={push}>시작하기</StartBtn>\n            <Arrow>∨</Arrow>\n        </LogoBox>\n    );\n};\n\nexport default StartLogo;\n\nconst LogoBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    height: 100%;\n    padding-bottom: 50px;\n    margin-bottom: 300px;\n`;\n\nconst Logo = styled.div`\n    width: 700px;\n    height: 700px;\n    background-image: url(${LOGO_URL});\n    background-size: cover;\n    background-position: center;\n    @media only screen and (max-width: 500px) {\n        width: 450px;\n        height: 450px;\n    }\n`;\n\nconst Arrow = styled.div`\n    font-size: 30px;\n    text-align: center;\n    color: ${({ theme }) => theme.colors.white};\n    animation: ${arrowPop} 0.5s alternate infinite;\n`;\n\nconst StartBtn = styled.button`\n    all: unset;\n    width: 160px;\n    height: 70px;\n    border-radius: 40px;\n    background-color: ${({ theme }) => theme.colors.mainBlue};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 24px;\n    text-align: center;\n    margin-bottom: 50px;\n    cursor: pointer;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white};\n        color: ${({ theme }) => theme.colors.mainBlue};\n    };\n    @media only screen and (max-width: 500px) {\n        width: 120px;\n        height: 50px;\n        font-size: 17px;\n    }\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Text, Space } from './Announces'\nimport { IBigBlock } from '../../interfaces';\nconst BigBlock: React.FC<IBigBlock> = ({ item }) => {\n    const { title, subtitle } = item;\n\n    return (\n        <>\n            <Text\n                data-aos='fade-up'\n                data-aos-anchor-placement='center-center'\n                data-aos-duration='900'>\n                {title}\n            </Text>\n            <SmallText\n                data-aos='fade-up'\n                data-aos-anchor-placement='center-center'\n                data-aos-duration='900'>\n                {subtitle}\n            </SmallText>\n            <Space />\n        </>\n    );\n};\n\nexport default BigBlock;\n\nconst SmallText = styled.div<{ size?: string }>`\n    font-size: 28px;\n    color: ${({ theme }) => theme.colors.white};\n    text-align: center;\n    margin-bottom: 50px;\n    white-space: pre;\n    @media only screen and (max-width: 600px) {\n        font-size: 18px;\n    };\n`;","import React from 'react';\nimport { Text, Space } from './Announces';\n\nconst SmallBlock: React.FC<{ text: string }>= ({ text }) => {\n    return (\n        <>\n            <Text\n                data-aos='fade-up'\n                data-aos-anchor-placement='center-center'\n                data-aos-duration='800'\n            >\n                {text}\n            </Text>\n            <Space />\n        </>\n    );\n};\n\nexport default SmallBlock;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { TEXTLOGO_URL } from '../../config';\nimport BigBlock from './BigBlock';\nimport SmallBlock from './SmallBlock';\n\nconst bigBlockAnnounces = [\n    {   \n        title: '말해보세요',\n        subtitle: `주변 사람들에게 선뜻 말하기 힘든 고민이 있다면\\n\\n낯선 누군가에게 부담 없이 말해보세요`,\n    },\n    {   \n        title: '들어보세요',\n        subtitle: `낯선 누군가의 고민거리를 들어보세요\\n\\n들어주는 것만으로 상대방에게 힘이 될지도 몰라요`,\n    },\n    {   \n        title: '걱정마세요',\n        subtitle: `상대방과의 모든 대화는 익명입니다\\n\\n서로를 모르는 상대화 이야기에만 집중해보세요`,\n    },\n];\n\nconst smallBlockAnnounces = [\n    {\n        text: '경험해보세요',\n    },\n    {\n        text: '당신의 행운 또는 우연을 위한',\n    },\n];\n\nconst Announces: React.FC<{push: () => void}>= ({push}) => {\n    return (\n        <BlockContainer>\n            {bigBlockAnnounces.map(item => (\n                <BigBlock\n                    item={item}\n                    key={item.title}\n                />\n            ))}\n            {smallBlockAnnounces.map(item => (\n                <SmallBlock\n                    text={item.text}\n                    key={item.text}\n                />\n            ))}\n            <Space />\n            <TextLogo\n                data-aos='fade-down-right'\n                data-aos-duration='1000'\n                data-aos-anchor-placement='bottom-bottom'\n            />\n            <StartBtn\n                data-aos='fade-in'\n                data-aos-duration='1000'\n                onClick={push}\n            >\n                시작하기\n            </StartBtn>\n            <Space />\n        </BlockContainer>\n    );\n};\n\nexport default Announces;\n\nconst BlockContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n`;\n\nexport const Text = styled.div<{ size?: string }>`\n    font-size: 50px;\n    color: ${({ theme }) => theme.colors.white};\n    text-align: center;\n    margin-bottom: 50px;\n    @media only screen and (max-width: 600px) {\n        font-size: 30px;\n    };\n`;\n\nexport const Space = styled.div`\n    width: 400px;\n    height: 250px;\n`;\n\nconst StartBtn = styled.button`\n    all: unset;\n    width: 200px;\n    height: 100px;\n    border-radius: 40px;\n    background-color: ${({ theme }) => theme.colors.mainBlue};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 30px;\n    text-align: center;\n    margin-bottom: 50px;\n    cursor: pointer;\n    @media only screen and (max-width: 600px) {\n        width: 120px;\n        height: 60px;\n        font-size: 17px;\n    };\n`;\n\nconst TextLogo = styled.div`\n    width: 800px;\n    height: 300px;\n    background-image: url(${TEXTLOGO_URL});\n    background-size: cover;\n    background-position: center;\n    @media only screen and (max-width: 600px) {\n        width: 600px;\n        height: 100px;\n    };\n`;\n\n","import { useHistory } from 'react-router-dom';\n\nexport const usePush = (path?: string | undefined) => {\n    const history = useHistory();\n\n    const push = () => {\n        switch (path) {\n            case 'main':\n                history.push('/main');\n                break;\n            case 'signup':\n                history.push('/signup');\n                break;\n            case 'signin':\n                history.push('/signin');\n                break;\n            case 'findpw':\n                history.push('/findpw');\n                break;\n            case 'mypage':\n                history.push('/mypage');\n                break;\n            case 'chat':\n                history.push('/chat');\n                break;\n            case 'post':\n                history.push('/post');\n                break;\n            case 'sender':\n                history.push('/sender');\n                break;\n            case 'recipients':\n                history.push('/recipients');\n                break;\n            default:\n                history.push('/');\n                break;\n        };\n    };\n\n    return { push };\n};\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport Aos from 'aos';\nimport 'aos/dist/aos.css';\nimport StartLogo from '../components/Start/StartLogo';\nimport Announces from '../components/Start/Announces';\nimport { usePush } from '../hook/usePush';\n\nconst Start: React.FC = () => {\n    const { push } = usePush('main');\n\n    useEffect(() => {\n        Aos.init();\n    },[]);\n\n    return (\n        <Wallpaper>\n            <StartLogo push={push} />\n            <Announces push={push} />\n        </Wallpaper>\n    );\n};\n\nexport default Start;\n\nconst Wallpaper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    overflow-x: hidden;\n    background-color: ${({ theme }) => theme.colors.black};\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container: React.FC = ({ children }) => {\n    return (\n        <Flex>\n            {children}\n        </Flex>\n    );\n};\n\nexport default Container;\n\nconst Flex = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    background-color: ${({ theme }) => theme.colors.black};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst IconBox: React.FC<{ icon: any }>= ({icon}) => {\n    return (\n        <Icon icon={icon} />\n    );\n};\n\nexport default IconBox;\n\nconst Icon = styled(FontAwesomeIcon)`\n    color: ${({ theme }) => theme.colors.white};\n    margin-right: 20px;\n    font-size: 50px;\n    @media only screen and (max-width: 600px) {\n        font-size: 30px;\n    };\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport IconBox from './Icon';\nimport { faPaperPlane, faComments, faUsers, faPlus, faEquals} from '@fortawesome/free-solid-svg-icons';\nimport { WHALE } from '../../config';\nimport { whalePop, zoomIn } from '../../style/keyframes';\n\nconst iconList = [\n    {\n        id: 1,\n        icon: faPaperPlane,\n    },\n    {\n        id: 2,\n        icon: faPlus,\n    },\n    {\n        id: 3,\n        icon: faComments,\n    },\n    {\n        id: 4,\n        icon: faEquals,\n    },\n    {\n        id: 5,\n        icon: faUsers,\n    },\n];\n\nconst Manual: React.FC = () => {\n    return (\n        <Column>\n            <LogoBox>\n            <Logo />\n            </LogoBox>\n                <Box>\n                    {iconList.map(x => (\n                        <IconBox\n                            icon={x.icon}\n                            key={x.id}\n                        />\n                    ))}\n                </Box>\n        </Column>\n    );\n};\n\nexport default Manual;\n\nconst Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    height: 100%;\n    animation: ${zoomIn} .8s\n`;\n\nconst Box = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    width: 400px;\n    margin-top: 20px;\n    @media only screen and (max-width: 600px) {\n        justify-content: center;\n    };\n`;\n\nconst LogoBox = styled.div`\n    width: 500px;\n    height: 500px;\n    display: flex;\n    flex-direction: center;\n    align-items: center;\n    margin-bottom: 50px;\n    @media only screen and (max-width: 600px) {\n        width: 250px;\n        height: 250px;\n    };\n`;\n\n\nconst Logo = styled.div`\n    width: 500px;\n    min-width: 500px;\n    height: 500px;\n    margin-right: 150px;\n    background-image: url(${WHALE});\n    background-size: cover;\n    background-position: center;\n    animation: ${whalePop} .5s ease-out alternate infinite;\n    @media only screen and (max-width: 600px) {\n        min-width: 250px;\n        height: 250px;\n    };\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { fadeIn } from '../../style/keyframes';\n\nconst CenterView: React.FC = ({ children }) => {\n    return (\n        <Screen>\n            {children}\n        </Screen>\n    );\n};\n\nexport default CenterView;\n\nconst Screen = styled.div`\n    position: absolute;\n    left: 5px;\n    bottom: 70px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 80.5%;\n    min-width: 330px;\n    height: 80%;\n    border-radius: 30px;\n    padding: 10px;\n    transition: 1s ease;\n    animation:${fadeIn} .8s ease;\n    z-index: 1;\n    @media only screen and (max-width: 600px) {\n        left: 0px;\n        bottom: 50px;\n    };\n`;","import React from 'react'\nimport Container from '../components/SharedComponents/Container';\nimport Manual from '../components/Main/Manual';\nimport CenterView from '../components/SharedComponents/CenterView';\n\nconst Main: React.FC = () => {\n    return (\n        <Container>\n            <CenterView>\n                <Manual />\n            </CenterView>\n        </Container>\n    );\n};\n\nexport default Main;\n","import styled from \"styled-components\";\nimport { TEXTLOGO_URL } from \"../../config\";\n\nexport const TextLogo = styled.div`\n    width: 600px;\n    height: 200px;\n    background-image: url(${TEXTLOGO_URL});\n    background-size: cover;\n    background-position: center;\n    margin-bottom: 40px;\n    @media only screen and (max-width: 600px) {\n        display: none;\n    };\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLock, faUserAlt } from '@fortawesome/free-solid-svg-icons';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { theme } from '../../style/theme';\nimport { usePush } from '../../hook/usePush';\nimport userStore from '../../store/userStore';\nimport { zoomIn } from '../../style/keyframes';\nimport { observer } from 'mobx-react';\nimport Loader from 'react-loader-spinner';\nimport { ISignInData } from '../../interfaces';\nimport { TextLogo } from '../SharedComponents/TextLogo';\n\nconst SignInBox: React.FC = observer(() => {\n    const { register, handleSubmit, setError, formState: { errors } } = useForm<ISignInData>();\n    const main = usePush('main');\n    const findPW = usePush('findpw');\n    const signUp = usePush('signup');\n\n    const setErrors = (): void => {\n        setError('account', {\n            type: 'invalid',\n            message: 'ㅤ'\n        });\n        setError('password', {\n            type: 'invalid',\n            message: '아이디나 비밀번호를 다시 확인해주세요',\n        });\n    };\n\n    const onSubmit: SubmitHandler<ISignInData> = async (data) => {\n        const isSuccess = await userStore.signIn(data);\n        if (isSuccess) {\n            main.push();\n        } else {\n            setErrors();\n        };\n    };\n\n    return (\n        <>\n            {!userStore.isLogging ? \n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <TextLogo />\n                    <Box>\n                    <Column>\n                        <Row>\n                            <Icon\n                                icon={faUserAlt}\n                                color={errors.account ? (theme.colors.red) : (theme.colors.white)}\n                            />\n                            <Input\n                                placeholder='아이디'\n                                {...register('account', {\n                                    required: '아이디를 입력해주세요',\n                                    pattern: { value: /^[a-zA-Z0-9]+$/, message: '영문과 숫자만을 조합하여 입력해주세요'},\n                                    minLength: { value: 5, message: '아이디가 너무 짧아요' },\n                                    maxLength: { value: 19, message: '아이디가 너무 길어요' },\n                                })}\n                            />\n                        </Row>\n                        {errors.account ? <ErrorMsg> {errors.account.message} </ErrorMsg> : 'ㅤ'}\n                    </Column>\n\n                    <Column>\n                        <Row>\n                            <Icon\n                                icon={faLock}\n                                color={errors.password ? (theme.colors.red) : (theme.colors.white)}\n                            />\n                            <Input \n                                placeholder='비밀번호'\n                                autoComplete='off'\n                                type='password'\n                                {...register('password', {\n                                    required: '비밀번호를 입력해주세요',\n                                })}\n                            />\n                        </Row>\n                        {errors.password ? <ErrorMsg> {errors.password.message} </ErrorMsg> : 'ㅤ'}\n                    </Column>\n                    <ButtonBox>\n                        <Button type='submit'>\n                            로그인\n                        </Button>\n                        <Button onClick={signUp.push}>회원가입</Button>\n                    </ButtonBox>\n                        <ForgotPW onClick={findPW.push} >\n                            비밀번호가 기억이 안나시나요?\n                        </ForgotPW>\n                    </Box> \n                </form> : \n                <Loader type=\"Circles\"\n                    color={theme.colors.plum}\n                    height={60}\n                    width={60}\n                />\n            }\n        </>\n    );\n});\n\nexport default SignInBox;\n\nconst Box = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    width: 600px;\n    height: 600px;\n    animation: ${zoomIn} .6s ease;\n    @media only screen and (max-width: 600px) {\n        justify-content: center;\n        height: 450px;\n    };\n`;\n\nconst Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 30px;\n`;\n\nconst Row = styled.div`\n    width: 420px;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 15px;\n    padding-bottom: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 600px) {\n        width: 320px;\n    };\n`;\n\nconst ButtonBox = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    width: 460px;\n    @media only screen and (max-width: 600px) {\n        width: 320px;\n    };\n`;\n\nconst Input = styled.input`\n    all: unset;\n    width: 350px;\n    height: 40px;\n    font-size: 21px;\n    padding-left: 20px;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 600px) {\n        width: 260px;\n        font-size: 17px;\n    };\n`;\n\nconst Button = styled.button`\n    all: unset;\n    width: 200px;\n    height: 65px;\n    border-radius: 40px;\n    background-color: ${({ theme }) => theme.colors.mainBlue};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 20px;\n    text-align: center;\n    margin-top: 30px;\n    margin-bottom: 50px;\n    cursor: pointer;\n    transition: .4s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white};\n        color: ${({ theme }) => theme.colors.mainBlue};\n    };\n    @media only screen and (max-width: 600px) {\n        width: 120px;\n        height: 45px;\n        font-size: 17px;\n    };\n`;\n\nconst Icon = styled(FontAwesomeIcon)<{ color: string }>`\n    font-size: 35px;\n    color: ${({ color }) => color};\n    @media only screen and (max-width: 600px) {\n        font-size: 25px;\n    };\n`;\n\nconst ErrorMsg = styled.div`\n    font-size: 16px;\n    color: ${({ theme }) => theme.colors.red};\n`;\n\nconst ForgotPW = styled.div`\n    font-size: 16px;\n    color: ${({ theme }) => theme.colors.white};\n    cursor: pointer;\n    &:hover {\n        text-decoration: underline;\n    };\n`;","import React, { useEffect } from 'react';\nimport { flowResult } from 'mobx';\nimport { observer } from 'mobx-react';\nimport Container from '../components/SharedComponents/Container';\nimport SignInBox from '../components/SignIn/SignInBox';\nimport userStore from '../store/userStore';\nimport { usePush } from '../hook/usePush';\nconst SignIn: React.FC = observer(() => {\n    const { push } = usePush('main');\n\n    const signInWithToken = async () => {\n        const isSuccess = await flowResult(userStore.signInWithToken());\n        console.log(isSuccess);\n        if (isSuccess) push();\n    };\n\n    useEffect(() => {\n        signInWithToken();\n    }, []); //eslint-disable-line\n\n    return (\n        <Container>\n            <SignInBox />\n        </Container>\n    );\n});\n\nexport default SignIn;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faLock, faUserAlt, faUserSecret } from '@fortawesome/free-solid-svg-icons';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { theme } from '../../style/theme';\nimport authRepository from '../../repository/authRepository';\nimport { zoomIn } from '../../style/keyframes';\nimport { ISignUpData } from '../../interfaces';\nimport { flowResult } from 'mobx';\nimport userStore from '../../store/userStore';\nimport { TextLogo } from '../SharedComponents/TextLogo';\n\nconst SignUpBox: React.FC<{ submit: () => void }> = observer(({ submit }) => {\n    const { register, handleSubmit, watch, setError, trigger, formState: { errors } } = useForm<ISignUpData>();\n    const [ isChecked, setIsChecked ] = useState<boolean>(false); // 계정 중복체크\n\n    // 회원가입\n    const signUp = async (data: ISignUpData) => {\n        try{\n            const isSuccess = await flowResult(authRepository.signUp(data));\n            if (isSuccess) {\n                submit();\n            };\n        } catch(err) {\n            alert('서버 점검중입니다');\n        };\n    };\n\n    // 중복체크\n    const accountCheck = async () => {\n        await trigger('account'); // 트리거 호출해서 에러 확인\n        if (errors.account) { // 아이디 형식에 문제가 있으면 리턴\n            return\n        } else {\n            const account = watch('account');\n            const isAvailable = await flowResult(userStore.checkAccount(account))\n            if (isAvailable) {\n                return setIsChecked(true);\n            } else {\n                setError('account', {\n                    message: '이미 사용중인 아이디입니다'\n                });\n                setIsChecked(false);\n            };\n        };\n    };\n\n    const onSubmit: SubmitHandler<ISignUpData> = (data) => {\n        if (!isChecked) {\n            alert('중복확인을 해주세요');\n            return;\n        };\n        signUp(data);\n    };\n\n    useEffect(() => {\n        setIsChecked(false);\n    }, [watch('account')]); // eslint-disable-line\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} >\n            <TextLogo />    \n            <Box>\n                <Column>\n                    <Row>\n                        <Icon\n                            icon={faUserAlt}\n                            color={errors.account ? (theme.colors.red) : (theme.colors.white)}\n                        />\n                        <Input\n                            placeholder='아이디'\n                            {...register('account', {\n                                required: '아이디를 입력해주세요',\n                                pattern: { value: /^[a-zA-Z0-9]+$/, message: '영문과 숫자만을 조합하여 입력해주세요'},\n                                minLength: { value: 6, message: '아이디는 최소 6자리입니다' },\n                                maxLength: { value: 15, message: '아이디는 최대 15자리입니다' },\n                            })}\n                        />\n                        <CheckAccountButton\n                            onClick={accountCheck}\n                            type='button'\n                        >\n                            중복확인\n                        </CheckAccountButton>\n                    </Row>\n                    {!isChecked ? (!errors.account ? <Msg>ㅤ</Msg> : <ErrorMsg> {errors.account.message} </ErrorMsg>) : <Msg style={{ color: theme.colors.green }}> 사용가능한 아이디입니다 </Msg> }\n                </Column>\n                <Column>\n                    <Row>\n                        <Icon\n                            icon={faLock}\n                            color={errors.password ? (theme.colors.red) : (theme.colors.white)}\n                        />\n                        \n                        <Input\n                            placeholder='비밀번호'\n                            autoComplete='off'\n                            type='password'\n                            {...register('password', {\n                                required: '비밀번호를 입력해주세요',\n                                minLength: { value: 8, message: '비밀번호는 최소 8자리입니다' },\n                                maxLength: { value: 20, message: '비밀번호는 최대 20자리입니다' }\n                            })}\n                        />\n                    </Row>\n                    {errors.password ? <ErrorMsg> {errors.password.message} </ErrorMsg> : <Msg>ㅤ</Msg>}\n                </Column>\n                <Column>\n                    <Row>\n                        <Icon\n                            icon={faCheck}\n                            color={errors.check ? (theme.colors.red) : (theme.colors.white)}\n                        />\n                        <Input\n                            placeholder='비밀번호 확인'\n                            autoComplete='off'\n                            type='password'\n                            {...register('check', {\n                                required: true,\n                                validate: check => check === watch('password'),\n                            })}\n                        />\n                    </Row>\n                    {!errors.password && errors.check ? <ErrorMsg> 비밀번호가 일치하지 않습니다 </ErrorMsg> : <Msg>ㅤ</Msg>}\n                </Column>\n                <Column>\n                    <Row>\n                        <Icon\n                            icon={faUserSecret}\n                            color={errors.secretMessage ? (theme.colors.red) : (theme.colors.white)}\n                        />\n                        <Input\n                            placeholder='암호 메세지'\n                            {...register('secretMessage', {\n                                required: '암호 메세지를 작성해주세요',\n                                minLength: { value: 3, message: '암호 메세지는 최소 3자 입니다' },\n                                maxLength: { value: 20, message: '암호 메시지는 최대 20자 입니다' }\n                            })}\n                        />\n                    </Row>\n                    {errors.secretMessage ? \n                        <>\n                            <ErrorMsg> {errors.secretMessage.message} </ErrorMsg>\n                            <Msg>ㅤ</Msg>\n                        </> :\n                        <>\n                            <Msg> 암호 메세지는 나중에 비밀번호 찾기에 사용됩니다 </Msg>\n                            <Msg> 자신만의 개성 넘치는 단어로 설정해보세요! </Msg>\n                        </>\n                    }\n                </Column>\n                    <SubmitButton type='submit'>\n                        확인\n                    </SubmitButton>\n            </Box>\n        </form>\n    );\n});\n\nexport default SignUpBox;\n\nconst Box = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    width: 600px;\n    height: 600px;\n    animation: ${zoomIn} .6s ease;\n    @media only screen and (max-width: 600px) {\n        justify-content: center;\n        height: 550px;\n    };\n`;\n\nconst Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 10px;\n`;\n\nconst Row = styled.div`\n    position: relative;\n    width: 420px;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 30px;\n    padding-bottom: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 600px) {\n        width: 320px;\n        margin-bottom: 20px;\n    };\n`;\n\nconst Input = styled.input`\n    all: unset;\n    width: 350px;\n    height: 40px;\n    font-size: 21px;\n    padding-left: 20px;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 600px) {\n        width: 260px;\n        font-size: 17px;\n    };\n`;\n\nconst SubmitButton = styled.button`\n    all: unset;\n    width: 200px;\n    height: 55px;\n    border-radius: 40px;\n    background-color: ${({ theme }) => theme.colors.mainBlue};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 20px;\n    text-align: center;\n    margin-top: 20px;\n    margin-bottom: 50px;\n    cursor: pointer;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white};\n        color: ${({ theme }) => theme.colors.mainBlue};\n    };\n    @media only screen and (max-width: 600px) {\n        width: 170px;\n        height: 45px;\n        font-size: 17px;\n    };\n`;\n\nconst CheckAccountButton = styled(SubmitButton)`\n    position: absolute;\n    right: 0px;\n    top: 5px;\n    width: 90px;\n    height: 40px;\n    font-size: 19px;\n    margin-bottom: 10px;\n    margin-top: 0;\n    @media only screen and (max-width: 600px) {\n        width: 90px;\n        height: 30px;\n        font-size: 15px;\n    };\n`;\n\nconst Icon = styled(FontAwesomeIcon)<{ color: string }>`\n    font-size: 35px;\n    color: ${({ color }) => color};\n    @media only screen and (max-width: 600px) {\n        font-size: 25px;\n    };\n`;\n\nconst ErrorMsg = styled.div`\n    font-size: 16px;\n    transform: translateY(-10px);\n    color: ${({ theme }) => theme.colors.red};\n`;\n\nconst Msg = styled(ErrorMsg)`\n    color: ${({ theme }) => theme.colors.white};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { usePush } from '../../hook/usePush';\nimport { zoomIn } from '../../style/keyframes';\n\nconst Success: React.FC = () => {\n    const { push } = usePush('signin');\n\n    return (\n        <Box>\n            <Msg>\n                <BoldMsg>회원가입</BoldMsg>\n                {`이 `}\n                <BoldMsg>완료</BoldMsg>\n                되었습니다\n            </Msg>\n            <Button onClick={push} > 시작하기 </Button>\n        </Box>\n    );\n};\n\nexport default Success;\n\nconst Box = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    width: 600px;\n    height: 640px;\n    animation: ${zoomIn} .5s ease;\n    @media only screen and (max-width: 600px) {\n        width: 400px;\n    };\n`;\n\nconst Msg = styled.div`\n    margin-top: 40px;\n    margin-bottom: 30px;\n    font-size: 35px;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 600px) {\n        font-size: 24px;\n    };\n`;\n\nconst BoldMsg = styled.span`\n    font-size: 35px;\n    font-weight: 900;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 600px) {\n        font-size: 25px;\n    };\n`;\n\nconst Button = styled.button`\n    all: unset;\n    width: 180px;\n    height: 90px;\n    border-radius: 40px;\n    background-color: ${({ theme }) => theme.colors.mainBlue};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 30px;\n    text-align: center;\n    margin-top: 20px;\n    margin-bottom: 50px;\n    cursor: pointer;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white};\n        color: ${({ theme }) => theme.colors.mainBlue};\n    };\n    @media only screen and (max-width: 600px) {\n        width: 160px;\n        height: 60px;\n        font-size: 20px;\n    };\n`;","import React, { useState } from 'react';\nimport Container from '../components/SharedComponents/Container';\nimport SignUpBox from '../components/SignUp/SignUpBox';\nimport Success from '../components/SignUp/Success';\nimport { observer } from 'mobx-react';\n\nconst SignUp: React.FC = observer(() => {\n    const [isSuccess, setIsSuccess] = useState<boolean>(false); // is sign up success ?\n\n    return (\n        <Container>\n            {isSuccess ? <Success /> : <SignUpBox submit={() => setIsSuccess(true)} />}\n        </Container>\n    );\n});\n\nexport default SignUp;","import React from 'react'\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IBox } from '../../../interfaces/index';\n\nconst Box: React.FC<IBox> = ({ item }) => {\n    const { color, icon, text, push } = item;\n\n    return (\n        <Container onClick={push}>\n            <IconBox>\n                <Icon\n                    color={color}\n                    icon={icon}\n                />\n            </IconBox>\n            <Text>{text}</Text>\n        </Container>\n    );\n};\n\nexport default Box;\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 25px;\n    margin-top: 3px;\n    margin-bottom: 5px;\n    width: 95%;\n    min-height: 50px;\n    max-height: 60px;\n    min-width: 40px;\n    cursor: pointer;\n    border-radius: 10px;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.main60};\n    };\n    @media only screen and (max-width: 600px) {\n        justify-content: center;\n        padding: 0px;\n    };\n`;\n\nconst IconBox = styled.div`\n    min-width: 40px;\n    min-height: 26px;\n    @media only screen and (max-width: 600px) {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    };\n`;\n\nconst Icon = styled(FontAwesomeIcon)<{ color: string }>`\n    font-size: 26px;\n    color: ${({ color }) => color};\n`;\n\nconst Text = styled.div`\n    font-size: 18px;\n    color: ${({ theme }) => theme.colors.white};\n    margin-left: 8px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    @media only screen and (max-width: 1115px) {\n        display: none;\n    };\n`;\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { faComments, faPaperPlane, faSignInAlt, faEnvelopeOpenText } from '@fortawesome/free-solid-svg-icons';\nimport { usePush } from '../../../hook/usePush';\nimport { theme } from '../../../style/theme';\nimport Box from './Box';\n\nconst Category: React.FC = () => {\n    const chat = usePush('chat');\n    const post = usePush('post');\n    const recipients = usePush('recipients');\n    const sender = usePush('sender');\n\n    const categoryList = [\n        {\n            id: 1,\n            color: theme.colors.plum,\n            icon: faComments,\n            text: '대화 하기',\n            push: chat.push,\n        },\n        {\n            id: 2,\n            color: theme.colors.plum,\n            icon: faPaperPlane,\n            text: '편지 보내기',\n            push: post.push,\n\n        },\n        {\n            id: 3,\n            color: theme.colors.yellow,\n            icon: faEnvelopeOpenText,\n            text: '받은 편지함',\n            push: recipients.push,\n        },\n        {\n            id: 4,\n            color: theme.colors.yellow,\n            icon: faSignInAlt,\n            text: '보낸 편지함',\n            push: sender.push,\n        },\n    ];\n\n    return (\n        <Container>\n            {categoryList.map(item => (\n                <Box\n                    item={item}\n                    key={item.id}\n                />\n            ))}\n        </Container>\n    );\n};\n\nexport default Category;\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    margin-top: 10px;\n    padding-top: 2px;\n    width: 100%;\n    height: 70%;\n    min-width: 40px;\n    min-height: 40px;\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { Text, Icon } from './UserInfo';\nimport { IMenu } from '../../../interfaces';\n\nconst Menu: React.FC<IMenu> = ({ item }) => {\n    const { onClick, icon, text } = item;\n    return (\n        <Container onClick={onClick} >\n            <Icon\n                icon={icon}\n                iconsize='24px'\n            />\n            <Text\n                mt='8px'\n                size='14px'\n            >\n                {text}\n            </Text>\n        </Container>\n    );\n};\n\nexport default Menu;\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border-radius: 10px;\n    min-width: 40px;\n    padding: 5px;\n    margin: 5px;\n    transition: .3s ease;\n    cursor: pointer;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.main60};\n    };\n    @media only screen and (max-width: 600px) {\n        min-width: 40px;\n        margin-top: 10px;\n    };\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboard, faDoorOpen, faUserAlt } from '@fortawesome/free-solid-svg-icons';\nimport { DisplayType } from '../../../interfaces/index';\nimport { usePush } from '../../../hook/usePush';\nimport userStore from '../../../store/userStore';\nimport Menu from './Menu';\n\nconst UserInfo: React.FC = observer(() => {\n    const start = usePush();\n    const myPage = usePush('mypage');\n\n    const signOut = () => {\n        const isSuccess = userStore.signOut();\n        if (isSuccess) start.push();\n    };\n    \n    const menus = [\n        {\n            id: 1,\n            onClick: myPage.push,\n            icon: faClipboard,\n            text: '정보변경',    \n        },\n        {\n            id: 2,\n            onClick: signOut,\n            icon: faDoorOpen,\n            text: '로그아웃',\n        },\n    ];\n\n    return (\n        <Container>\n\n            <InfoBox style={{ marginTop: '10px' }} >\n                <UserIcon \n                    icon={faUserAlt}\n                    iconsize='24px'\n                />\n                <Text\n                    ml='7px'\n                    size='16px'\n                >\n                    {userStore.user?.nickName}\n                </Text>\n            </InfoBox>\n            <MenuBox>\n                {menus.map(item => (\n                    <Menu\n                        item={item}\n                        key={item.id}\n                    />\n                ))}\n            </MenuBox>\n\n        </Container>\n    );\n});\n\nexport default UserInfo;\n\nconst InfoBox = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    @media only screen and (max-width: 1450px) {\n        display: grid;\n        grid-template-areas:\n        'a'\n        'b';\n    };\n    @media only screen and (max-width: 600px) {\n        margin-top: 8px;\n    };\n`;\n\nconst MenuBox = styled(InfoBox)``;\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    width: 100%;\n    height: 15%;\n    min-width: 40px;\n    min-height: 120px;\n    @media only screen and (max-width: 600px) {\n        font-size: 15px;\n        margin-top: 50px;\n    };\n`;\n\nexport const Icon = styled(FontAwesomeIcon)<{ iconsize: string, visible?: DisplayType }>`\n    font-size: ${({ iconsize }) => iconsize};\n    color: ${({ theme }) => theme.colors.white};\n    display: ${({ visible }) => visible};\n`;\n\nconst UserIcon = styled(Icon)`\n`;\n\ninterface IText {\n    size?: string;\n    color?: string;\n    ml?: string;\n    mt?: string;\n};\n\nexport const Text = styled.span<IText>`\n    font-size: ${({ size }) => size};\n    color: ${({ theme }) => theme.colors.white};\n    margin-left: ${({ ml }) => ml};\n    margin-top: ${({ mt }) => mt};\n    white-space: nowrap;\n    @media only screen and (max-width: 1450px) {\n        display: none;\n    };\n`;","import { observer } from 'mobx-react';\nimport React from 'react';\nimport styled from 'styled-components';\nimport userStore from '../../store/userStore';\nimport { slideLeft } from '../../style/keyframes';\nimport Category from './Category/Category';\nimport UserInfo from './UserInfo/UserInfo';\nimport { DisplayType } from '../../interfaces/index';\n\nconst SideBar: React.FC = observer(() => {\n    return (\n        <Bar visible={userStore.user ? 'block' : 'none'} >\n            <UserInfo />\n            <Category />\n        </Bar>\n    );\n});\n\nexport default SideBar;\n\nconst Bar = styled.div<{ visible: DisplayType }>`\n    position: fixed;\n    right: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    min-width: 300px;\n    max-width: 300px;\n    height: 99%;\n    background-color: ${({ theme }) => theme.colors.black};\n    border-radius: 5px;\n    border-left: 1px solid ${({ theme }) => theme.colors.white};\n    display: ${({ visible }) => visible};\n    animation: ${slideLeft} 1s ease;\n    transition: 1s ease;\n    padding: 10px;\n    z-index: 1;\n    @media only screen and (max-width: 1450px) {\n        min-width: 220px;\n    };\n    @media only screen and (max-width: 1115px) {\n        min-width: 100px;\n    };\n    @media only screen and (max-width: 600px) {\n        min-width: 40px;\n        padding: 0px;\n    };\n`;","import React from 'react'\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { TEXTLOGO_URL } from '../../config';\nimport userStore from '../../store/userStore';\nimport { usePush } from '../../hook/usePush';\nimport { DisplayType } from '../../interfaces';\n\nconst Header: React.FC = observer(() => {\n    const { push } = usePush('main');\n\n    return (\n        <LogoBox\n            visible={userStore.user ? 'block' : 'none'}\n            onClick={push}\n        >\n            <Logo />\n        </LogoBox>\n    );\n});\n\nexport default Header;\n\nconst LogoBox = styled.div<{ visible: DisplayType }>`\n    position: fixed;\n    top: 5px;\n    left: 20px;\n    display: ${({ visible }) => visible};\n    cursor: pointer;\n    z-index: 1;\n`;\n\nconst Logo = styled.div`\n    width: 310px;\n    height: 120px;\n    background-image: url(${TEXTLOGO_URL});\n    background-size: cover;\n    background-position: center;\n    @media only screen and (max-height: 700px) {\n        width: 220px;\n        height: 90px;\n    };\n    @media only screen and (max-width: 600px) {\n        width: 150px;\n        height: 60px;\n    };\n`;","import { faPen } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport userStore from '../../store/userStore';\nimport { INickName } from '../../interfaces/index';\nimport { flowResult } from 'mobx';\nimport { usePush } from '../../hook/usePush';\n\nconst ChangeNameBox: React.FC = () => {\n    const { register, handleSubmit, formState: { errors } } = useForm<INickName>();\n    const { push } = usePush('signin');\n\n    const onSubmit: SubmitHandler<INickName> = async (nickName) => {\n        const userData = {\n            account: userStore.user?.account,\n            ...nickName,\n        };\n        const isSuccess = await flowResult(userStore.changeName(userData));\n        if (isSuccess) push();\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} >\n            <Container>\n                <Column>\n                    <Text>변경할 닉네임을 입력해주세요</Text>\n                    <Text style={{ color: 'plum', fontSize: '16px' }} >(닉네임은 중복이 가능합니다)</Text>\n                    <InputBox>\n                        <Icon icon={faPen} />\n                        <Input {...register('nickName', {\n                            required: '변경할 닉네임을 입력해주세요',\n                            pattern: { value: /^[\\w\\Wㄱ-ㅎㅏ-ㅣ가-힣]{2,20}$/, message: '닉네임에 적합한 문자가 아닙니다'},\n                            minLength: { value: 2, message: '닉네임이 너무 짧아요' },\n                            maxLength: { value: 19, message: '닉네임이 너무 길어요' },\n                        })} />\n                    </InputBox>\n                    <TextBox>\n                        {errors.nickName && <ErrorMsg>{errors.nickName.message}</ErrorMsg>}\n                    </TextBox>\n                    <Button\n                        onClick={handleSubmit(onSubmit)}\n                        type='submit'\n                    >\n                        변경하기</Button>\n                </Column>\n            </Container>\n        </form>\n    );\n};\n\nexport default ChangeNameBox;\n\nconst Container = styled.div`\n    width: 100%;\n    height: 300px;\n`;\n\nconst Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst TextBox = styled.div`\n    height: 30px;\n`;\n\nconst Text = styled.div`\n    margin-top: 20px;\n    font-size: 18px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nconst InputBox = styled.div`\n    width: 350px;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 15px;\n    padding-bottom: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.white};\n`;\n\nconst Input = styled.input.attrs({\n    placeholder: '변경할 닉네임'\n})`\n    all: unset;\n    width: 300px;\n    height: 40px;\n    font-size: 21px;\n    margin-top: 20px;\n    padding-left: 15px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nconst Button = styled.button`\n    all: unset;\n    width: 200px;\n    height: 65px;\n    border-radius: 40px;\n    background-color: ${({ theme }) => theme.colors.mainBlue};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 20px;\n    margin-top: 5px;\n    text-align: center;\n    cursor: pointer;\n    transition: .4s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white};\n        color: ${({ theme }) => theme.colors.mainBlue};\n    };\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n    font-size: 25px;\n    margin-top: 30px;\n    transform: translateY(-5px);\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nconst ErrorMsg = styled.div`\n    font-size: 16px;\n    color: ${({ theme }) => theme.colors.red};\n`;","import { faLock } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport userStore from '../../store/userStore';\nimport { IPassword } from '../../interfaces/index';\nimport { flowResult } from 'mobx';\nimport { usePush } from '../../hook/usePush';\n\nconst ChangePWBox: React.FC = () => {\n    const { register, handleSubmit, watch, formState: { errors } } = useForm<IPassword>();\n    const { push } = usePush('signin');\n\n    const onSubmit: SubmitHandler<IPassword> = async (data) => {\n        const userData = {\n            account: userStore.user?.account,\n            ...data,\n        };\n        const isSuccess = await flowResult(userStore.changePW(userData));\n        if (isSuccess) push();\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} >\n            <Container>\n                <Column>\n                    <Text> 변경할 비밀번호를 입력해주세요 </Text>\n                    <InputBox>\n                        <Icon icon={faLock} />\n                        <Input\n                            placeholder='변경할 비밀번호'\n                            type='password'\n                            {...register('password', {\n                                required: '변경할 비밀번호를 입력해주세요',\n                                minLength: { value: 8, message: '비밀번호는 최소 8자리입니다' },\n                                maxLength: { value: 20, message: '비밀번호는 최대 20자리입니다' },\n                            })}\n                        />\n                    </InputBox>\n                    <TextBox>\n                        {errors.password && <ErrorMsg>{errors.password.message}</ErrorMsg>}\n                    </TextBox>\n                    <InputBox style={{ marginTop: '-15px' }} >\n                        <Icon icon={faLock} />\n                        <Input\n                            placeholder='비밀번호 확인'\n                            type='password'\n                            {...register('passwordCheck', {\n                                required: true,\n                                validate: check => check === watch('password'),\n                            })}\n                        />\n                    </InputBox>\n                    <TextBox>\n                    {!errors.password && errors.passwordCheck ? <ErrorMsg>비밀번호가 일치하지 않습니다</ErrorMsg> : <ErrorMsg>ㅤ</ErrorMsg>}\n                    </TextBox>\n                    <Button\n                        onClick={handleSubmit(onSubmit)}\n                        type='submit'\n                    > \n                        변경하기\n                    </Button>\n                </Column>\n            </Container>\n        </form>\n    );\n};\n\nexport default ChangePWBox;\n\nconst Container = styled.div`\n    width: 100%;\n    height: 300px;\n`;\n\nconst Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst TextBox = styled.div`\n    height: 30px;\n`;\n\nconst Text = styled.div`\n    margin-top: 20px;\n    font-size: 18px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nconst InputBox = styled.div`\n    width: 350px;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 15px;\n    padding-bottom: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.white};\n`;\n\nconst Input = styled.input`\n    all: unset;\n    width: 300px;\n    height: 40px;\n    font-size: 21px;\n    margin-top: 20px;\n    padding-left: 15px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nconst Button = styled.button`\n    all: unset;\n    width: 200px;\n    height: 65px;\n    border-radius: 40px;\n    background-color: ${({ theme }) => theme.colors.mainBlue};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 20px;\n    margin-top: 5px;\n    text-align: center;\n    cursor: pointer;\n    transition: .4s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white};\n        color: ${({ theme }) => theme.colors.mainBlue};\n    };\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n    font-size: 25px;\n    margin-top: 29px;\n    transform: translateY(-5px);\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nconst ErrorMsg = styled.div`\n    font-size: 16px;\n    color: ${({ theme }) => theme.colors.red};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ICategories } from '../../interfaces';\n\nconst Categories: React.FC<ICategories> = ({ setSelectedCategory, category, icon, text }) => {\n    return (\n        <Column onClick={() => setSelectedCategory(category)} >\n            <Icon icon={icon} />\n            <Category>{text}</Category>\n        </Column>\n    );\n};\n\nexport default Categories;\n\nconst Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 25px;\n    margin: 20px;\n    width: 200px;\n    border: 1px solid ${({ theme }) => theme.colors.white};\n    border-radius: 20px;\n    cursor: pointer;\n    transition: 0.5s ease;\n    &:hover {\n        transform: scale(1.1);\n    };\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n    font-size: 50px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nconst Category = styled.div`\n    margin-top: 20px;\n    font-size: 21px;\n    color: ${({ theme }) => theme.colors.white};\n`;","import React, { useState } from 'react'\nimport styled from 'styled-components';\nimport ChangeNameBox from './ChangeNameBox';\nimport ChangePWBox from './ChangePWBox';\nimport { faLock, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { fadeIn } from '../../style/keyframes';\nimport { ICategoryList, MyPageType } from '../../interfaces';\nimport { observer } from 'mobx-react';\nimport Categories from './Categories';\n\nconst categoryList: ICategoryList[] = [\n    {\n        id: 1,\n        icon: faUser,\n        category: 'changeName',\n        text: '닉네임 변경',\n    },\n    {\n        id: 2,\n        icon: faLock,\n        category: 'changePW',\n        text: '비밀번호 변경',\n    },\n];\n\nconst Boxes: React.FC = observer(() => {\n    const [selectedCategory, setSelectedCategory] = useState<MyPageType>('none');\n\n    return (\n        <Container>\n            <Announce>원하시는 항목을 골라주세요</Announce>\n            <Row>\n                {categoryList.map(x => (\n                    <Categories\n                        icon={x.icon}\n                        text={x.text}\n                        setSelectedCategory={setSelectedCategory}\n                        category={x.category}\n                        key={x.id}\n                    />\n                ))}\n            </Row>\n            {selectedCategory === 'changeName' && <ChangeNameBox />}\n            {selectedCategory === 'changePW' && <ChangePWBox />}\n        </Container>\n    );\n});\n\nexport default Boxes;\n\nconst Container = styled.div`\n    display: flex;\n    padding: 10px;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    animation: ${fadeIn} 1s ease;\n    @media only screen and (max-width: 1450px) {\n        flex-direction: column;\n    };\n`;\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 60px;\n`;\n\nconst Announce = styled.div`\n    font-size: 36px;\n    color: ${({ theme }) => theme.colors.white};\n    margin-bottom: 40px;\n`;","import React from 'react';\nimport Container from '../components/SharedComponents/Container';\nimport CenterView from '../components/SharedComponents/CenterView';\nimport { observer } from 'mobx-react';\nimport Boxes from '../components/MyPage/Boxes';\n\nconst MyPage: React.FC = observer(() => {\n    return (\n        <Container>\n            <CenterView>\n                <Boxes />\n            </CenterView>\n        </Container>\n    );\n});\n\nexport default MyPage;","import { action, makeObservable, observable } from \"mobx\";\nimport { VisibilityType, IRecentChat } from '../interfaces/index';\nimport userStore from \"./userStore\";\n\nclass ChatStore {\n    public isSearching: boolean = false;\n    public isMatched: boolean = false;\n    public isFinished: boolean = false;\n    public visible: VisibilityType = 'hidden';\n    public chatLog: IRecentChat[] = [];\n    public recentChat: IRecentChat = { nickName: '', message: '', socketID: '' };\n\n    constructor() {\n        makeObservable(this, {\n            isSearching: observable,\n            isMatched: observable,\n            isFinished: observable,\n            visible: observable,\n            chatLog: observable,\n            recentChat: observable,\n            setIsSearching: action,\n            setIsMatched: action,\n            setIsFinished: action,\n            resetRecentChat: action,\n            handleCancel: action,\n            handleFind: action,\n            handleSearch: action.bound,\n            handleMatched: action,\n            handleReceiveMsg: action,\n            handlePushChat: action,\n            handleFinished: action,\n            stopChat: action.bound,\n            chatStopped: action,\n            reset: action.bound,\n        });\n    };\n\n    public setIsSearching(boolean: boolean): void {\n        this.isSearching = boolean;\n    };\n\n    public setIsMatched(boolean: boolean): void {\n        this.isMatched = boolean;\n    };\n\n    public setIsFinished(boolean: boolean): void {\n        this.isFinished = boolean;\n    };\n\n    public setVisible(status: VisibilityType): void {\n        this.visible = status;\n    }\n\n    public resetRecentChat(): void {\n        this.recentChat = { nickName: '', message: '', socketID: '' };\n    };\n\n    public handleCancel(): void {\n        userStore.userSocket?.emit('cancel');\n    };\n\n    public handleFind(): void {\n        userStore.userSocket?.emit('find');\n    };\n\n    public handleSearch(): void {\n        if (!this.isSearching) {\n            this.setIsSearching(true);\n            this.handleFind();\n        } else {\n            this.setIsSearching(false);\n            this.handleCancel();\n        };\n    };\n\n    public handleMatched(): void {\n        userStore.userSocket?.on('matched', () => {\n            this.setIsMatched(true);\n            this.setVisible('visible');\n            this.chatLog = [{\n            nickName: 'SERENDY',\n            message: '상대와 대화가 시작되었어요!',\n            socketID: 'admin',\n            }];\n        });\n    };\n\n    public handleReceiveMsg(): void {\n        userStore.userSocket?.on('receive', (data, socketID) => {\n            this.recentChat = {\n                nickName: data.nickName,\n                message: data.message,\n                socketID: socketID\n            };\n        });\n    };\n\n    public handlePushChat(): void {\n        if (this.recentChat.message.length > 0) {\n            this.chatLog = [...this.chatLog, this.recentChat];\n        };\n    };\n\n    public handleFinished(): void {\n        if (this.isSearching && this.isMatched && !this.isFinished) {\n            this.setIsFinished(true);\n            this.recentChat = {\n                nickName: 'SERENDY',\n                message: '대화가 종료되었어요!',\n                socketID: 'admin',\n            };\n        };\n    };\n\n    public stopChat(): void {\n        userStore.userSocket?.emit('stop chat');\n        this.handleFinished();\n    };\n\n    public chatStopped(): void {\n        userStore.userSocket?.on('is ended', () => {\n            userStore.userSocket?.emit('delete other');\n            this.handleFinished();\n        });\n    };\n\n    public reset(): void {\n        this.chatLog = [];\n        this.setIsSearching(false);\n        this.setIsFinished(false);\n        this.setIsMatched(false);\n    };\n};\n\nconst chatStore = new ChatStore();\nexport default chatStore;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Announce: React.FC<{ announce: string }> = ({ announce }) => {\n    return (\n        <Container size='18px' >\n            {announce}\n        </Container>\n    );\n};\n\nexport default Announce;\n\nexport const Container = styled.div<{ size?: string }>`\n    font-size: 17px;\n    margin-bottom: 10px;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 1520px) {\n        font-size: 15px;\n    };\n    @media only screen and (max-width: 600px) {\n        font-size: 11px;\n    };\n`;","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport chatStore from \"../../store/chatStore\";\nimport { BigAnnounce, Rule, BtnBox, StartBtn } from \"./MatchHandler\";\nimport Announce from '../SharedComponents/Announce';\n\nconst beforeAnnounce = [\n    {\n        id: 1,\n        announce: '· 대화는 서로가 설정한 이름으로 진행돼요',\n    },\n    {\n        id: 2,\n        announce: '· 중간에 대화를 나가지 않으면 대화를 계속 할 수 있어요',\n    },\n    {\n        id: 3,\n        announce: '· 누군가 대화방을 나가게 되면 대화가 종료돼요',\n    },\n];\n\nconst BeforeChat: React.FC = observer(() => {\n    return (\n        <>\n        <BigAnnounce>상대를 찾고 대화를 시작하세요 !</BigAnnounce>\n        <Rule>\n            {beforeAnnounce.map(x => (\n                <Announce announce={x.announce}\n                    key={x.id}\n                />\n            ))}\n        </Rule>\n        <BtnBox>\n            <StartBtn onClick={chatStore.handleSearch} >상대 찾기</StartBtn>\n        </BtnBox>\n        </>\n    );\n});\n\nexport default BeforeChat;","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport chatStore from \"../../store/chatStore\";\nimport { BigAnnounce, Announce, BtnBox, StartBtn } from \"./MatchHandler\";\n\nconst FinishedChat: React.FC = observer(() => {\n    return (\n        <>\n            <BigAnnounce> 대화가 종료되었어요 </BigAnnounce>\n            <Announce size='18px' >상대방은 어떤 사람이었을까요?</Announce>\n            <BtnBox>\n                <StartBtn onClick={chatStore.reset} >대화방 나가기</StartBtn>\n            </BtnBox>\n        </>\n    );\n});\n\nexport default FinishedChat;","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport chatStore from \"../../store/chatStore\";\nimport { BigAnnounce, Announce, BtnBox, CancelBtn } from \"./MatchHandler\";\n\nconst MatchedChat: React.FC = observer(() => {\n    return (\n        <>\n            <BigAnnounce> 상대와 연결되었어요 </BigAnnounce>\n            <Announce size='18px'>먼저 인사 해보시는 건 어떠세요?</Announce>\n            <BtnBox>\n                <CancelBtn onClick={chatStore.stopChat}>대화방 나가기</CancelBtn>\n            </BtnBox>\n        </>\n    );\n});\n\nexport default MatchedChat;","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport Loader from \"react-loader-spinner\";\nimport chatStore from \"../../store/chatStore\";\nimport { theme } from \"../../style/theme\";\nimport { BigAnnounce, BtnBox, CancelBtn } from \"./MatchHandler\";\n\nconst SearchingChat: React.FC = observer(() => {\n    return (\n        <>\n            <BigAnnounce style={{ marginBottom: '30px' }} >상대를 찾고 있어요</BigAnnounce>\n            <Loader type=\"Circles\" color={theme.colors.plum} height='40px' width='40px' />\n            <BtnBox>\n                <CancelBtn onClick={chatStore.handleSearch} >취소하기</CancelBtn>\n            </BtnBox>\n        </>\n    );\n});\n\nexport default SearchingChat;\n","import React from 'react'\nimport styled from 'styled-components'\nimport BeforeChat from './BeforeChat';\nimport FinishedChat from './FinishedChat';\nimport MatchedChat from './MatchedChat';\nimport SearchingChat from './SearchingChat';\nimport { IMatchHandler } from '../../interfaces/index';\n\nconst MatchHandler: React.FC<IMatchHandler> = ({ isSearching, isMatched, isFinished }) => {\n    if (!isSearching && !isMatched && !isFinished) return <BeforeChat />\n    if (isSearching && !isMatched && !isFinished) return <SearchingChat />\n    if (isSearching && isMatched && !isFinished) return <MatchedChat />\n    if (isSearching && isMatched && isFinished) return <FinishedChat />\n    return null;\n};\n\nexport default MatchHandler;\n\nexport const Rule = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n`;\n\nexport const Announce = styled.div<{ size?: string }>`\n    font-size: 17px;\n    margin-bottom: 10px;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 1520px) {\n        font-size: 15px;\n    };\n    @media only screen and (max-width: 600px) {\n        font-size: 11px;\n    };\n`;\n\nexport const BigAnnounce = styled(Announce)`\n    font-size: 30px;\n    margin-bottom: 40px;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 1520px) {\n        font-size: 25px;\n        margin-bottom: 30px;\n    };\n    @media only screen and (max-width: 600px) {\n        font-size: 17px;\n        margin-bottom: 20px;\n    };\n`;\n\nexport const StartBtn = styled.button`\n    all: unset;\n    width: 150px;\n    height: 70px;\n    font-size: 20px;\n    text-align: center;\n    background-color: ${({ theme }) => theme.colors.main60};\n    border-radius: 10px;\n    color: ${({ theme }) => theme.colors.white};\n    cursor: pointer;\n    transition: .3s ease;\n    &:hover {\n        color: ${({ theme }) => theme.colors.black};\n    };\n    @media only screen and (max-width: 1450px) {\n        width: 100px;\n        height: 40px;\n        font-size: 17px;\n        margin-top: 15px;\n    };\n    @media only screen and (max-width: 600px) {\n        width: 90px;\n        height: 25px;\n        font-size: 13px;\n    };\n`;\n\nexport const CancelBtn = styled.button`\n    all: unset;\n    width: 150px;\n    height: 70px;\n    font-size: 20px;\n    text-align: center;\n    background-color: ${({ theme }) => theme.colors.main60};\n    border-radius: 10px;\n    color: ${({ theme }) => theme.colors.white};\n    cursor: pointer;\n    transition: .3s ease;\n    @media only screen and (max-width: 1450px) {\n        width: 100px;\n        height: 40px;\n        font-size: 17px;\n        margin-top: 15px;\n    };\n    @media only screen and (max-width: 600px) {\n        width: 90px;\n        height: 25px;\n        font-size: 13px;\n    };\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.red};\n        color: ${({ theme }) => theme.colors.white};\n    };\n`;\n\nexport const BtnBox = styled.div`\n    position: absolute;\n    bottom: 70px;\n    height: 35%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    @media only screen and (max-width: 1450px) {\n        bottom: 10px;\n    };\n    @media only screen and (max-width: 600px) {\n        bottom: 0px;\n    };\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { IMessageBox } from '../../interfaces';\n\nconst MessageBox: React.FC<IMessageBox>= ({ nickName, message, socketID }) => {\n    return (\n        <Container fd={socketID ? 'row-reverse' : 'row'} >\n            {socketID ?  \n                <OwnChatName> { nickName } </OwnChatName> :\n                <OthersName> { nickName }</OthersName>\n            }\n            {socketID ? \n                <OwnBalloon>\n                    <RightTail />\n                    {message}\n                </OwnBalloon> :\n                <OthersBalloon>\n                    <LeftTail />\n                    {message}\n                </OthersBalloon>\n            }\n        </Container>\n    );\n};\n\nexport default MessageBox;\n\nconst Container = styled.div<{ fd: string }>`\n    position: relative;\n    display: flex;\n    flex-direction: ${({ fd }) => fd};\n    width: 100%;\n    min-height: 60px;\n    margin-bottom: 10px;\n    @media only screen and (max-width: 600px) {\n        min-height: 40px;\n        margin-bottom: 5px;\n    };\n`;\n\nconst OthersBalloon = styled.div`\n    position: relative;\n    min-width: 60px;\n    max-width: 340px;\n    padding: 20px;\n    margin-top: 29px;\n    margin-right: 10px;\n    left: 25px;\n    min-height: 50px;\n    word-break: break-all;\n\tbackground: ${({ theme }) => theme.colors.white};\n    color: ${({ theme }) => theme.colors.black};\n    font-size: 17px;\n\tborder-radius: 15px;\n    @media only screen and (max-width: 600px) {\n        font-size: 14px;\n        max-width: 200px;\n    };\n`;\n\nconst OwnBalloon = styled.div`\n    position: relative;\n    min-width: 60px;\n    max-width: 340px;\n    padding: 20px;\n    margin-top: 29px;\n    margin-right: 10px;\n    right: 20px;\n    min-height: 50px;\n    word-break: break-all;\n\tbackground: ${({ theme }) => theme.colors.main60};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 17px;\n\tborder-radius: 15px;\n    @media only screen and (max-width: 600px) {\n        font-size: 14px;\n        max-width: 200px;\n    };\n`;\n\nconst LeftTail = styled.div`\n    position: absolute;\n\tleft: 0;\n\ttop: 50%;\n\twidth: 0;\n\theight: 0;\n\tborder: 18px solid transparent;\n\tborder-right-color: ${({ theme }) => theme.colors.white};\n\tborder-left: 0;\n\tborder-top: 0;\n\tmargin-top: -15px;\n\tmargin-left: -18px;\n`;\n\nconst RightTail = styled.div`\n\tposition: absolute;\n\tright: 0;\n\ttop: 50%;\n\twidth: 0;\n\theight: 0;\n\tborder: 18px solid transparent;\n\tborder-left-color: ${({ theme }) => theme.colors.main60};\n\tborder-right: 0;\n\tborder-top: 0;\n\tmargin-top: -15px;\n\tmargin-right: -18px;\n`;\n\nconst OwnChatName = styled.div`\n    position: absolute;\n    font-size: 14px;\n    max-width: 100px;\n    position: absolute;\n    color: ${({ theme }) => theme.colors.white};\n    right: 35px;\n    top: 10px;\n`;\n\nconst OthersName = styled.div`\n    position: absolute;\n    font-size: 14px;\n    max-width: 100px;\n    color: ${({ theme }) => theme.colors.white};\n    left: 30px;\n    top: 10px;\n`;","import React, { useRef, useEffect } from 'react'\nimport styled, { Keyframes } from 'styled-components'\nimport { observer } from 'mobx-react'\nimport { VisibilityType } from '../../interfaces'\nimport { zoomIn, zoomOut } from '../../style/keyframes'\nimport userStore from '../../store/userStore'\nimport chatStore from '../../store/chatStore'\nimport MessageBox from './MessageBox'\n\nconst ChatWindow: React.FC = observer(() => {\n    const sendBtn = useRef<HTMLButtonElement>(null);\n    const input = useRef<HTMLInputElement>(null);\n    const screen = useRef<HTMLDivElement>(null);\n\n    const resetInput = (): void => {\n        input.current!.value = '';\n    };\n\n    const handleEnter = (e: React.KeyboardEvent): void => {\n        if (e.key === 'Enter') {\n            sendBtn.current?.click();\n        };\n    };\n\n    const handleSendMsg = (): void => {\n        if (input.current?.value.length !== 0) {\n            const nickName = userStore.user?.nickName;\n            const message = input.current?.value;\n            const data = { nickName, message };\n            userStore.userSocket?.emit('chat', data);\n            input.current!.value = '';\n        } else {\n            return;\n        };\n    };\n\n    const scrollToBottom = (): void => {\n        if (screen.current?.scrollHeight && screen.current?.clientHeight) {\n            const scroll = screen.current.scrollHeight - screen.current.clientHeight;\n            screen.current?.scrollTo(0, scroll);\n        } else {\n            return;\n        };\n    };\n\n    useEffect(() => {\n        resetInput();\n    }, [chatStore.isFinished]) // eslint-disable-line\n\n    useEffect(() => {\n        chatStore.handlePushChat();\n        scrollToBottom();\n        chatStore.resetRecentChat();\n    }, [chatStore.recentChat.message]); // eslint-disable-line\n\n    return (\n        <ChatBox animation={chatStore.isMatched ? zoomIn : zoomOut}\n            visibility={chatStore.visible}\n        >\n            <Screen ref={screen} >\n                {chatStore.chatLog.map((data, i) => (\n                    <MessageBox message={data.message}\n                        nickName={data.nickName}\n                        socketID={data.socketID === userStore.socketID}\n                        key={i}\n                    />\n                ))}\n            </Screen>\n            <SenderBox>\n                <Input ref={input}\n                    onKeyPress={handleEnter}\n                />\n                <SendBtn ref={sendBtn}\n                    onClick={handleSendMsg}\n                    disabled={chatStore.isFinished ? true : false}\n                >\n                    전송\n                </SendBtn>\n            </SenderBox>\n        </ChatBox>\n    );\n});\n\nexport default ChatWindow;\n\nconst ChatBox = styled.div<{ animation: Keyframes, visibility: VisibilityType }>`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-right: 20px;\n    width: 100%;\n    height: 740px;\n    min-height: 740px;\n    visibility: ${({ visibility }) => visibility};\n    animation: ${({ animation }) => animation} .7s ease forwards;\n    @media only screen and (max-width: 1450px) {\n        margin-right: 0px;\n        min-height: 340px;\n    };\n    @media only screen and (max-width: 600px) {\n        height: 100%;\n    };\n`;\n\nconst Screen = styled.div`\n    width: 740px;\n    height: 680px;\n    max-height: 680px;\n    background-color: ${({ theme }) => theme.colors.white10};\n    border-radius: 10px;\n    overflow-y: auto;\n    @media only screen and (max-width: 1450px) {\n        width: 99%;\n        height: 70%;\n        min-width: 300px;\n    };\n`;\n\nconst SenderBox = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 10px;\n    width: 740px;\n    min-width: 500px;\n    height: 50px;\n    @media only screen and (max-width: 1450px) {\n        width: 99%;\n        min-width: 200px;\n    };\n`;\n\nconst Input = styled.input.attrs(({\n    type: 'text',\n    placeholder: '내용을 입력해주세요',\n    autocomplete: 'off',\n}))`\n    all: unset;\n    width: 84%;\n    min-height: 50px;\n    padding-left: 30px;\n    font-size: 18px;\n    color: ${({ theme }) => theme.colors.white};\n    background-color: ${({ theme }) => theme.colors.white10};\n    border-radius: 10px;\n    @media only screen and (max-width: 600px) {\n        width: 70%;\n        font-size: 15px;\n    };\n`;\n\nconst SendBtn = styled.button`\n    all: unset;\n    width: 10%;\n    height: 50px;\n    font-size: 18px;\n    text-align: center;\n    background-color: ${({ theme }) => theme.colors.main60};\n    border-radius: 10px;\n    color: ${({ theme }) => theme.colors.white};\n    cursor: pointer;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.plum};\n        color: ${({ theme }) => theme.colors.black};\n    }\n    @media only screen and (max-width: 1450px) {\n        font-size: 15px;\n        width: 10%;\n    };\n    @media only screen and (max-width: 600px) {\n        width: 18%;\n    };\n`;","import React, { useEffect } from 'react'\nimport styled from 'styled-components';\nimport CenterView from '../components/SharedComponents/CenterView'\nimport Container from '../components/SharedComponents/Container'\nimport MatchHandler from '../components/ChatPage/MatchHandler';\nimport ChatWindow from '../components/ChatPage/ChatWindow';\nimport chatStore from '../store/chatStore';\nimport { observer } from 'mobx-react';\nimport userStore from '../store/userStore';\nimport { io } from 'socket.io-client';\nimport { BASE_URL } from '../config';\n\nconst ChatPage: React.FC = observer(() => {\n\n    useEffect(() => {\n        if (userStore.user) {\n            userStore.setUserSocket(io(BASE_URL));\n            userStore.saveSocketID();\n        }; \n        return () => {\n            userStore.userSocket?.disconnect();\n            userStore.setSocketID(null);\n        };\n    }, [userStore.user]); //eslint-disable-line\n\n    useEffect(() => {\n        chatStore.handleMatched();\n        chatStore.handleReceiveMsg();\n        chatStore.chatStopped();\n    }, []); // eslint-disable-line\n\n    useEffect(() => {\n        return () => {\n            chatStore.stopChat();\n            chatStore.reset();\n        };\n    }, []); // eslint-disable-line\n\n    return (\n        <Container>\n            <CenterView>\n                <ChatBox>\n                    <ChatWindow />\n                    <HandlerBox>\n                        <MatchHandler isSearching={chatStore.isSearching} \n                            isMatched={chatStore.isMatched}\n                            isFinished={chatStore.isFinished}\n                        />\n                    </HandlerBox>\n                </ChatBox>\n            </CenterView>\n        </Container>\n    );\n});\n\nexport default ChatPage;\n\nconst ChatBox = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    @media only screen and (max-width: 1450px) {\n        flex-direction: column;\n    };\n    @media only screen and (max-width: 600px) {\n        flex-direction: column-reverse;\n    };\n`;\n\nconst HandlerBox = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    min-width: 300px;\n    height: 740px;\n    border-radius: 10px;\n    background-color: ${({ theme }) => theme.colors.main60};\n    @media only screen and (max-width: 1450px) {\n        height: 70%;\n    };\n`;\n","import React from 'react';\nimport styled  from 'styled-components';\nimport { IPostWindow } from '../../interfaces/index';\nimport Announces from '../SharedComponents/Announce';\n\nconst postAnnounce = [\n    {\n        id: 1,\n        announce: '· 편지는 수신자를 정할 수 없고 무작위로 한 사람에게 전달돼요',\n    },\n    {\n        id: 2,\n        announce: '· 누군가 편지를 받게되면 나에게 답장을 보낼 수 있어요',\n    },\n    {\n        id: 3,\n        announce: '· 편지를 받으면 자동으로 보관함에 저장돼요',\n    },\n    {\n        id: 4,\n        announce: '· 한 편지에 답장은 한 번만 가능해요',\n    },\n];\n\nconst PostWindow: React.FC<IPostWindow>= ({ postSend, postArea }) => {\n    return (\n        <Row>\n            <LetterContainer>\n                <Letter>\n                    <TextArea ref={postArea} />\n                </Letter>\n                <SendBtnBox>\n                    <SendBtn onClick={postSend} >\n                        편지 보내기\n                    </SendBtn>\n                </SendBtnBox>\n            </LetterContainer>\n\n            <RuleContainer>\n                <BigAnnounce>어떤 사람이 내 편지를 받게 될까요 ?</BigAnnounce>\n                    <Rule>\n                        {postAnnounce.map(x => (\n                            <Announces announce={x.announce}\n                                key={x.id}\n                            />\n                        ))}\n                    </Rule>\n            </RuleContainer>\n        </Row>\n    );\n};\n\nexport default PostWindow;\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    @media only screen and (max-width: 1450px) {\n        flex-direction: column;\n    };\n`;\n\nconst LetterContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-right: 20px;\n    width: 100%;\n    height: 740px;\n    @media only screen and (max-width: 1450px) {\n        margin-right: 0px;\n        height: 90%;\n    };\n`;\n\nconst Letter = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 740px;\n    height: 680px;\n    min-width: 500px;\n    border-radius: 10px;\n    @media only screen and (max-width: 1450px) {\n        width: 99%;\n        height: 70%;\n        min-width: 300px;\n    };\n`;\n\nconst TextArea = styled.textarea.attrs({\n    placeholder: '여기서부터 이야기를 들려주세요',\n})`\n    outline-style: none;\n    -webkit-appearance: none;\n    background-color: ${({ theme }) => theme.colors.white10};\n    width: 100%;\n    height: 100%;\n    font-size: 17px;\n    color: ${({ theme }) => theme.colors.white};\n    padding: 60px;\n    resize: none;\n    border-radius: 10px;\n    @media only screen and (max-width: 600px) {\n        padding: 20px;\n        font-size: 14px;\n    };\n`;\n\nconst SendBtnBox = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 10px;\n    width: 740px;\n    min-width: 500px;\n    height: 50px;\n    @media only screen and (max-width: 1450px) {\n        width: 99%;\n        min-width: 200px;\n    };\n`;\n\nconst SendBtn = styled.button`\n    all: unset;\n    width: 100%;\n    height: 50px;\n    font-size: 18px;\n    text-align: center;\n    background-color: ${({ theme }) => theme.colors.main60};\n    border-radius: 10px;\n    color: ${({ theme }) => theme.colors.white};\n    cursor: pointer;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.plum};\n        color: ${({ theme }) => theme.colors.black};\n    };\n    @media only screen and (max-width: 600px) {\n        font-size: 17px;\n    };\n`;\n\nconst RuleContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    min-width: 300px;\n    height: 740px;\n    background-color: ${({ theme }) => theme.colors.main60};\n    border-radius: 10px;\n    @media only screen and (max-width: 1450px) {\n        height: 70%;\n    };\n`;\n\nconst Rule = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n`;\n\nconst Announce = styled.div<{ size?: string }>`\n    font-size: 17px;\n    margin-bottom: 10px;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 1520px) {\n        font-size: 15px;\n    };\n    @media only screen and (max-width: 600px) {\n        font-size: 11px;\n    };\n`;\nconst BigAnnounce = styled(Announce)`\n    font-size: 30px;\n    margin-bottom: 40px;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 1520px) {\n        font-size: 25px;\n        margin-bottom: 30px;\n    };\n    @media only screen and (max-width: 600px) {\n        font-size: 17px;\n        margin-bottom: 20px;\n    };\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\nimport { paperPlane, setTimeFade } from '../../style/keyframes';\n\nconst PostSent: React.FC<{ reset: () => void }>= ({ reset }) => {\n    return (\n        <>\n            <Icon icon={faPaperPlane} />\n            <Text>편지가 누군가에게 전달되었어요!</Text>\n            <Button onClick={reset} >확인</Button>\n        </>\n    );\n};\n\nexport default PostSent;\n\nconst Icon = styled(FontAwesomeIcon)`\n    font-size: 40px;\n    color: ${({ theme }) => theme.colors.white};\n    animation: ${paperPlane} 2s ease forwards;\n    @media only screen and (max-width: 600px) {\n        font-size: 27px;\n    };\n`;\n\nconst Text = styled.div`\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 30px;\n    animation: ${setTimeFade} 2s ease;\n    @media only screen and (max-width: 600px) {\n        font-size: 20px;\n    };\n`;\n\nconst Button = styled.button`\n    all: unset;\n    width: 200px;\n    height: 65px;\n    border-radius: 40px;\n    margin-top: 30px;\n    margin-bottom: 120px;\n    background-color: ${({ theme }) => theme.colors.mainBlue};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 20px;\n    text-align: center;\n    cursor: pointer;\n    transition: .4s ease;\n    animation: ${setTimeFade} 2s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white};\n        color: ${({ theme }) => theme.colors.mainBlue};\n    };\n    @media only screen and (max-width: 600px) {\n        width: 150px;\n        height: 50px;\n        font-size: 17px;\n    };\n`;","import { serendyInstance } from './serendyInstance';\nimport { AxiosResponse } from 'axios';\nimport { ISendPost, ISendComment } from '../interfaces';\n\nclass PostRepository {\n    private path = '/api/post';\n\n    public sendPost(data: ISendPost): Promise<AxiosResponse> {\n        return serendyInstance.post(`${this.path}/send`, data);\n    };\n\n    public getSentPosts(account: string | null | undefined): Promise<AxiosResponse> {\n        return serendyInstance.get(`${this.path}/sentposts/${account}`);\n    };\n\n    public getReceivePosts(account: string | null | undefined): Promise<AxiosResponse> {\n        return serendyInstance.get(`${this.path}/receivedposts/${account}`);\n    };\n\n    public showClickedOne(_Id: string, account: string): Promise<AxiosResponse> {\n        return serendyInstance.get(`${this.path}/showone/${_Id}/${account}`);\n    };\n\n    public sendComment(data: ISendComment): Promise<AxiosResponse> {\n        return serendyInstance.post(`${this.path}/sendcomment`, data);\n    };\n};\n\nconst postRepository = new PostRepository();\n\nexport default postRepository;","import { action, makeObservable, observable, flow } from 'mobx';\nimport { ICurrentPost } from '../interfaces/index';\nimport userStore from './userStore';\nimport postRepository from '../repository/postRepository'\n\nclass PostStore {\n    public sentPosts: ICurrentPost[] = [];\n    public receivedPosts: ICurrentPost[] = [];\n    public currentSentPost: ICurrentPost | null = null\n    public currentReceivedPost: ICurrentPost | null = null;\n    public isLoading: boolean = false;\n\n    constructor() {\n        makeObservable(this, {\n            sentPosts: observable,\n            receivedPosts: observable,\n            currentSentPost: observable,\n            currentReceivedPost: observable,\n            isLoading: observable,\n            setSentPosts: action,\n            setReceivedPosts: action,\n            setCurrentSentPost: action,\n            setCurrentReceivedPost: action,\n            setIsLoading: action,\n            sendPost: flow,\n            getSentPosts: flow,\n            getReceivedPosts: flow,\n            handleSentOne: action.bound,\n            handleReceivedOne: action.bound,\n            sendComment: flow,\n            resetReceivedPosts: action,\n            resetSentPosts: action,\n        });\n    };\n\n    public setSentPosts(data: ICurrentPost[]): void {\n        this.sentPosts = data;\n    };\n\n    public setReceivedPosts(data: ICurrentPost[]): void {\n        this.receivedPosts = data;\n    };\n\n    public setCurrentSentPost(data: ICurrentPost | null): void {\n        this.currentSentPost = data;\n    };\n\n    public setCurrentReceivedPost(data: ICurrentPost | null): void {\n        this.currentReceivedPost = data;\n    };\n\n    public setIsLoading(boolean: boolean): void {\n        this.isLoading = boolean;\n    };\n\n    public *sendPost(content: string | undefined) {\n        if (content?.length === 0) {\n            return;\n        };\n        try {\n            const data = {\n                account: userStore.user?.account,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: { message }} = yield postRepository.sendPost(data);\n            if ((message === 'Send Success')) {\n                return true\n            };\n        } catch(err) {\n            console.log(err);\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public *getSentPosts() {\n        this.setIsLoading(true);\n        try {\n            const { data } = yield postRepository.getSentPosts(userStore.user?.account);\n            this.setSentPosts(data);\n            this.setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public *getReceivedPosts() {\n        this.setIsLoading(true);\n        try {\n            const { data } = yield postRepository.getReceivePosts(userStore.user?.account);\n            this.setReceivedPosts(data);\n            this.setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public handleSentOne(_id: string): void {\n        const post = this.sentPosts.find(x => x._id === _id);\n        post && this.setCurrentSentPost(post);\n    };\n\n    public handleReceivedOne(_id: string): void {\n        const post = this.receivedPosts.find(x => x._id === _id);\n        post && this.setCurrentReceivedPost(post);\n    };\n\n    public *sendComment(content: string | undefined) {\n        try {\n            if (content?.length === 0) {\n                return;\n            };\n            const data = {\n                _id: this.currentReceivedPost?._id,\n                toAccount: this.currentReceivedPost?.toAccount,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: { message, receivedPosts, currentReceivedPost}} = yield postRepository.sendComment(data);\n            if ((message === 'Success')) {\n                this.setReceivedPosts(receivedPosts);\n                this.setCurrentReceivedPost(currentReceivedPost);\n            };\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public resetReceivedPosts(): void {\n        this.setCurrentReceivedPost(null);\n        this.setReceivedPosts([]);\n    };\n\n    public resetSentPosts(): void {\n        this.setCurrentSentPost(null);\n        this.setSentPosts([]);\n    };\n\n};\n\nconst postStore = new PostStore();\nexport default postStore;","import React from 'react';\nimport Loader from \"react-loader-spinner\";\nimport styled from 'styled-components';\nimport { theme } from '../../style/theme';\n\nconst CircleLoader: React.FC = () => {\n    return (\n        <LoaderBox>\n            <Loader\n                type=\"Circles\"\n                color={theme.colors.plum}\n                height={60}\n                width={60}\n            />\n        </LoaderBox> \n    );\n} ;\n\nexport default CircleLoader;\n\nconst LoaderBox = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;","import React, { useRef, useState } from 'react'\nimport { observer } from 'mobx-react';\nimport CenterView from '../components/SharedComponents/CenterView'\nimport Container from '../components/SharedComponents/Container'\nimport PostWindow from '../components/PostPage/PostWindow';\nimport PostSent from '../components/PostPage/PostSent';\nimport postStore from '../store/postStore';\nimport CircleLoader from '../components/SharedComponents/CircleLoader';\nimport { flowResult } from 'mobx';\n\nconst PostPage: React.FC = observer(() => {\n    const [isSending, setIsSending] = useState<boolean>(false);\n    const [isSent , setIsSent] = useState<boolean>(false);\n    const postArea = useRef<HTMLTextAreaElement>(null);\n\n    const toggleIsSent = (): void => {\n        setIsSent(!isSent);\n    };;\n\n    const toggleIsSending = (): void => {\n        setIsSending(!isSending);\n    };\n\n    const sendPost = async () => {\n        toggleIsSending();\n        const isSuccess = await flowResult(postStore.sendPost(postArea.current?.value));\n        if (isSuccess) {\n            toggleIsSending();\n            toggleIsSent();\n        };\n    };\n\n    const reset = (): void => {\n        setIsSent(false);\n        setIsSending(false);\n    };\n\n\n\n    if (isSending && !isSent) {\n        return (\n            <Container>\n                <CenterView>\n                    <CircleLoader />\n                </CenterView>\n            </Container>\n        );\n    } else {\n        return (\n            <Container>\n                <CenterView>\n                    {isSent ? \n                        <PostSent reset={reset} /> : \n                        <PostWindow postSend={sendPost}\n                            postArea={postArea}\n                        />\n                    }\n                </CenterView>\n            </Container>\n        );\n    };\n});\n\nexport default PostPage;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\nimport { IView } from '../../../interfaces';\n\nconst HaveComment: React.FC<IView>= ({ post }) => {\n    return (\n        <LETTER>\n            <NickName> {post?.nickName}님의 편지 </NickName>\n            <Content>{post?.content}</Content>\n            <CommentBox>\n                    <Column>\n                        <Icon icon={faUser} />\n                        <UserName> {post?.comment?.nickName} </UserName>\n                    </Column>\n                    <Comment> {post?.comment?.content} </Comment>\n            </CommentBox>\n        </LETTER >\n    );\n};\n\nexport default HaveComment;\n\n\nexport const LETTER = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    width: 69%;\n    height: 740px;\n    min-height: 740px;\n    max-height: 740px;\n    margin-top: 10px;\n    border-radius: 10px;\n    overflow: auto;\n    background-color: ${({ theme }) => theme.colors.white10};\n`;\n\nexport const NickName = styled.div`\n    width: 100%;\n    height: 50px;\n    line-height: 50px;\n    margin-top: 20px;\n    font-size: 23px;\n    text-align: center;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const Content = styled.div`\n    width: 80%;\n    min-height: 500px;\n    font-size: 18px;\n    white-space: pre;\n    border-radius: 10px;\n    padding: 20px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const CommentBox = styled.div`\n    position: absolute;\n    bottom: 20px;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n    padding: 10px;\n    border-radius: 10px;\n    border: 1px solid ${({ theme }) => theme.colors.white};\n    width: 80%;\n    white-space: nowrap;\n    overflow: auto;\n`;\n\nexport const Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height: 120px;\n`;\n\nexport const Icon = styled(FontAwesomeIcon)`\n    font-size: 30px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const UserName = styled.div`\n    font-size: 16px;\n    text-align: center;\n    margin-top: 10px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const Comment = styled.div`\n    margin-left: 20px;\n    font-size: 18px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nexport const Input = styled.textarea.attrs({\n    placeholder: '아직 답장을 안하셨네요, 답장을 보내보세요!',\n})`\n    outline-style: none;\n    -webkit-appearance: none;\n    background-color: rgba(0,0,0,0);\n    font-size: 18px;\n    color: ${({ theme }) => theme.colors.white};\n    border: none;\n    background-color: none;\n    border-radius: 10px;\n    padding-left: 5px;\n    width: 85%;\n    height: 120px;\n    resize: none;\n    overflow: hidden;\n    line-height: 1.6;\n`;\n\nexport const SendBtn = styled.button`\n    all: unset;\n    position: absolute;\n    right: 10px;\n    width: 13%;\n    height: 120px;\n    border-radius: 10px;\n    background-color: ${({ theme }) => theme.colors.main60};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 20px;\n    text-align: center;\n    cursor: pointer;\n    transition: .4s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white};\n        color: ${({ theme }) => theme.colors.mainBlue};\n    };\n`;","import React from 'react';\nimport { IView } from '../../../interfaces';\nimport {\n    LETTER,\n    NickName,\n    Content,\n    CommentBox,\n    Comment,\n    Input,\n    SendBtn,\n} from './HaveComment'\n\nconst NoneComment: React.FC<IView> = ({ post, whatPage, commentInput, sendComment }) => {\n    return (\n        <LETTER>\n            <NickName>{post?.nickName}님의 편지</NickName>\n            <Content>\n                {post?.content}\n            </Content>\n            {whatPage === 'sender' &&\n                <CommentBox>\n                    <Comment>아직 답장이 오지 않았어요</Comment>\n                </CommentBox>\n            }\n            {whatPage === 'recipients' &&\n                <CommentBox>\n                    <Input ref={commentInput} />\n                    <SendBtn onClick={sendComment} >답장하기</SendBtn>\n                </CommentBox>\n            }\n        </LETTER>\n    );\n};\n\nexport default NoneComment;","import React from 'react';\nimport { IView } from '../../interfaces/index';\nimport HaveComment from '../SharedComponents/PostComponents/HaveComment';\nimport NoneComment from '../SharedComponents/PostComponents/NoneComment';\n\nconst ReceivedPostViewer: React.FC<IView>= ({ post, commentInput, sendComment }) => {\n        if (post && post.comment) {\n            return <HaveComment post={post} />\n        };\n        if (post && !post.comment) {\n            return <NoneComment post={post}\n                        commentInput={commentInput}\n                        sendComment={sendComment}\n                        whatPage='recipients'\n                    />\n        };\n    return null;\n};\n\nexport default ReceivedPostViewer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircle, faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport { DisplayType } from '../../../interfaces';\nimport { IPost } from '../../../interfaces';\n\nconst Post: React.FC<IPost> = ({ nickName, content, whatPage, replied, showPost }) => {\n    return (\n        <Box onClick={showPost} >\n            <Icon icon={faEnvelope} />\n            <Column>\n                <FromAccount>보낸 사람 : {nickName}</FromAccount>\n                <MessagePreview> {content}  </MessagePreview>\n                {whatPage === 'sender' &&\n                    <Alert\n                        icon={faCircle}\n                        display={!replied ? 'block' : 'none'}\n                    />\n                }\n                {whatPage === 'recipients' &&\n                    <Alert\n                        icon={faCircle} \n                        display={replied ? 'block' : 'none'}\n                    />\n                }\n            </Column>\n        </Box>\n    );\n};\n\nexport default Post;\n\nconst Box = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 25px;\n    margin-top: 8px;\n    width: 95%;\n    height: 60px;\n    cursor: pointer;\n    border-radius: 40px;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white10};\n    };\n`;\n\nconst Column = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    width: 400px;\n    margin-left: 20px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n`;\n\nconst Icon = styled(FontAwesomeIcon)`\n    font-size: 40px;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nconst FromAccount = styled.div`\n    font-size: 15px;\n    margin-left: 10px;\n    width: 80%;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    color: ${({ theme }) => theme.colors.white};\n`;\n\nconst MessagePreview = styled.div`\n    font-size: 13px;\n    margin-left: 10px;\n    width: 80%;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    color: ${({ theme }) => theme.colors.mainBlue};\n`;\n\nconst Alert = styled(FontAwesomeIcon)<{ display: DisplayType }>`\n    position: absolute;\n    right: 0px;\n    font-size: 15px;\n    display: ${({ display }) => display};\n    color: ${({ theme }) => theme.colors.red};\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport Post from './Post';\nimport { IPostBox } from '../../../interfaces';\n\nconst PostBox: React.FC<IPostBox> = ({ posts, whatPage,showPost }) => {\n    return (\n        <Container>\n            {Array.isArray(posts) && posts.length > 0 ?\n                posts.map((x, i) => (\n                    <Post\n                        nickName={x.nickName}\n                        content={x.content}\n                        key={i}\n                        replied={x.comment === undefined}\n                        showPost={() => showPost(x._id!)}\n                        whatPage={whatPage}\n                    />\n                )) :\n                <Announce>아직 받은 편지가 없어요</Announce>\n            }\n        </Container>\n    );\n};\n\nexport default PostBox;\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    width: 30%;\n    height: 740px;\n    min-height: 740px;\n    max-height: 740px;\n    margin-top: 10px;\n    border-radius: 10px;\n    overflow: auto;\n    background-color: ${({ theme }) => theme.colors.white10};\n`;\n\nconst Announce = styled.div`\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 18px;\n    text-align: center;\n    margin-top: 50px;\n`;","import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport CenterView from '../components/SharedComponents/CenterView';\nimport Container from '../components/SharedComponents/Container';\nimport ReceivedPostViewer from '../components/RecipientsPage/ReceivedPostViewer';\nimport postStore from '../store/postStore';\nimport { observer } from 'mobx-react';\nimport CircleLoader from '../components/SharedComponents/CircleLoader';\nimport PostBox from '../components/SharedComponents/PostComponents/PostList';\n\nconst RecipientsPage: React.FC = observer(() => {\n    const commentInput = useRef<HTMLTextAreaElement>(null);\n\n    useEffect(() => {\n        postStore.getReceivedPosts(); \n    }, []); //eslint-disable-line\n\n    useEffect(() => {\n        return () => {\n            postStore.resetReceivedPosts();\n        }\n    }, []); //eslint-disable-line\n\n    return (\n        <Container>\n            <CenterView>\n                {postStore.isLoading ?\n                    <CircleLoader /> :\n                    <Box>\n                        <PostBox posts={postStore.receivedPosts}\n                            showPost={postStore.handleReceivedOne}\n                            whatPage='recipients'\n                        />                        \n                        <ReceivedPostViewer post={postStore.currentReceivedPost}\n                            commentInput={commentInput}\n                            sendComment={() => postStore.sendComment(commentInput.current?.value)}\n                        />\n                    </Box>   \n                }\n            </CenterView>\n        </Container>\n    );\n});\n\nexport default RecipientsPage;\n\nconst Box = styled.div`\n    min-width: 100%;\n    max-width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { flowResult } from 'mobx';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserAlt, faUserSecret } from '@fortawesome/free-solid-svg-icons';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { zoomIn } from '../../style/keyframes';\nimport { theme } from '../../style/theme';\nimport { usePush } from '../../hook/usePush';\nimport { IFindPW } from '../../interfaces/index';\nimport userStore from '../../store/userStore';\nimport { TextLogo } from '../SharedComponents/TextLogo';\n\nconst FindPWBox: React.FC = observer(() => {\n    const { register, handleSubmit, formState: { errors } } = useForm<IFindPW>();\n    const { push } = usePush('signin');\n\n    const onSubmit: SubmitHandler<IFindPW> = async (data) => {\n        const isSuccess =  await flowResult(userStore.findPW(data));\n        if (isSuccess) push();\n    };\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} >\n            <TextLogo />\n            <Box>\n                <Column>\n                    <Row>\n                        <Icon\n                            icon={faUserAlt}\n                            color={errors.account ? (theme.colors.red) : (theme.colors.white)}\n                        />\n                        <Input\n                            placeholder='아이디'\n                            {...register('account', {\n                                required: '아이디를 입력해주세요',\n                            })}\n                        />\n                    </Row>\n                    {errors.account ? <ErrorMsg> {errors.account.message} </ErrorMsg> : 'ㅤ'}\n                </Column>\n\n                <Column>\n                    <Row>\n                        <Icon\n                            icon={faUserSecret}\n                            color={errors.secretMessage ? (theme.colors.red) : (theme.colors.white)}\n                        />\n                        <Input\n                            placeholder='암호 메세지'\n                            {...register('secretMessage', {\n                                required: '암호 메세지를 작성해주세요',\n                            })}\n                        />\n                    </Row>\n                    {errors.secretMessage && <ErrorMsg> {errors.secretMessage.message} </ErrorMsg>}\n                </Column>\n                <Button\n                    onClick={handleSubmit(onSubmit)}\n                    type='submit'\n                >\n                    비밀번호 찾기\n                </Button>\n            </Box>\n        </form>\n    );\n});\nexport default FindPWBox;\n\nconst Box = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    width: 600px;\n    height: 600px;\n    animation: ${zoomIn} .6s ease;\n    @media only screen and (max-width: 600px) {\n        justify-content: center;\n        height: 450px;\n    };\n`;\n\nconst Column = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 10px;\n`;\n\nconst Row = styled.div`\n    width: 420px;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 30px;\n    padding-bottom: 10px;\n    border-bottom: 1px solid ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 600px) {\n        width: 320px;\n        margin-bottom: 20px;\n    };\n`;\n\nconst Input = styled.input`\n    all: unset;\n    width: 400px;\n    height: 40px;\n    font-size: 21px;\n    padding-left: 20px;\n    color: ${({ theme }) => theme.colors.white};\n    @media only screen and (max-width: 600px) {\n        width: 260px;\n        font-size: 17px;\n    };\n`;\n\nconst Button = styled.button`\n    all: unset;\n    width: 200px;\n    height: 55px;\n    border-radius: 40px;\n    background-color: ${({ theme }) => theme.colors.mainBlue};\n    color: ${({ theme }) => theme.colors.white};\n    font-size: 20px;\n    text-align: center;\n    margin-top: 20px;\n    margin-bottom: 50px;\n    cursor: pointer;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.white};\n        color: ${({ theme }) => theme.colors.mainBlue};\n    };\n    @media only screen and (max-width: 600px) {\n        width: 160px;\n        font-size: 17px;\n    };\n`;\n\nconst Icon = styled(FontAwesomeIcon) <{\n    color: string\n}>`\n    font-size: 35px;\n    color: ${({ color }) => color};\n    @media only screen and (max-width: 600px) {\n        font-size: 25px;\n    };\n`;\n\nconst ErrorMsg = styled.div`\n    font-size: 16px;\n    transform: translateY(-10px);\n    color: ${({ theme }) => theme.colors.red};\n`;","import React from 'react';\nimport Container from '../components/SharedComponents/Container';\nimport FindPWBox from '../components/FindPW/FindPWBox';\n\nconst FindPW: React.FC = () => {\n    return (\n        <Container>\n            <FindPWBox />\n        </Container>\n    );\n};\n\nexport default FindPW;","import React from 'react';\nimport { IView } from '../../interfaces/index';\nimport HaveComment from '../SharedComponents/PostComponents/HaveComment';\nimport NoneComment from '../SharedComponents/PostComponents/NoneComment';\n\nconst SentPostViewer: React.FC<IView>= ({ post }) => {\n    if (post && post.comment) {\n        return (\n            <HaveComment post={post} />\n        );\n    };\n    if (post && !post.comment) {\n        return (\n        <NoneComment\n            post={post}\n            whatPage='sender'    \n        />\n        );\n    };\n    return null;\n};\n\nexport default SentPostViewer;\n\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport CenterView from '../components/SharedComponents/CenterView';\nimport Container from '../components/SharedComponents/Container';\nimport SentPostViewer from '../components/SenderPage/SentPostViewer';\nimport postStore from '../store/postStore';\nimport { observer } from 'mobx-react';\nimport CircleLoader from '../components/SharedComponents/CircleLoader';\nimport PostBox from '../components/SharedComponents/PostComponents/PostList';\n\nconst SenderPage: React.FC = observer(() => {\n\n    useEffect(() => {\n        postStore.getSentPosts();\n    }, []); //eslint-disable-line\n\n    useEffect(() => {\n        return () => {\n            postStore.resetSentPosts();\n        }\n    }, []); //eslint-disable-line\n\n    return (\n        <Container>\n            <CenterView>\n                {postStore.isLoading ?\n                    <CircleLoader /> :\n                    <Box>\n                        <PostBox posts={postStore.sentPosts}\n                            showPost={postStore.handleSentOne}\n                            whatPage='sender'\n                        />\n                        <SentPostViewer post={postStore.currentSentPost} />\n                    </Box>\n                }\n            </CenterView>\n        </Container>\n    );\n});\n\nexport default SenderPage;\n\nconst Box = styled.div`\n    min-width: 100%;\n    max-width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n`;","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { observer } from 'mobx-react';\nimport { ThemeProvider } from 'styled-components';\nimport GlobalStyle from './style/global';\nimport PrivateRoute from './components/SharedComponents/PrivateRoute';\nimport { theme } from './style/theme';\nimport Start from './pages/Start';\nimport Main from './pages/Main';\nimport SignIn from './pages/SignIn';\nimport SignUp from './pages/SignUp';\nimport SideBar from './components/SideBar/SideBar';\nimport Header from './components/Header/Header';\nimport MyPage from './pages/MyPage';\nimport ChatPage from './pages/ChatPage';\nimport PostPage from './pages/PostPage';\nimport RecipientsPage from './pages/RecipientsPage';\nimport FindPW from './pages/FindPW';\nimport SenderPage from './pages/SenderPage';\n\nconst App: React.FC = observer(() => {\n    return (\n        <>\n            <ThemeProvider theme={theme} >\n                <GlobalStyle />\n                <BrowserRouter>\n                    <Header />\n                    <SideBar />\n                    <Switch>\n                        <Route exact path='/'>\n                            <Start />\n                        </Route>\n                        <Route exact path='/signin'>\n                            <SignIn />\n                        </Route>\n                        <Route exact path='/signup'>\n                            <SignUp />\n                        </Route>\n                        <Route exact path='/findpw'>\n                            <FindPW />\n                        </Route>\n                        <PrivateRoute exact path='/main'>\n                            <Main />\n                        </PrivateRoute>\n                        <PrivateRoute exact path='/mypage'>\n                            <MyPage />\n                        </PrivateRoute>\n                        <PrivateRoute exact path='/chat'>\n                            <ChatPage />\n                        </PrivateRoute>\n                        <PrivateRoute exact path='/post'>\n                            <PostPage />\n                        </PrivateRoute>\n                        <PrivateRoute exact path='/recipients' >\n                            <RecipientsPage />\n                        </PrivateRoute>\n                        <PrivateRoute exact path='/sender' >\n                            <SenderPage />\n                        </PrivateRoute>\n                    </Switch>\n                </BrowserRouter>\n            </ThemeProvider>\n        </>\n    );\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}