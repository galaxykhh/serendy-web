{"ast":null,"code":"import { action, computed, makeObservable, observable } from \"mobx\";\nimport serendyRepository from '../repository/serendyRepository';\n\nclass UserStore {\n  constructor() {\n    this._isSignIn = false;\n    this._user = undefined;\n    this._isLogging = false;\n    this._userSocket = null;\n    makeObservable(this, {\n      _isLogging: observable,\n      _isSignIn: observable,\n      _user: observable,\n      _userSocket: observable,\n      isLogging: computed,\n      isSignIn: computed,\n      user: computed,\n      userSocket: computed,\n      setIsSignIn: action.bound,\n      setUser: action,\n      signInWithToken: action.bound,\n      signIn: action.bound,\n      signOut: action.bound,\n      setIsLogging: action.bound,\n      setUserSocket: action.bound\n    });\n  }\n\n  get isSignIn() {\n    return this._isSignIn;\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  get isLogging() {\n    return this._isLogging;\n  }\n\n  get userSocket() {\n    return this._userSocket;\n  }\n\n  setIsSignIn() {\n    this._isSignIn = true;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  setIsLogging(boolean) {\n    this._isLogging = boolean;\n  }\n\n  setUserSocket(data) {\n    this._userSocket = data;\n  } // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n  // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n  // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n\n\n  async signInWithToken() {\n    this.setIsLogging(true);\n\n    try {\n      const token = localStorage.getItem('SerendyToken');\n\n      if (!token) {\n        this.setIsLogging(false);\n        return;\n      } else if (token) {\n        const response = await serendyRepository.signInWidthToken();\n\n        if (response.data.message === 'Invalid Token') {\n          // 토큰만료 또는 없음\n          this.setIsLogging(false);\n          return;\n        } else if (response.data.message === 'SignIn Success') {\n          this.setUser(response.data.nickName);\n          this.setIsSignIn();\n          localStorage.setItem('SerendyToken', response.data.token);\n          this.setIsLogging(false);\n        }\n      }\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n  }\n\n  async signIn(userData, setError, push) {\n    this.setIsLogging(true);\n\n    try {\n      const response = await serendyRepository.signIn(userData);\n\n      if (response.data.message === 'SignIn Fail') {\n        this.setIsLogging(false);\n        setError();\n      } else if (response.data.message === 'SignIn Success') {\n        this.setUser(response.data.nickName);\n        this.setIsSignIn();\n        localStorage.setItem('SerendyToken', response.data.token);\n        this.setIsLogging(false);\n        push();\n      }\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n  }\n\n  signOut(push) {\n    this._isSignIn = false;\n    this._user = undefined;\n    localStorage.removeItem('SerendyToken');\n    push();\n  }\n\n}\n\nconst userStore = new UserStore();\nexport default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","makeObservable","observable","serendyRepository","UserStore","constructor","_isSignIn","_user","undefined","_isLogging","_userSocket","isLogging","isSignIn","user","userSocket","setIsSignIn","bound","setUser","signInWithToken","signIn","signOut","setIsLogging","setUserSocket","boolean","data","token","localStorage","getItem","response","signInWidthToken","message","nickName","setItem","err","alert","userData","setError","push","removeItem","userStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport { ISignInData } from '../components/SignIn/SignInBox';\nimport serendyRepository from '../repository/serendyRepository';\nimport { Socket } from 'socket.io-client';\n\ninterface IUser {\n    nickName: string;\n}\n\ninterface IUserStore {\n    isLogging: boolean;\n    isSignIn: boolean;\n    user: IUser | undefined;\n    userSocket: Socket | null;\n}\n\nclass UserStore implements IUserStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | undefined = undefined;\n    private _isLogging: boolean = false;\n    private _userSocket: Socket | null = null;\n\n    constructor() {\n        makeObservable<UserStore, '_isLogging' | '_isSignIn' | '_user' | '_userSocket'>(this, {\n            _isLogging: observable,\n            _isSignIn: observable,\n            _user: observable,\n            _userSocket: observable,\n            isLogging: computed,\n            isSignIn: computed,\n            user: computed,\n            userSocket: computed,\n            setIsSignIn: action.bound,\n            setUser: action,\n            signInWithToken: action.bound,\n            signIn: action.bound,\n            signOut: action.bound,\n            setIsLogging: action.bound,\n            setUserSocket: action.bound,\n        })\n    }\n\n    get isSignIn(): boolean {\n        return this._isSignIn;\n    }\n\n    get user(): IUser | undefined {\n        return this._user;\n    }\n\n    get isLogging(): boolean {\n        return this._isLogging;\n    }\n\n    get userSocket(): Socket | null {\n        return this._userSocket;\n    }\n\n    setIsSignIn(): void {\n        this._isSignIn = true;\n    }\n\n    setUser(user: IUser): void {\n        this._user = user;\n    }\n\n    setIsLogging(boolean: boolean): void {\n        this._isLogging = boolean;\n    }\n\n    setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    }\n\n    // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n    // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n    // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n    async signInWithToken() {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (!token) {\n                this.setIsLogging(false);\n                return;\n            } else if (token) {\n                const response = await serendyRepository.signInWidthToken();\n                if ((response.data.message === 'Invalid Token')) { // 토큰만료 또는 없음\n                    this.setIsLogging(false);\n                    return;\n                } else if ((response.data.message === 'SignIn Success')) {\n                    this.setUser(response.data.nickName);\n                    this.setIsSignIn();\n                    localStorage.setItem('SerendyToken', response.data.token);\n                    this.setIsLogging(false);\n                }\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다')\n        }\n    }\n\n    async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        this.setIsLogging(true);\n        try {\n            const response = await serendyRepository.signIn(userData);\n            if ((response.data.message === 'SignIn Fail')) {\n                this.setIsLogging(false);\n                setError();\n            } else if ((response.data.message === 'SignIn Success')) {\n                this.setUser(response.data.nickName);\n                this.setIsSignIn();\n                localStorage.setItem('SerendyToken', response.data.token);\n                this.setIsLogging(false);\n                push();\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        }\n    }\n\n    signOut(push: () => void): void {\n        this._isSignIn = false;\n        this._user = undefined;\n        localStorage.removeItem('SerendyToken');\n        push();\n    }\n}\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}