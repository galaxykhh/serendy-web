{"ast":null,"code":"import { action, computed, makeObservable, observable } from \"mobx\";\nimport serendyRepository from '../repository/serendyRepository';\n\nclass UserStore {\n  constructor() {\n    this._isSignIn = false;\n    this._user = null;\n    this._isLogging = false;\n    this._userSocket = null;\n    this._socketID = null;\n    makeObservable(this, {\n      _isLogging: observable,\n      _isSignIn: observable,\n      _user: observable,\n      _userSocket: observable,\n      _socketID: observable,\n      isLogging: computed,\n      isSignIn: computed,\n      user: computed,\n      userSocket: computed,\n      socketID: computed,\n      setIsSignIn: action.bound,\n      setUser: action,\n      signInWithToken: action.bound,\n      signIn: action.bound,\n      signOut: action.bound,\n      setIsLogging: action.bound,\n      setUserSocket: action.bound\n    });\n  }\n\n  get isSignIn() {\n    return this._isSignIn;\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  get isLogging() {\n    return this._isLogging;\n  }\n\n  get userSocket() {\n    return this._userSocket;\n  }\n\n  get socketID() {\n    return this._socketID;\n  }\n\n  setIsSignIn() {\n    this._isSignIn = true;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  setIsLogging(boolean) {\n    this._isLogging = boolean;\n  }\n\n  setUserSocket(data) {\n    this._userSocket = data;\n  }\n\n  setSocketID(data) {\n    this._socketID = data;\n  } // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n  // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n  // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n\n\n  async signInWithToken() {\n    this.setIsLogging(true);\n\n    try {\n      const token = localStorage.getItem('SerendyToken');\n\n      if (!token) {\n        this.setIsLogging(false);\n        return;\n      } else if (token) {\n        const response = await serendyRepository.signInWidthToken();\n\n        if (response.data.message === 'Invalid Token') {\n          // 토큰만료 또는 없음\n          this.setIsLogging(false);\n          return;\n        } else if (response.data.message === 'SignIn Success') {\n          this.setUser(response.data.nickName);\n          this.setIsSignIn();\n          localStorage.setItem('SerendyToken', response.data.token);\n          this.setIsLogging(false);\n        }\n      }\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n  }\n\n  async signIn(userData, setError, push) {\n    this.setIsLogging(true);\n\n    try {\n      const response = await serendyRepository.signIn(userData);\n\n      if (response.data.message === 'SignIn Fail') {\n        this.setIsLogging(false);\n        setError();\n      } else if (response.data.message === 'SignIn Success') {\n        this.setUser(response.data.nickName);\n        this.setIsSignIn();\n        localStorage.setItem('SerendyToken', response.data.token);\n        this.setIsLogging(false);\n        push();\n      }\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n  }\n\n  signOut(push) {\n    this._isSignIn = false;\n    this._user = null;\n    localStorage.removeItem('SerendyToken');\n    push();\n  }\n\n}\n\nconst userStore = new UserStore();\nexport default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","makeObservable","observable","serendyRepository","UserStore","constructor","_isSignIn","_user","_isLogging","_userSocket","_socketID","isLogging","isSignIn","user","userSocket","socketID","setIsSignIn","bound","setUser","signInWithToken","signIn","signOut","setIsLogging","setUserSocket","boolean","data","setSocketID","token","localStorage","getItem","response","signInWidthToken","message","nickName","setItem","err","alert","userData","setError","push","removeItem","userStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport { ISignInData } from '../components/SignIn/SignInBox';\nimport serendyRepository from '../repository/serendyRepository';\nimport { Socket } from 'socket.io-client';\n\ninterface IUser {\n    nickName: string;\n}\n\ninterface IUserStore {\n    isLogging: boolean;\n    isSignIn: boolean;\n    user: IUser | null;\n    userSocket: Socket | null;\n    socketID: string | null;\n}\n\nclass UserStore implements IUserStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | null = null;\n    private _isLogging: boolean = false;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n\n    constructor() {\n        makeObservable<UserStore, '_isLogging' | '_isSignIn' | '_user' | '_userSocket' | '_socketID'>(this, {\n            _isLogging: observable,\n            _isSignIn: observable,\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: computed,\n            isSignIn: computed,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setIsSignIn: action.bound,\n            setUser: action,\n            signInWithToken: action.bound,\n            signIn: action.bound,\n            signOut: action.bound,\n            setIsLogging: action.bound,\n            setUserSocket: action.bound,\n        })\n    }\n\n    public get isSignIn(): boolean {\n        return this._isSignIn;\n    }\n\n    public get user(): IUser | null {\n        return this._user;\n    }\n\n    public get isLogging(): boolean {\n        return this._isLogging;\n    }\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    }\n\n    public get socketID(): string | null {\n        return this._socketID;\n    }\n\n    public setIsSignIn(): void {\n        this._isSignIn = true;\n    }\n\n    public setUser(user: IUser): void {\n        this._user = user;\n    }\n\n    public setIsLogging(boolean: boolean): void {\n        this._isLogging = boolean;\n    }\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    }\n\n    public setSocketID(data: string | null): void {\n        this._socketID = data;\n    }\n\n    // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n    // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n    // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n    async signInWithToken() {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (!token) {\n                this.setIsLogging(false);\n                return;\n            } else if (token) {\n                const response = await serendyRepository.signInWidthToken();\n                if ((response.data.message === 'Invalid Token')) { // 토큰만료 또는 없음\n                    this.setIsLogging(false);\n                    return;\n                } else if ((response.data.message === 'SignIn Success')) {\n                    this.setUser(response.data.nickName);\n                    this.setIsSignIn();\n                    localStorage.setItem('SerendyToken', response.data.token);\n                    this.setIsLogging(false);\n                }\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다')\n        }\n    }\n\n    async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        this.setIsLogging(true);\n        try {\n            const response = await serendyRepository.signIn(userData);\n            if ((response.data.message === 'SignIn Fail')) {\n                this.setIsLogging(false);\n                setError();\n            } else if ((response.data.message === 'SignIn Success')) {\n                this.setUser(response.data.nickName);\n                this.setIsSignIn();\n                localStorage.setItem('SerendyToken', response.data.token);\n                this.setIsLogging(false);\n                push();\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        }\n    }\n\n    signOut(push: () => void): void {\n        this._isSignIn = false;\n        this._user = null;\n        localStorage.removeItem('SerendyToken');\n        push();\n    }\n}\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}