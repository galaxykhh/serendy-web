{"ast":null,"code":"import { action, makeObservable, observable, runInAction } from \"mobx\";\nimport userStore from \"./userStore\";\n\nclass ChatStore {\n  constructor() {\n    this.isSearching = false;\n    this.isMatched = false;\n    this.isFinished = false;\n    this.visible = 'hidden';\n    this.chatLog = [];\n    this.recentChat = {\n      nickName: '',\n      message: '',\n      socketID: ''\n    };\n    makeObservable(this, {\n      isSearching: observable,\n      isMatched: observable,\n      isFinished: observable,\n      visible: observable,\n      chatLog: observable,\n      recentChat: observable,\n      setIsSearching: action,\n      setIsMatched: action,\n      setIsFinished: action,\n      resetRecentChat: action,\n      handleCancel: action,\n      handleFind: action,\n      handleSearch: action.bound,\n      handleMatched: action,\n      handleReceiveMsg: action,\n      handlePushChat: action,\n      handleFinished: action,\n      stopChat: action,\n      chatStopped: action,\n      reset: action\n    });\n  }\n\n  setIsSearching(boolean) {\n    this.isSearching = boolean;\n  }\n\n  setIsMatched(boolean) {\n    this.isMatched = boolean;\n  }\n\n  setIsFinished(boolean) {\n    this.isFinished = boolean;\n  }\n\n  setVisible(status) {\n    this.visible = status;\n  }\n\n  resetRecentChat() {\n    this.recentChat = {\n      nickName: '',\n      message: '',\n      socketID: ''\n    };\n  }\n\n  handleCancel() {\n    var _userStore$userSocket;\n\n    (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.emit('cancel');\n  }\n\n  handleFind() {\n    var _userStore$userSocket2;\n\n    (_userStore$userSocket2 = userStore.userSocket) === null || _userStore$userSocket2 === void 0 ? void 0 : _userStore$userSocket2.emit('find');\n  }\n\n  handleSearch() {\n    if (!this.isSearching) {\n      this.setIsSearching(true);\n      this.handleFind();\n    } else {\n      this.setIsSearching(false);\n      this.handleCancel();\n    }\n\n    ;\n  }\n\n  handleMatched() {\n    var _userStore$userSocket3;\n\n    (_userStore$userSocket3 = userStore.userSocket) === null || _userStore$userSocket3 === void 0 ? void 0 : _userStore$userSocket3.on('matched', () => {\n      runInAction(() => {\n        this.setIsMatched(true);\n        this.setVisible('visible');\n        this.chatLog = [{\n          nickName: 'SERENDY',\n          message: '상대와 대화가 시작되었어요!',\n          socketID: 'admin'\n        }];\n      });\n    });\n  }\n\n  handleReceiveMsg() {\n    var _userStore$userSocket4;\n\n    (_userStore$userSocket4 = userStore.userSocket) === null || _userStore$userSocket4 === void 0 ? void 0 : _userStore$userSocket4.on('receive', (data, socketID) => {\n      this.recentChat = {\n        nickName: data.nickName,\n        message: data.message,\n        socketID: socketID\n      };\n    });\n  }\n\n  handlePushChat() {\n    if (this.recentChat.message.length > 0) {\n      this.chatLog = [...this.chatLog, this.recentChat];\n    }\n\n    ;\n  }\n\n  handleFinished() {\n    this.setIsFinished(true);\n  }\n\n  stopChat() {\n    var _userStore$userSocket5;\n\n    (_userStore$userSocket5 = userStore.userSocket) === null || _userStore$userSocket5 === void 0 ? void 0 : _userStore$userSocket5.emit('stop chat');\n    this.handleFinished();\n  }\n\n  chatStopped() {\n    var _userStore$userSocket6;\n\n    (_userStore$userSocket6 = userStore.userSocket) === null || _userStore$userSocket6 === void 0 ? void 0 : _userStore$userSocket6.on('is ended', () => {\n      this.handleFinished();\n    });\n  }\n\n  reset() {\n    this.chatLog = [];\n    this.setIsSearching(false);\n    this.setIsFinished(false);\n    this.setIsMatched(false);\n  }\n\n}\n\n;\nconst chatStore = new ChatStore();\nexport default chatStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/chatStore.ts"],"names":["action","makeObservable","observable","runInAction","userStore","ChatStore","constructor","isSearching","isMatched","isFinished","visible","chatLog","recentChat","nickName","message","socketID","setIsSearching","setIsMatched","setIsFinished","resetRecentChat","handleCancel","handleFind","handleSearch","bound","handleMatched","handleReceiveMsg","handlePushChat","handleFinished","stopChat","chatStopped","reset","boolean","setVisible","status","userSocket","emit","on","data","length","chatStore"],"mappings":"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","sourcesContent":["import { action, makeObservable, observable, runInAction } from \"mobx\";\nimport { VisibilityType, IRecentChat } from '../interfaces/index';\nimport userStore from \"./userStore\";\n\nclass ChatStore {\n    public isSearching: boolean = false;\n    public isMatched: boolean = false;\n    public isFinished: boolean = false;\n    public visible: VisibilityType = 'hidden';\n    public chatLog: IRecentChat[] = [];\n    public recentChat: IRecentChat = { nickName: '', message: '', socketID: '' };\n\n    constructor() {\n        makeObservable(this, {\n            isSearching: observable,\n            isMatched: observable,\n            isFinished: observable,\n            visible: observable,\n            chatLog: observable,\n            recentChat: observable,\n            setIsSearching: action,\n            setIsMatched: action,\n            setIsFinished: action,\n            resetRecentChat: action,\n            handleCancel: action,\n            handleFind: action,\n            handleSearch: action.bound,\n            handleMatched: action,\n            handleReceiveMsg: action,\n            handlePushChat: action,\n            handleFinished: action,\n            stopChat: action,\n            chatStopped: action,\n            reset: action,\n        });\n    };\n\n    public setIsSearching(boolean: boolean): void {\n        this.isSearching = boolean;\n    };\n\n    public setIsMatched(boolean: boolean): void {\n        this.isMatched = boolean;\n    };\n\n    public setIsFinished(boolean: boolean): void {\n        this.isFinished = boolean;\n    };\n\n    public setVisible(status: VisibilityType): void {\n        this.visible = status;\n    }\n\n    public resetRecentChat(): void {\n        this.recentChat = { nickName: '', message: '', socketID: '' };\n    };\n\n    public handleCancel(): void {\n        userStore.userSocket?.emit('cancel');\n    };\n\n    public handleFind(): void {\n        userStore.userSocket?.emit('find');\n    };\n\n    public handleSearch(): void {\n        if (!this.isSearching) {\n            this.setIsSearching(true);\n            this.handleFind();\n        } else {\n            this.setIsSearching(false);\n            this.handleCancel();\n        };\n    };\n\n    public handleMatched(): void {\n        userStore.userSocket?.on('matched', () => {\n            runInAction(() => {\n                this.setIsMatched(true);\n                this.setVisible('visible');\n                this.chatLog = [{\n                nickName: 'SERENDY',\n                message: '상대와 대화가 시작되었어요!',\n                socketID: 'admin',\n                }];\n            })\n        });\n    };\n\n    public handleReceiveMsg(): void {\n        userStore.userSocket?.on('receive', (data, socketID) => {\n            this.recentChat = {\n                nickName: data.nickName,\n                message: data.message,\n                socketID: socketID\n            };\n        });\n    };\n\n    public handlePushChat(): void {\n        if (this.recentChat.message.length > 0) {\n            this.chatLog = [...this.chatLog, this.recentChat];\n        };\n    };\n\n    public handleFinished(): void {\n        this.setIsFinished(true);\n    };\n\n    public stopChat(): void {\n        userStore.userSocket?.emit('stop chat');\n        this.handleFinished();\n    };\n\n    public chatStopped(): void {\n        userStore.userSocket?.on('is ended', () => {\n            this.handleFinished();\n        });\n    };\n\n    public reset(): void {\n        this.chatLog = [];\n        this.setIsSearching(false);\n        this.setIsFinished(false);\n        this.setIsMatched(false);\n    };\n};\n\nconst chatStore = new ChatStore();\nexport default chatStore;"]},"metadata":{},"sourceType":"module"}