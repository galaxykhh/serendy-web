{"ast":null,"code":"var _jsxFileName = \"/Users/hyeonghan/VSCode/React/Serendy/client/src/pages/ChatPage.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport ChatWindow from '../components/ChatPage/ChatWindow';\nimport CenterView from '../components/publicComponents/CenterView';\nimport Container from '../components/publicComponents/Container';\nimport userStore from '../store/userStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatPage = () => {\n  _s();\n\n  // 소켓에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n  // 해결방법을 찾다가 스테이트를 두개로 나눠서 동작하기로 했다.\n  const [chatLog, setChatLog] = useState([]); // 메세지 내역을 담아두는 배열\n\n  const [recentChat, setRecentChat] = useState({\n    data: {\n      nickName: '',\n      message: ''\n    }\n  }); // 서버에서 갱신된 메세지를 담는 state\n\n  useEffect(() => {\n    console.log(recentChat);\n  }, [recentChat]); // eslint-disable/line\n\n  useEffect(() => {\n    var _userStore$userSocket;\n\n    (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.on('receive', data => {\n      setRecentChat({\n        data: {\n          nickName: data.nickName,\n          message: data.message\n        }\n      });\n    });\n  }, []); // eslint-disable/line\n\n  useEffect(() => {\n    recentChat.data.message.length > 0 && setChatLog([...chatLog, recentChat]);\n    setRecentChat({\n      data: {\n        nickName: '',\n        message: ''\n      }\n    });\n  }, []); // eslint-disable/line\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(CenterView, {\n      children: /*#__PURE__*/_jsxDEV(ChatWindow, {\n        chatlog: chatLog\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatPage, \"Q1K8rZmsCr0RlxuVv3Baw2W9Ed0=\");\n\n_c = ChatPage;\nexport default ChatPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/pages/ChatPage.tsx"],"names":["React","useState","useEffect","ChatWindow","CenterView","Container","userStore","ChatPage","chatLog","setChatLog","recentChat","setRecentChat","data","nickName","message","console","log","userSocket","on","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA4C,OAA5C;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,UAAP,MAAuB,2CAAvB;AACA,OAAOC,SAAP,MAAsB,0CAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;;AASA,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AAC7B;AACA;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAgB,EAAhB,CAAtC,CAH6B,CAG8B;;AAC3D,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAc;AAAEW,IAAAA,IAAI,EAAE;AAAEC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,OAAO,EAAE;AAAzB;AAAR,GAAd,CAA5C,CAJ6B,CAIsE;;AAEnGZ,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AACH,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT,CAN6B,CAQZ;;AAEjBR,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACZ,6BAAAI,SAAS,CAACW,UAAV,gFAAsBC,EAAtB,CAAyB,SAAzB,EAAoCN,IAAI,IAAI;AACxCD,MAAAA,aAAa,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAClBC,UAAAA,QAAQ,EAAED,IAAI,CAACC,QADG;AAElBC,UAAAA,OAAO,EAAEF,IAAI,CAACE;AAFI;AAAR,OAAD,CAAb;AAIH,KALD;AAMH,GAPQ,EAON,EAPM,CAAT,CAV6B,CAiBrB;;AAERZ,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,UAAU,CAACE,IAAX,CAAgBE,OAAhB,CAAwBK,MAAxB,GAAiC,CAAjC,IAAsCV,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaE,UAAb,CAAD,CAAhD;AACAC,IAAAA,aAAa,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,OAAO,EAAE;AAAzB;AAAR,KAAD,CAAb;AACH,GAHQ,EAGN,EAHM,CAAT,CAnB6B,CAsBrB;;AAER,sBACI,QAAC,SAAD;AAAA,2BACI,QAAC,UAAD;AAAA,6BACI,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEN;AAArB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA/BD;;GAAMD,Q;;KAAAA,Q;AAiCN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect }  from 'react'\nimport ChatWindow from '../components/ChatPage/ChatWindow';\nimport CenterView from '../components/publicComponents/CenterView'\nimport Container from '../components/publicComponents/Container'\nimport userStore from '../store/userStore';\n\nexport interface IRecentChat {\n    data: {\n        nickName: string;\n        message: string;\n    }\n}\n\nconst ChatPage: React.FC = () => {\n    // 소켓에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n    // 해결방법을 찾다가 스테이트를 두개로 나눠서 동작하기로 했다.\n    const [chatLog, setChatLog] = useState<IRecentChat[]>([]); // 메세지 내역을 담아두는 배열\n    const [recentChat, setRecentChat] = useState<IRecentChat>({ data: { nickName: '', message: '' }}); // 서버에서 갱신된 메세지를 담는 state\n\n    useEffect(() => {\n        console.log(recentChat);\n    }, [recentChat]);// eslint-disable/line\n\n    useEffect(() => {\n        userStore.userSocket?.on('receive', data => {\n            setRecentChat({ data: { \n                nickName: data.nickName,\n                message: data.message,\n            }});\n        })\n    }, []); // eslint-disable/line\n\n    useEffect(() => {\n        recentChat.data.message.length > 0 && setChatLog([...chatLog, recentChat]);\n        setRecentChat({ data: { nickName: '', message: '', }});\n    }, []); // eslint-disable/line\n\n    return (\n        <Container>\n            <CenterView>\n                <ChatWindow chatlog={chatLog} />\n            </CenterView>\n        </Container>\n    );\n};\n\nexport default ChatPage;\n"]},"metadata":{},"sourceType":"module"}