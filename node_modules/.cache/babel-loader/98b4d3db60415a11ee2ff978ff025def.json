{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport userStore from '../store/userStore';\nimport postRepository from '../repository/postRepository';\nexport const usePost = () => {\n  _s();\n\n  const [isSent, setIsSent] = useState(false);\n  const textArea = useRef(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sentPosts, setSentPosts] = useState([]);\n  const [receivedPosts, setReceivedPosts] = useState([]);\n  const [currentPost, setCurrentPost] = useState();\n\n  const handlePost = async () => {\n    try {\n      var _userStore$user, _userStore$user2, _textArea$current;\n\n      const data = {\n        account: (_userStore$user = userStore.user) === null || _userStore$user === void 0 ? void 0 : _userStore$user.account,\n        nickName: (_userStore$user2 = userStore.user) === null || _userStore$user2 === void 0 ? void 0 : _userStore$user2.nickName,\n        content: (_textArea$current = textArea.current) === null || _textArea$current === void 0 ? void 0 : _textArea$current.value\n      };\n      const response = await postRepository.sendPost(data);\n\n      if (response.data.message === 'Send Success') {\n        setIsSent(true);\n      }\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  };\n\n  const getSentPosts = async () => {\n    try {\n      var _userStore$user3;\n\n      const response = await postRepository.getSentPosts((_userStore$user3 = userStore.user) === null || _userStore$user3 === void 0 ? void 0 : _userStore$user3.account);\n      const data = response.data;\n      setSentPosts(data);\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n  };\n\n  const getReceivedPosts = async () => {\n    try {\n      var _userStore$user4;\n\n      const response = await postRepository.getReceivePosts((_userStore$user4 = userStore.user) === null || _userStore$user4 === void 0 ? void 0 : _userStore$user4.account);\n      const posts = response.data;\n      setReceivedPosts(posts);\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n  };\n\n  const showSentOne = _id => {\n    const post = sentPosts.find(x => x._id === _id);\n    setCurrentPost(post);\n    console.log(post);\n  };\n\n  const showReceivedOne = _id => {\n    const post = receivedPosts.find(x => x._id === _id);\n    setCurrentPost(post);\n    console.log(post);\n  };\n\n  return {\n    isSent,\n    textArea,\n    sentPosts,\n    receivedPosts,\n    currentPost,\n    setIsSent,\n    handlePost,\n    getSentPosts,\n    getReceivedPosts,\n    showSentOne,\n    showReceivedOne\n  };\n};\n\n_s(usePost, \"BvNImHuIJVfDU2O4h/49qMMrnks=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/usePost.ts"],"names":["useRef","useState","userStore","postRepository","usePost","isSent","setIsSent","textArea","isLoading","setIsLoading","sentPosts","setSentPosts","receivedPosts","setReceivedPosts","currentPost","setCurrentPost","handlePost","data","account","user","nickName","content","current","value","response","sendPost","message","err","alert","getSentPosts","console","log","getReceivedPosts","getReceivePosts","posts","showSentOne","_id","post","find","x","showReceivedOne"],"mappings":";;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAkBA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAU,KAAV,CAApC;AACA,QAAMM,QAAQ,GAAGP,MAAM,CAAsB,IAAtB,CAAvB;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAQ,EAAR,CAA1C;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAQ,EAAR,CAAlD;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,EAA9C;;AAEA,QAAMe,UAAU,GAAG,YAA2B;AAC1C,QAAI;AAAA;;AACA,YAAMC,IAAI,GAAG;AACTC,QAAAA,OAAO,qBAAEhB,SAAS,CAACiB,IAAZ,oDAAE,gBAAgBD,OADhB;AAETE,QAAAA,QAAQ,sBAAElB,SAAS,CAACiB,IAAZ,qDAAE,iBAAgBC,QAFjB;AAGTC,QAAAA,OAAO,uBAAEd,QAAQ,CAACe,OAAX,sDAAE,kBAAkBC;AAHlB,OAAb;AAKA,YAAMC,QAAQ,GAAG,MAAMrB,cAAc,CAACsB,QAAf,CAAwBR,IAAxB,CAAvB;;AACA,UAAKO,QAAQ,CAACP,IAAT,CAAcS,OAAd,KAA0B,cAA/B,EAAgD;AAC5CpB,QAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AACJ,KAVD,CAUE,OAAMqB,GAAN,EAAW;AACTC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACH;;AAAA;AACJ,GAdD;;AAgBA,QAAMC,YAAY,GAAG,YAA2B;AAC5C,QAAI;AAAA;;AACA,YAAML,QAAQ,GAAG,MAAMrB,cAAc,CAAC0B,YAAf,qBAA4B3B,SAAS,CAACiB,IAAtC,qDAA4B,iBAAgBD,OAA5C,CAAvB;AACA,YAAMD,IAAI,GAAGO,QAAQ,CAACP,IAAtB;AACAN,MAAAA,YAAY,CAACM,IAAD,CAAZ;AACH,KAJD,CAIE,OAAMU,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA;AACH;AACJ,GATD;;AAWA,QAAMK,gBAAgB,GAAG,YAA2B;AAChD,QAAI;AAAA;;AACA,YAAMR,QAAQ,GAAG,MAAMrB,cAAc,CAAC8B,eAAf,qBAA+B/B,SAAS,CAACiB,IAAzC,qDAA+B,iBAAgBD,OAA/C,CAAvB;AACA,YAAMgB,KAAK,GAAGV,QAAQ,CAACP,IAAvB;AACAJ,MAAAA,gBAAgB,CAACqB,KAAD,CAAhB;AACH,KAJD,CAIE,OAAMP,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA;AACH;AACJ,GATD;;AAWA,QAAMQ,WAAW,GAAIC,GAAD,IAAuB;AACvC,UAAMC,IAAI,GAAG3B,SAAS,CAAC4B,IAAV,CAAeC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUA,GAA9B,CAAb;AACArB,IAAAA,cAAc,CAACsB,IAAD,CAAd;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACH,GAJD;;AAMA,QAAMG,eAAe,GAAIJ,GAAD,IAAuB;AAC3C,UAAMC,IAAI,GAAGzB,aAAa,CAAC0B,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUA,GAAlC,CAAb;AACArB,IAAAA,cAAc,CAACsB,IAAD,CAAd;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACH,GAJD;;AAMA,SAAO;AACHhC,IAAAA,MADG;AAEHE,IAAAA,QAFG;AAGHG,IAAAA,SAHG;AAIHE,IAAAA,aAJG;AAKHE,IAAAA,WALG;AAMHR,IAAAA,SANG;AAOHU,IAAAA,UAPG;AAQHa,IAAAA,YARG;AASHG,IAAAA,gBATG;AAUHG,IAAAA,WAVG;AAWHK,IAAAA;AAXG,GAAP;AAaH,CAvEM;;GAAMpC,O","sourcesContent":["\nimport { useRef, useState } from 'react'\nimport userStore from '../store/userStore';\nimport postRepository from '../repository/postRepository';\nimport { IComment } from '../components/SenderPage/View';\n\nexport interface ISendPost {\n    account: string | null | undefined;\n    nickName: string | null | undefined;\n    content: string | undefined;\n}\n\nexport interface ICurrentPost {\n    _id: string;\n    toAccount: string;\n    nickName: string;\n    fromAccount: string;\n    content: string;\n    comment: IComment | undefined;\n}\n\nexport const usePost = () => {\n    const [isSent, setIsSent] = useState<boolean>(false);\n    const textArea = useRef<HTMLTextAreaElement>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [sentPosts, setSentPosts] = useState<any[]>([]);\n    const [receivedPosts, setReceivedPosts] = useState<any[]>([]);\n    const [currentPost, setCurrentPost] = useState<ICurrentPost>();\n\n    const handlePost = async (): Promise<void> => {\n        try {\n            const data = {\n                account: userStore.user?.account,\n                nickName: userStore.user?.nickName,\n                content: textArea.current?.value,\n            }\n            const response = await postRepository.sendPost(data);\n            if ((response.data.message === 'Send Success')) {\n                setIsSent(true);\n            }\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    const getSentPosts = async (): Promise<void> => {\n        try {\n            const response = await postRepository.getSentPosts(userStore.user?.account);\n            const data = response.data;\n            setSentPosts(data);\n        } catch(err) {\n            console.log(err);\n            return;\n        }\n    }\n\n    const getReceivedPosts = async (): Promise<void> => {\n        try {\n            const response = await postRepository.getReceivePosts(userStore.user?.account);\n            const posts = response.data;\n            setReceivedPosts(posts);\n        } catch(err) {\n            console.log(err);\n            return;\n        }\n    }\n\n    const showSentOne = (_id: string): void => {\n        const post = sentPosts.find(x => x._id === _id);\n        setCurrentPost(post);\n        console.log(post);\n    }\n\n    const showReceivedOne = (_id: string): void => {\n        const post = receivedPosts.find(x => x._id === _id);\n        setCurrentPost(post);\n        console.log(post);\n    }\n\n    return {\n        isSent,\n        textArea,\n        sentPosts,\n        receivedPosts,\n        currentPost,\n        setIsSent,\n        handlePost,\n        getSentPosts,\n        getReceivedPosts,\n        showSentOne,\n        showReceivedOne,\n    }\n}"]},"metadata":{},"sourceType":"module"}