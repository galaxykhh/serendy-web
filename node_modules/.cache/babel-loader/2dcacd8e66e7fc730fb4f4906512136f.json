{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport userStore from '../store/userStore';\nimport postRepository from '../repository/postRepository';\nexport const usePost = () => {\n  _s();\n\n  const postArea = useRef(null);\n  const commentArea = useRef(null);\n  const [isSent, setIsSent] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sentPosts, setSentPosts] = useState([]);\n  const [receivedPosts, setReceivedPosts] = useState([]);\n  const [currentReceivedPost, setCurrentReceivedPost] = useState();\n  const [currentSentPost, setCurrentSentPost] = useState();\n\n  const handleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  const handlePost = async () => {\n    try {\n      var _postArea$current, _userStore$user, _userStore$user2, _postArea$current2;\n\n      if (((_postArea$current = postArea.current) === null || _postArea$current === void 0 ? void 0 : _postArea$current.value) === '') {\n        return;\n      }\n\n      ;\n      const data = {\n        account: (_userStore$user = userStore.user) === null || _userStore$user === void 0 ? void 0 : _userStore$user.account,\n        nickName: (_userStore$user2 = userStore.user) === null || _userStore$user2 === void 0 ? void 0 : _userStore$user2.nickName,\n        content: (_postArea$current2 = postArea.current) === null || _postArea$current2 === void 0 ? void 0 : _postArea$current2.value\n      };\n      const response = await postRepository.sendPost(data);\n\n      if (response.data.message === 'Send Success') {\n        setIsSent(true);\n      }\n\n      ;\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  };\n\n  const getSentPosts = async () => {\n    setIsLoading(true);\n\n    try {\n      var _userStore$user3;\n\n      const response = await postRepository.getSentPosts((_userStore$user3 = userStore.user) === null || _userStore$user3 === void 0 ? void 0 : _userStore$user3.account);\n      const data = response.data;\n      setSentPosts(data);\n      setIsLoading(false);\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n\n    ;\n  };\n\n  const getReceivedPosts = async () => {\n    setIsLoading(true);\n\n    try {\n      var _userStore$user4;\n\n      const response = await postRepository.getReceivePosts((_userStore$user4 = userStore.user) === null || _userStore$user4 === void 0 ? void 0 : _userStore$user4.account);\n      const posts = response.data;\n      setReceivedPosts(posts);\n      setIsLoading(false);\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n\n    ;\n  };\n\n  const handleSentOne = _id => {\n    const post = sentPosts.findIndex(x => x._id === _id);\n    setCurrentSentPost(sentPosts[post]);\n  };\n\n  const handleReceivedOne = _id => {\n    const post = receivedPosts.findIndex(x => x._id === _id);\n    setCurrentReceivedPost(receivedPosts[post]);\n  };\n\n  const sendComment = async () => {\n    try {\n      var _userStore$user5, _commentArea$current, _commentArea$current2;\n\n      const data = {\n        _id: currentReceivedPost === null || currentReceivedPost === void 0 ? void 0 : currentReceivedPost._id,\n        toAccount: currentReceivedPost === null || currentReceivedPost === void 0 ? void 0 : currentReceivedPost.toAccount,\n        nickName: (_userStore$user5 = userStore.user) === null || _userStore$user5 === void 0 ? void 0 : _userStore$user5.nickName,\n        content: (_commentArea$current = commentArea.current) === null || _commentArea$current === void 0 ? void 0 : _commentArea$current.value\n      };\n\n      if (((_commentArea$current2 = commentArea.current) === null || _commentArea$current2 === void 0 ? void 0 : _commentArea$current2.value) === '') {\n        return;\n      }\n\n      ;\n      const response = await postRepository.sendComment(data);\n\n      if (response.data.message === 'Success') {\n        const posts = response.data.posts;\n        const post = response.data.post;\n        setReceivedPosts(posts);\n        setCurrentReceivedPost(post);\n      }\n\n      ;\n    } catch (err) {\n      console.log(err);\n      alert('서버 점검중입니다');\n    }\n\n    ;\n  };\n\n  return {\n    isLoading,\n    isSent,\n    postArea,\n    commentArea,\n    sentPosts,\n    receivedPosts,\n    currentReceivedPost,\n    currentSentPost,\n    handleLoading,\n    setIsSent,\n    handlePost,\n    getSentPosts,\n    getReceivedPosts,\n    handleSentOne,\n    handleReceivedOne,\n    sendComment\n  };\n};\n\n_s(usePost, \"rG3uhRAvGY4CaY7AqkCmPsSSvSs=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/pushHistory/usePost.ts"],"names":["useRef","useState","userStore","postRepository","usePost","postArea","commentArea","isSent","setIsSent","isLoading","setIsLoading","sentPosts","setSentPosts","receivedPosts","setReceivedPosts","currentReceivedPost","setCurrentReceivedPost","currentSentPost","setCurrentSentPost","handleLoading","handlePost","current","value","data","account","user","nickName","content","response","sendPost","message","err","alert","getSentPosts","console","log","getReceivedPosts","getReceivePosts","posts","handleSentOne","_id","post","findIndex","x","handleReceivedOne","sendComment","toAccount"],"mappings":";;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAGA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAMC,QAAQ,GAAGL,MAAM,CAAsB,IAAtB,CAAvB;AACA,QAAMM,WAAW,GAAGN,MAAM,CAAsB,IAAtB,CAA1B;AAEA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAU,KAAV,CAApC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAiB,EAAjB,CAA1C;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAiB,EAAjB,CAAlD;AACA,QAAM,CAACc,mBAAD,EAAsBC,sBAAtB,IAAgDf,QAAQ,EAA9D;AACA,QAAM,CAACgB,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,EAAtD;;AAEA,QAAMkB,aAAa,GAAG,MAAY;AAC9BT,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH,GAFD;;AAIA,QAAMW,UAAU,GAAG,YAA2B;AAC1C,QAAI;AAAA;;AACA,UAAI,sBAAAf,QAAQ,CAACgB,OAAT,wEAAkBC,KAAlB,MAA4B,EAAhC,EAAqC;AACjC;AACH;;AAAA;AACD,YAAMC,IAAI,GAAG;AACTC,QAAAA,OAAO,qBAAEtB,SAAS,CAACuB,IAAZ,oDAAE,gBAAgBD,OADhB;AAETE,QAAAA,QAAQ,sBAAExB,SAAS,CAACuB,IAAZ,qDAAE,iBAAgBC,QAFjB;AAGTC,QAAAA,OAAO,wBAAEtB,QAAQ,CAACgB,OAAX,uDAAE,mBAAkBC;AAHlB,OAAb;AAKA,YAAMM,QAAQ,GAAG,MAAMzB,cAAc,CAAC0B,QAAf,CAAwBN,IAAxB,CAAvB;;AACA,UAAKK,QAAQ,CAACL,IAAT,CAAcO,OAAd,KAA0B,cAA/B,EAAgD;AAC5CtB,QAAAA,SAAS,CAAC,IAAD,CAAT;AACH;;AAAA;AACJ,KAbD,CAaE,OAAMuB,GAAN,EAAW;AACTC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACH;;AAAA;AACJ,GAjBD;;AAmBA,QAAMC,YAAY,GAAG,YAA2B;AAC5CvB,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AAAA;;AACA,YAAMkB,QAAQ,GAAG,MAAMzB,cAAc,CAAC8B,YAAf,qBAA4B/B,SAAS,CAACuB,IAAtC,qDAA4B,iBAAgBD,OAA5C,CAAvB;AACA,YAAMD,IAAI,GAAGK,QAAQ,CAACL,IAAtB;AACAX,MAAAA,YAAY,CAACW,IAAD,CAAZ;AACAb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KALD,CAKE,OAAMqB,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA;AACH;;AAAA;AACJ,GAXD;;AAaA,QAAMK,gBAAgB,GAAG,YAA2B;AAChD1B,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAI;AAAA;;AACA,YAAMkB,QAAQ,GAAG,MAAMzB,cAAc,CAACkC,eAAf,qBAA+BnC,SAAS,CAACuB,IAAzC,qDAA+B,iBAAgBD,OAA/C,CAAvB;AACA,YAAMc,KAAK,GAAGV,QAAQ,CAACL,IAAvB;AACAT,MAAAA,gBAAgB,CAACwB,KAAD,CAAhB;AACA5B,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KALD,CAKE,OAAMqB,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA;AACH;;AAAA;AACJ,GAXD;;AAaA,QAAMQ,aAAa,GAAIC,GAAD,IAAuB;AACzC,UAAMC,IAAI,GAAG9B,SAAS,CAAC+B,SAAV,CAAoBC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUA,GAAnC,CAAb;AACAtB,IAAAA,kBAAkB,CAACP,SAAS,CAAC8B,IAAD,CAAV,CAAlB;AACH,GAHD;;AAKA,QAAMG,iBAAiB,GAAIJ,GAAD,IAAuB;AAC7C,UAAMC,IAAI,GAAG5B,aAAa,CAAC6B,SAAd,CAAwBC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUA,GAAvC,CAAb;AACAxB,IAAAA,sBAAsB,CAACH,aAAa,CAAC4B,IAAD,CAAd,CAAtB;AACH,GAHD;;AAKA,QAAMI,WAAW,GAAG,YAA2B;AAC3C,QAAI;AAAA;;AACA,YAAMtB,IAAI,GAAG;AACTiB,QAAAA,GAAG,EAAEzB,mBAAF,aAAEA,mBAAF,uBAAEA,mBAAmB,CAAEyB,GADjB;AAETM,QAAAA,SAAS,EAAE/B,mBAAF,aAAEA,mBAAF,uBAAEA,mBAAmB,CAAE+B,SAFvB;AAGTpB,QAAAA,QAAQ,sBAAExB,SAAS,CAACuB,IAAZ,qDAAE,iBAAgBC,QAHjB;AAITC,QAAAA,OAAO,0BAAErB,WAAW,CAACe,OAAd,yDAAE,qBAAqBC;AAJrB,OAAb;;AAMA,UAAI,0BAAAhB,WAAW,CAACe,OAAZ,gFAAqBC,KAArB,MAA+B,EAAnC,EAAuC;AACnC;AACH;;AAAA;AACD,YAAMM,QAAQ,GAAG,MAAMzB,cAAc,CAAC0C,WAAf,CAA2BtB,IAA3B,CAAvB;;AACA,UAAKK,QAAQ,CAACL,IAAT,CAAcO,OAAd,KAA0B,SAA/B,EAA2C;AACvC,cAAMQ,KAAK,GAAGV,QAAQ,CAACL,IAAT,CAAce,KAA5B;AACA,cAAMG,IAAI,GAAGb,QAAQ,CAACL,IAAT,CAAckB,IAA3B;AACA3B,QAAAA,gBAAgB,CAACwB,KAAD,CAAhB;AACAtB,QAAAA,sBAAsB,CAACyB,IAAD,CAAtB;AACH;;AAAA;AACJ,KAjBD,CAiBE,OAAMV,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AAAA;AACJ,GAtBD;;AAwBA,SAAO;AACHvB,IAAAA,SADG;AAEHF,IAAAA,MAFG;AAGHF,IAAAA,QAHG;AAIHC,IAAAA,WAJG;AAKHK,IAAAA,SALG;AAMHE,IAAAA,aANG;AAOHE,IAAAA,mBAPG;AAQHE,IAAAA,eARG;AASHE,IAAAA,aATG;AAUHX,IAAAA,SAVG;AAWHY,IAAAA,UAXG;AAYHa,IAAAA,YAZG;AAaHG,IAAAA,gBAbG;AAcHG,IAAAA,aAdG;AAeHK,IAAAA,iBAfG;AAgBHC,IAAAA;AAhBG,GAAP;AAkBH,CAhHM;;GAAMzC,O","sourcesContent":["\nimport { useRef, useState } from 'react'\nimport userStore from '../store/userStore';\nimport postRepository from '../repository/postRepository';\nimport { ICurrentPost } from '../interfaces';\n\nexport const usePost = () => {\n    const postArea = useRef<HTMLTextAreaElement>(null);\n    const commentArea = useRef<HTMLTextAreaElement>(null);\n\n    const [isSent, setIsSent] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [sentPosts, setSentPosts] = useState<ICurrentPost[]>([]);\n    const [receivedPosts, setReceivedPosts] = useState<ICurrentPost[]>([]);\n    const [currentReceivedPost, setCurrentReceivedPost] = useState<ICurrentPost>();\n    const [currentSentPost, setCurrentSentPost] = useState<ICurrentPost>();\n\n    const handleLoading = (): void => {\n        setIsLoading(!isLoading);\n    };\n\n    const handlePost = async (): Promise<void> => {\n        try {\n            if (postArea.current?.value === '' ) {\n                return;\n            };\n            const data = {\n                account: userStore.user?.account,\n                nickName: userStore.user?.nickName,\n                content: postArea.current?.value,\n            };\n            const response = await postRepository.sendPost(data);\n            if ((response.data.message === 'Send Success')) {\n                setIsSent(true);\n            };\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    const getSentPosts = async (): Promise<void> => {\n        setIsLoading(true);\n        try {\n            const response = await postRepository.getSentPosts(userStore.user?.account);\n            const data = response.data;\n            setSentPosts(data);\n            setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            return;\n        };\n    };\n\n    const getReceivedPosts = async (): Promise<void> => {\n        setIsLoading(true);\n        try {\n            const response = await postRepository.getReceivePosts(userStore.user?.account);\n            const posts = response.data;\n            setReceivedPosts(posts);\n            setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            return;\n        };\n    };\n\n    const handleSentOne = (_id: string): void => {\n        const post = sentPosts.findIndex(x => x._id === _id);\n        setCurrentSentPost(sentPosts[post]);\n    };\n\n    const handleReceivedOne = (_id: string): void => {\n        const post = receivedPosts.findIndex(x => x._id === _id);\n        setCurrentReceivedPost(receivedPosts[post]);\n    };\n\n    const sendComment = async (): Promise<void> => {\n        try {\n            const data = {\n                _id: currentReceivedPost?._id,\n                toAccount: currentReceivedPost?.toAccount,\n                nickName: userStore.user?.nickName,\n                content: commentArea.current?.value,\n            };\n            if (commentArea.current?.value === '') {\n                return;\n            };\n            const response = await postRepository.sendComment(data);\n            if ((response.data.message === 'Success')) {\n                const posts = response.data.posts;\n                const post = response.data.post;\n                setReceivedPosts(posts);\n                setCurrentReceivedPost(post);\n            };\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    return {\n        isLoading,\n        isSent,\n        postArea,\n        commentArea,\n        sentPosts,\n        receivedPosts,\n        currentReceivedPost,\n        currentSentPost,\n        handleLoading,\n        setIsSent,\n        handlePost,\n        getSentPosts,\n        getReceivedPosts,\n        handleSentOne,\n        handleReceivedOne,\n        sendComment,\n    };\n};"]},"metadata":{},"sourceType":"module"}