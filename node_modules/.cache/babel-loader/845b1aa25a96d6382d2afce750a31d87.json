{"ast":null,"code":"import { action, makeObservable, observable } from \"mobx\";\nimport userStore from \"./userStore\";\n\nclass ChatStore {\n  constructor() {\n    this.isSearching = false;\n    this.isMatched = false;\n    this.isFinished = false;\n    this.visible = 'hidden';\n    this.chatLog = [];\n    this.recentChat = {\n      nickName: '',\n      message: '',\n      socketID: ''\n    };\n    makeObservable(this, {\n      isSearching: observable,\n      isMatched: observable,\n      isFinished: observable,\n      visible: observable,\n      chatLog: observable,\n      recentChat: observable,\n      setIsSearching: action,\n      setIsMatched: action,\n      setIsFinished: action,\n      handleCancel: action,\n      handleFind: action,\n      handleSearch: action,\n      handleMatched: action,\n      handleReceiveMsg: action,\n      handlePushChat: action,\n      handleFinished: action,\n      stopChat: action,\n      chatStopped: action,\n      reset: action\n    });\n  }\n\n  setIsSearching(status) {\n    this.isSearching = status;\n  }\n\n  setIsMatched(status) {\n    this.isMatched = status;\n  }\n\n  setIsFinished(status) {\n    this.isFinished = status;\n  }\n\n  handleCancel() {\n    var _userStore$userSocket;\n\n    (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.emit('cancel');\n  }\n\n  handleFind() {\n    var _userStore$userSocket2;\n\n    (_userStore$userSocket2 = userStore.userSocket) === null || _userStore$userSocket2 === void 0 ? void 0 : _userStore$userSocket2.emit('find');\n  }\n\n  handleSearch() {\n    if (!this.isSearching) {\n      this.setIsSearching(true);\n      this.handleFind();\n    } else {\n      this.setIsSearching(false);\n      this.handleCancel();\n    }\n\n    ;\n  }\n\n  handleMatched() {\n    var _userStore$userSocket3;\n\n    (_userStore$userSocket3 = userStore.userSocket) === null || _userStore$userSocket3 === void 0 ? void 0 : _userStore$userSocket3.on('matched', () => {\n      this.isMatched = true;\n      this.visible = 'visible';\n      this.chatLog = [{\n        nickName: 'SERENDY',\n        message: '상대와 대화가 시작되었어요!',\n        socketID: 'admin'\n      }];\n    });\n  }\n\n  handleReceiveMsg() {\n    var _userStore$userSocket4;\n\n    (_userStore$userSocket4 = userStore.userSocket) === null || _userStore$userSocket4 === void 0 ? void 0 : _userStore$userSocket4.on('receive', (data, socketID) => {\n      this.recentChat = {\n        nickName: data.nickName,\n        message: data.message,\n        socketID: socketID\n      };\n    });\n  }\n\n  handlePushChat() {\n    if (this.recentChat.message.length > 0) {\n      this.chatLog = [...this.chatLog, this.recentChat];\n    }\n\n    ;\n  }\n\n  handleFinished() {\n    this.setIsFinished(true);\n  }\n\n  stopChat() {\n    var _userStore$userSocket5;\n\n    (_userStore$userSocket5 = userStore.userSocket) === null || _userStore$userSocket5 === void 0 ? void 0 : _userStore$userSocket5.emit('stop chat');\n    this.handleFinished();\n  }\n\n  chatStopped() {\n    var _userStore$userSocket6;\n\n    (_userStore$userSocket6 = userStore.userSocket) === null || _userStore$userSocket6 === void 0 ? void 0 : _userStore$userSocket6.on('is ended', () => {\n      this.handleFinished();\n    });\n  }\n\n  reset() {\n    this.chatLog = [];\n    this.setIsSearching(false);\n    this.setIsFinished(false);\n    this.setIsMatched(false);\n  }\n\n}\n\n;\nconst chatStore = new ChatStore();\nexport default chatStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/chatStore.ts"],"names":["action","makeObservable","observable","userStore","ChatStore","constructor","isSearching","isMatched","isFinished","visible","chatLog","recentChat","nickName","message","socketID","setIsSearching","setIsMatched","setIsFinished","handleCancel","handleFind","handleSearch","handleMatched","handleReceiveMsg","handlePushChat","handleFinished","stopChat","chatStopped","reset","status","userSocket","emit","on","data","length","chatStore"],"mappings":"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","sourcesContent":["import { action, makeObservable, observable } from \"mobx\";\nimport { VisibilityType, IRecentChat } from '../interfaces/index';\nimport userStore from \"./userStore\";\n\nclass ChatStore {\n    public isSearching: boolean = false;\n    public isMatched: boolean = false;\n    public isFinished: boolean = false;\n    public visible: VisibilityType = 'hidden';\n    public chatLog: IRecentChat[] = [];\n    public recentChat: IRecentChat = { nickName: '', message: '', socketID: '' };\n\n    constructor() {\n        makeObservable(this, {\n            isSearching: observable,\n            isMatched: observable,\n            isFinished: observable,\n            visible: observable,\n            chatLog: observable,\n            recentChat: observable,\n            setIsSearching: action,\n            setIsMatched: action,\n            setIsFinished: action,\n            handleCancel: action,\n            handleFind: action,\n            handleSearch: action,\n            handleMatched: action,\n            handleReceiveMsg: action,\n            handlePushChat: action,\n            handleFinished: action,\n            stopChat: action,\n            chatStopped: action,\n            reset: action,\n        });\n    };\n\n    public setIsSearching(status: boolean): void {\n        this.isSearching = status;\n    };\n\n    public setIsMatched(status: boolean): void {\n        this.isMatched = status;\n    };\n\n    public setIsFinished(status: boolean): void {\n        this.isFinished = status;\n    };\n\n    public handleCancel(): void {\n        userStore.userSocket?.emit('cancel');\n    };\n\n    public handleFind(): void {\n        userStore.userSocket?.emit('find');\n    };\n\n    public handleSearch(): void {\n        if (!this.isSearching) {\n            this.setIsSearching(true);\n            this.handleFind();\n        } else {\n            this.setIsSearching(false);\n            this.handleCancel();\n        };\n    };\n\n    public handleMatched(): void {\n        userStore.userSocket?.on('matched', () => {\n            this.isMatched = true;\n            this.visible = 'visible';\n            this.chatLog = [{\n                nickName: 'SERENDY',\n                message: '상대와 대화가 시작되었어요!',\n                socketID: 'admin',\n            }];\n        });\n    };\n\n    public handleReceiveMsg(): void {\n        userStore.userSocket?.on('receive', (data, socketID) => {\n            this.recentChat = {\n                nickName: data.nickName,\n                message: data.message,\n                socketID: socketID\n            };\n        });\n    };\n\n    public handlePushChat(): void {\n        if (this.recentChat.message.length > 0) {\n            this.chatLog = [...this.chatLog, this.recentChat];\n        };\n    };\n\n    public handleFinished(): void {\n        this.setIsFinished(true);\n    };\n\n    public stopChat(): void {\n        userStore.userSocket?.emit('stop chat');\n        this.handleFinished();\n    };\n\n    public chatStopped(): void {\n        userStore.userSocket?.on('is ended', () => {\n            this.handleFinished();\n        });\n    };\n\n    public reset(): void {\n        this.chatLog = [];\n        this.setIsSearching(false);\n        this.setIsFinished(false);\n        this.setIsMatched(false);\n    };\n};\n\nconst chatStore = new ChatStore();\nexport default chatStore;"]},"metadata":{},"sourceType":"module"}