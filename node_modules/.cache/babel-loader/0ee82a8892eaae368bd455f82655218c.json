{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _classCallCheck from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{action,makeObservable,observable,flow}from'mobx';import userStore from'./userStore';import postRepository from'../repository/postRepository';var PostStore=/*#__PURE__*/function(){function PostStore(){_classCallCheck(this,PostStore);this.sentPosts=[];this.receivedPosts=[];this.currentSentPost=null;this.currentReceivedPost=null;this.isLoading=false;makeObservable(this,{sentPosts:observable,receivedPosts:observable,currentSentPost:observable,currentReceivedPost:observable,isLoading:observable,setSentPosts:action,setReceivedPosts:action,setCurrentSentPost:action,setCurrentReceivedPost:action,setIsLoading:action,sendPost:flow,getSentPosts:flow,getReceivedPosts:flow,handleSentOne:action.bound,handleReceivedOne:action.bound,sendComment:flow,resetReceivedPosts:action,resetSentPosts:action});}_createClass(PostStore,[{key:\"setSentPosts\",value:function setSentPosts(data){this.sentPosts=data;}},{key:\"setReceivedPosts\",value:function setReceivedPosts(data){this.receivedPosts=data;}},{key:\"setCurrentSentPost\",value:function setCurrentSentPost(data){this.currentSentPost=data;}},{key:\"setCurrentReceivedPost\",value:function setCurrentReceivedPost(data){this.currentReceivedPost=data;}},{key:\"setIsLoading\",value:function setIsLoading(boolean){this.isLoading=boolean;}},{key:\"sendPost\",value:/*#__PURE__*/_regeneratorRuntime.mark(function sendPost(content){var _userStore$user,_userStore$user2,data,_yield$postRepository,message;return _regeneratorRuntime.wrap(function sendPost$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!((content===null||content===void 0?void 0:content.length)===0)){_context.next=2;break;}return _context.abrupt(\"return\");case 2:;_context.prev=3;data={account:(_userStore$user=userStore.user)===null||_userStore$user===void 0?void 0:_userStore$user.account,nickName:(_userStore$user2=userStore.user)===null||_userStore$user2===void 0?void 0:_userStore$user2.nickName,content:content};_context.next=7;return postRepository.sendPost(data);case 7:_yield$postRepository=_context.sent;message=_yield$postRepository.data.message;if(!(message==='Send Success')){_context.next=11;break;}return _context.abrupt(\"return\",true);case 11:;_context.next=18;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](3);console.log(_context.t0);alert('서버가 점검중이에요');case 18:;case 19:case\"end\":return _context.stop();}}},sendPost,null,[[3,14]]);})},{key:\"getSentPosts\",value:/*#__PURE__*/_regeneratorRuntime.mark(function getSentPosts(){var _userStore$user3,_yield$postRepository2,data;return _regeneratorRuntime.wrap(function getSentPosts$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:this.setIsLoading(true);_context2.prev=1;_context2.next=4;return postRepository.getSentPosts((_userStore$user3=userStore.user)===null||_userStore$user3===void 0?void 0:_userStore$user3.account);case 4:_yield$postRepository2=_context2.sent;data=_yield$postRepository2.data;this.setSentPosts(data);this.setIsLoading(false);_context2.next=15;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0);alert('오류가 발생하였습니다');return _context2.abrupt(\"return\");case 15:;case 16:case\"end\":return _context2.stop();}}},getSentPosts,this,[[1,10]]);})},{key:\"getReceivedPosts\",value:/*#__PURE__*/_regeneratorRuntime.mark(function getReceivedPosts(){var _userStore$user4,_yield$postRepository3,data;return _regeneratorRuntime.wrap(function getReceivedPosts$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:this.setIsLoading(true);_context3.prev=1;_context3.next=4;return postRepository.getReceivePosts((_userStore$user4=userStore.user)===null||_userStore$user4===void 0?void 0:_userStore$user4.account);case 4:_yield$postRepository3=_context3.sent;data=_yield$postRepository3.data;this.setReceivedPosts(data);this.setIsLoading(false);_context3.next=15;break;case 10:_context3.prev=10;_context3.t0=_context3[\"catch\"](1);console.log(_context3.t0);alert('오류가 발생하였습니다');return _context3.abrupt(\"return\");case 15:;case 16:case\"end\":return _context3.stop();}}},getReceivedPosts,this,[[1,10]]);})},{key:\"handleSentOne\",value:function handleSentOne(_id){var post=this.sentPosts.find(function(x){return x._id===_id;});post&&this.setCurrentSentPost(post);}},{key:\"handleReceivedOne\",value:function handleReceivedOne(_id){var post=this.receivedPosts.find(function(x){return x._id===_id;});post&&this.setCurrentReceivedPost(post);}},{key:\"sendComment\",value:/*#__PURE__*/_regeneratorRuntime.mark(function sendComment(content){var _this$currentReceived,_this$currentReceived2,_userStore$user5,data,_yield$postRepository4,_yield$postRepository5,message,receivedPosts,currentReceivedPost;return _regeneratorRuntime.wrap(function sendComment$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;if(!((content===null||content===void 0?void 0:content.length)===0)){_context4.next=3;break;}return _context4.abrupt(\"return\");case 3:;data={_id:(_this$currentReceived=this.currentReceivedPost)===null||_this$currentReceived===void 0?void 0:_this$currentReceived._id,toAccount:(_this$currentReceived2=this.currentReceivedPost)===null||_this$currentReceived2===void 0?void 0:_this$currentReceived2.toAccount,nickName:(_userStore$user5=userStore.user)===null||_userStore$user5===void 0?void 0:_userStore$user5.nickName,content:content};_context4.next=7;return postRepository.sendComment(data);case 7:_yield$postRepository4=_context4.sent;_yield$postRepository5=_yield$postRepository4.data;message=_yield$postRepository5.message;receivedPosts=_yield$postRepository5.receivedPosts;currentReceivedPost=_yield$postRepository5.currentReceivedPost;if(message==='Success'){this.setReceivedPosts(receivedPosts);this.setCurrentReceivedPost(currentReceivedPost);};_context4.next=20;break;case 16:_context4.prev=16;_context4.t0=_context4[\"catch\"](0);console.log(_context4.t0);alert('서버 점검중입니다');case 20:;case 21:case\"end\":return _context4.stop();}}},sendComment,this,[[0,16]]);})},{key:\"resetReceivedPosts\",value:function resetReceivedPosts(){this.setCurrentReceivedPost(null);this.setReceivedPosts([]);}},{key:\"resetSentPosts\",value:function resetSentPosts(){this.setCurrentSentPost(null);this.setSentPosts([]);}}]);return PostStore;}();;var postStore=new PostStore();export default postStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/postStore.ts"],"names":["action","makeObservable","observable","flow","userStore","postRepository","PostStore","sentPosts","receivedPosts","currentSentPost","currentReceivedPost","isLoading","setSentPosts","setReceivedPosts","setCurrentSentPost","setCurrentReceivedPost","setIsLoading","sendPost","getSentPosts","getReceivedPosts","handleSentOne","bound","handleReceivedOne","sendComment","resetReceivedPosts","resetSentPosts","data","boolean","content","length","account","user","nickName","message","console","log","alert","getReceivePosts","_id","post","find","x","toAccount","postStore"],"mappings":"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","sourcesContent":["import { action, makeObservable, observable, flow } from 'mobx';\nimport { ICurrentPost } from '../interfaces/index';\nimport userStore from './userStore';\nimport postRepository from '../repository/postRepository'\n\nclass PostStore {\n    public sentPosts: ICurrentPost[] = [];\n    public receivedPosts: ICurrentPost[] = [];\n    public currentSentPost: ICurrentPost | null = null\n    public currentReceivedPost: ICurrentPost | null = null;\n    public isLoading: boolean = false;\n\n    constructor() {\n        makeObservable(this, {\n            sentPosts: observable,\n            receivedPosts: observable,\n            currentSentPost: observable,\n            currentReceivedPost: observable,\n            isLoading: observable,\n            setSentPosts: action,\n            setReceivedPosts: action,\n            setCurrentSentPost: action,\n            setCurrentReceivedPost: action,\n            setIsLoading: action,\n            sendPost: flow,\n            getSentPosts: flow,\n            getReceivedPosts: flow,\n            handleSentOne: action.bound,\n            handleReceivedOne: action.bound,\n            sendComment: flow,\n            resetReceivedPosts: action,\n            resetSentPosts: action,\n        });\n    };\n\n    public setSentPosts(data: ICurrentPost[]): void {\n        this.sentPosts = data;\n    };\n\n    public setReceivedPosts(data: ICurrentPost[]): void {\n        this.receivedPosts = data;\n    };\n\n    public setCurrentSentPost(data: ICurrentPost | null): void {\n        this.currentSentPost = data;\n    };\n\n    public setCurrentReceivedPost(data: ICurrentPost | null): void {\n        this.currentReceivedPost = data;\n    };\n\n    public setIsLoading(boolean: boolean): void {\n        this.isLoading = boolean;\n    };\n\n    public *sendPost(content: string | undefined) {\n        if (content?.length === 0) {\n            return;\n        };\n        try {\n            const data = {\n                account: userStore.user?.account,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: { message }} = yield postRepository.sendPost(data);\n            if ((message === 'Send Success')) {\n                return true\n            };\n        } catch(err) {\n            console.log(err);\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public *getSentPosts() {\n        this.setIsLoading(true);\n        try {\n            const { data } = yield postRepository.getSentPosts(userStore.user?.account);\n            this.setSentPosts(data);\n            this.setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public *getReceivedPosts() {\n        this.setIsLoading(true);\n        try {\n            const { data } = yield postRepository.getReceivePosts(userStore.user?.account);\n            this.setReceivedPosts(data);\n            this.setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public handleSentOne(_id: string): void {\n        const post = this.sentPosts.find(x => x._id === _id);\n        post && this.setCurrentSentPost(post);\n    };\n\n    public handleReceivedOne(_id: string): void {\n        const post = this.receivedPosts.find(x => x._id === _id);\n        post && this.setCurrentReceivedPost(post);\n    };\n\n    public *sendComment(content: string | undefined) {\n        try {\n            if (content?.length === 0) {\n                return;\n            };\n            const data = {\n                _id: this.currentReceivedPost?._id,\n                toAccount: this.currentReceivedPost?.toAccount,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: { message, receivedPosts, currentReceivedPost}} = yield postRepository.sendComment(data);\n            if ((message === 'Success')) {\n                this.setReceivedPosts(receivedPosts);\n                this.setCurrentReceivedPost(currentReceivedPost);\n            };\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public resetReceivedPosts(): void {\n        this.setCurrentReceivedPost(null);\n        this.setReceivedPosts([]);\n    };\n\n    public resetSentPosts(): void {\n        this.setCurrentSentPost(null);\n        this.setSentPosts([]);\n    };\n\n};\n\nconst postStore = new PostStore();\nexport default postStore;"]},"metadata":{},"sourceType":"module"}