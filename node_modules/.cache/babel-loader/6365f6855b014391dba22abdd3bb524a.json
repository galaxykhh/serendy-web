{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{action,computed,makeObservable,observable,runInAction}from\"mobx\";import authRepository from'../repository/authRepository';var UserStore=/*#__PURE__*/function(){function UserStore(){_classCallCheck(this,UserStore);this._isSignIn=false;this._user=null;this._userSocket=null;this._socketID=null;this.isLogging=false;makeObservable(this,{_isSignIn:observable,_user:observable,_userSocket:observable,_socketID:observable,isLogging:observable,isSignIn:computed,user:computed,userSocket:computed,socketID:computed,setIsSignIn:action,setUser:action,signInWithToken:action,signIn:action,signOut:action,changePW:action,setIsLogging:action,setUserSocket:action,setSocketID:action});}_createClass(UserStore,[{key:\"isSignIn\",get:function get(){return this._isSignIn;}},{key:\"user\",get:function get(){return this._user;}},{key:\"userSocket\",get:function get(){return this._userSocket;}},{key:\"socketID\",get:function get(){return this._socketID;}},{key:\"setIsSignIn\",value:function setIsSignIn(status){this._isSignIn=status;}},{key:\"setUser\",value:function setUser(user){this._user=user;}},{key:\"setIsLogging\",value:function setIsLogging(boolean){this.isLogging=boolean;}},{key:\"setUserSocket\",value:function setUserSocket(data){this._userSocket=data;}},{key:\"setSocketID\",value:function setSocketID(myID){this._socketID=myID;}},{key:\"saveSocketID\",value:function saveSocketID(){var _this$userSocket,_this$userSocket2,_this=this;(_this$userSocket=this.userSocket)===null||_this$userSocket===void 0?void 0:_this$userSocket.emit('enter');(_this$userSocket2=this.userSocket)===null||_this$userSocket2===void 0?void 0:_this$userSocket2.on('entered',function(myID){_this.setSocketID(myID);});}},{key:\"signInWithToken\",value:// 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n// 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n// App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\nfunction(){var _signInWithToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(push){var _this2=this;var token,_yield$authRepository,_yield$authRepository2,message,account,nickName,_token;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:this.setIsLogging(true);_context.prev=1;token=localStorage.getItem('SerendyToken');if(token){_context.next=8;break;}this.setIsLogging(false);return _context.abrupt(\"return\");case 8:_context.next=10;return authRepository.signInWidthToken();case 10:_yield$authRepository=_context.sent;_yield$authRepository2=_yield$authRepository.data;message=_yield$authRepository2.message;account=_yield$authRepository2.account;nickName=_yield$authRepository2.nickName;_token=_yield$authRepository2.token;runInAction(function(){if(message==='Invalid Token'){// 토큰만료 또는 없음\n_this2.setIsLogging(false);return;}else if(message==='SignIn Success'){_this2.setUser({account:account,nickName:nickName});_this2.setIsSignIn(true);localStorage.setItem('SerendyToken',_token);_this2.setIsLogging(false);push();};});case 17:;_context.next=24;break;case 20:_context.prev=20;_context.t0=_context[\"catch\"](1);this.setIsLogging(false);alert('서버 점검중입니다');case 24:;case 25:case\"end\":return _context.stop();}}},_callee,this,[[1,20]]);}));function signInWithToken(_x){return _signInWithToken.apply(this,arguments);}return signInWithToken;}()},{key:\"signIn\",value:function(){var _signIn=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userData,setError,push){var _this3=this;var _yield$authRepository3,_yield$authRepository4,message,account,nickName,token;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:this.setIsLogging(true);_context2.prev=1;_context2.next=4;return authRepository.signIn(userData);case 4:_yield$authRepository3=_context2.sent;_yield$authRepository4=_yield$authRepository3.data;message=_yield$authRepository4.message;account=_yield$authRepository4.account;nickName=_yield$authRepository4.nickName;token=_yield$authRepository4.token;runInAction(function(){if(message==='SignIn Fail'){_this3.setIsLogging(false);setError();return;}if(message==='SignIn Success'){_this3.setUser({account:account,nickName:nickName});_this3.setIsSignIn(true);localStorage.setItem('SerendyToken',token);_this3.setIsLogging(false);push();};});_context2.next=17;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](1);this.setIsLogging(false);alert('서버 점검중입니다');case 17:;case 18:case\"end\":return _context2.stop();}}},_callee2,this,[[1,13]]);}));function signIn(_x2,_x3,_x4){return _signIn.apply(this,arguments);}return signIn;}()},{key:\"signOut\",value:function signOut(push){this.setIsSignIn(false);this.setUser({account:null,nickName:null});localStorage.removeItem('SerendyToken');push();}},{key:\"changePW\",value:function(){var _changePW=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data,push){var _this4=this;var _yield$authRepository5,message;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return authRepository.changePassword(data);case 3:_yield$authRepository5=_context3.sent;message=_yield$authRepository5.data.message;runInAction(function(){if(message==='Changed'){alert(\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uBCC0\\uACBD\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\n\\uB2E4\\uC2DC \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694\");_this4.signOut(push);};});_context3.next=11;break;case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](0);alert('서버가 점검중이에요');case 11:;case 12:case\"end\":return _context3.stop();}}},_callee3,null,[[0,8]]);}));function changePW(_x5,_x6){return _changePW.apply(this,arguments);}return changePW;}()},{key:\"changeName\",value:function(){var _changeName=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(nickName,push){var _this5=this;var _yield$authRepository6,message;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return authRepository.changeName(nickName);case 3:_yield$authRepository6=_context4.sent;message=_yield$authRepository6.data.message;runInAction(function(){if(message==='Changed'){alert(\"\\uB2C9\\uB124\\uC784\\uC774 \\uBCC0\\uACBD\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\n\\uB2E4\\uC2DC \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694\");_this5.signOut(push);};});_context4.next=11;break;case 8:_context4.prev=8;_context4.t0=_context4[\"catch\"](0);alert('서버가 점검중이에요');case 11:;case 12:case\"end\":return _context4.stop();}}},_callee4,null,[[0,8]]);}));function changeName(_x7,_x8){return _changeName.apply(this,arguments);}return changeName;}()},{key:\"findPW\",value:function(){var _findPW=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data,push){var _yield$authRepository7,message;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return authRepository.findPW(data);case 3:_yield$authRepository7=_context5.sent;message=_yield$authRepository7.data.message;runInAction(function(){if(message==='Not Exist'){alert('일치하는 정보가 없습니다');return;}if(message==='Valid User'){alert(\"\\uC784\\uC2DC\\uB85C \\uC554\\uD638 \\uBA54\\uC138\\uC9C0\\uAC00\\n\\uBE44\\uBC00\\uBC88\\uD638\\uB85C \\uC124\\uC815\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\n\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\\uC744 \\uAF2D \\uD574\\uC8FC\\uC138\\uC694\");push();};});_context5.next=11;break;case 8:_context5.prev=8;_context5.t0=_context5[\"catch\"](0);alert('서버가 점검중이에요');case 11:;case 12:case\"end\":return _context5.stop();}}},_callee5,null,[[0,8]]);}));function findPW(_x9,_x10){return _findPW.apply(this,arguments);}return findPW;}()}]);return UserStore;}();;var userStore=new UserStore();export default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","makeObservable","observable","runInAction","authRepository","UserStore","_isSignIn","_user","_userSocket","_socketID","isLogging","isSignIn","user","userSocket","socketID","setIsSignIn","setUser","signInWithToken","signIn","signOut","changePW","setIsLogging","setUserSocket","setSocketID","status","boolean","data","myID","emit","on","push","token","localStorage","getItem","signInWidthToken","message","account","nickName","setItem","alert","userData","setError","removeItem","changePassword","changeName","findPW","userStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable, runInAction } from \"mobx\";\nimport authRepository from '../repository/authRepository';\nimport { ISignInData, IPassword, INickName, IFindPW, IUserStore, IUser } from '../interfaces';\nimport { Socket } from 'socket.io-client';\n\nclass UserStore implements IUserStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | null = null;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n    \n    public isLogging: boolean = false;\n\n    constructor() {\n        makeObservable<UserStore, '_isSignIn' | '_user' | '_userSocket' | '_socketID'>(this, {\n            _isSignIn: observable,\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: observable,\n            isSignIn: computed,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setIsSignIn: action,\n            setUser: action,\n            signInWithToken: action,\n            signIn: action,\n            signOut: action,\n            changePW: action,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action,\n        });\n    };\n\n    public get isSignIn(): boolean {\n        return this._isSignIn;\n    };\n\n    public get user(): IUser | null {\n        return this._user;\n    };\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    };\n\n    public get socketID(): string | null {\n        return this._socketID;\n    };\n\n    public setIsSignIn(status: boolean): void {\n        this._isSignIn = status;\n    };\n\n    public setUser(user: IUser): void {\n        this._user = user;\n    };\n\n    public setIsLogging(boolean: boolean): void {\n        this.isLogging = boolean;\n    };\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    };\n\n    public setSocketID(myID: string | null): void {\n        this._socketID = myID;\n    };\n\n    public saveSocketID(): void {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('entered', myID => {\n            this.setSocketID(myID);\n        });\n    };\n\n    // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n    // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n    // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n    public async signInWithToken(push: () => void) {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (!token) {\n                this.setIsLogging(false);\n                return;\n            } else {\n                const { data: {message, account, nickName, token}} = await authRepository.signInWidthToken();\n                runInAction(() => {\n                    if ((message === 'Invalid Token')) { // 토큰만료 또는 없음\n                        this.setIsLogging(false);\n                        return;\n                    } else if ((message === 'SignIn Success')) {\n                        this.setUser({ account , nickName });\n                        this.setIsSignIn(true);\n                        localStorage.setItem('SerendyToken', token);\n                        this.setIsLogging(false);\n                        push();\n                    };\n                });\n            };\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        this.setIsLogging(true);\n        try {\n            const { data: { message, account, nickName, token }} = await authRepository.signIn(userData);\n            runInAction(() => {\n                if ((message === 'SignIn Fail')) {\n                    this.setIsLogging(false);\n                    setError();\n                    return;\n                }\n                if ((message === 'SignIn Success')) {\n                    this.setUser({\n                        account: account,\n                        nickName: nickName,\n                    });\n                    this.setIsSignIn(true);\n                    localStorage.setItem('SerendyToken', token);\n                    this.setIsLogging(false);\n                    push();\n                };\n            });\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public signOut(push: () => void): void {\n        this.setIsSignIn(false);\n        this.setUser({ account: null, nickName: null });\n        localStorage.removeItem('SerendyToken');\n        push();\n    };\n\n    public async changePW(data: IPassword, push: () => void): Promise<void> {\n        try {\n            const { data: { message }} = await authRepository.changePassword(data);\n            runInAction(() => {\n                if ((message === 'Changed')) {\n                    alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n                    this.signOut(push);\n                };\n            });\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public async changeName(nickName: INickName, push: () => void): Promise<void> {\n        try {\n            const { data: { message }} = await authRepository.changeName(nickName);\n            runInAction(() => {\n                if ((message === 'Changed')) {\n                    alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`)\n                    this.signOut(push);\n                };\n            });\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public async findPW(data: IFindPW, push: () => void): Promise<void> {\n        try {\n            const { data: { message }} = await authRepository.findPW(data);\n            runInAction(() => {\n                if ((message === 'Not Exist')) {\n                    alert('일치하는 정보가 없습니다');\n                    return \n                }\n                if ((message === 'Valid User')) {\n                    alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n                    push();\n                };\n            });        \n        } catch (err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n};\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}