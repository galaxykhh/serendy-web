{"ast":null,"code":"import { action, computed, makeObservable, observable } from \"mobx\";\nimport serendyRepository from '../repository/serendyRepository';\n\nclass UserStore {\n  constructor() {\n    this._isSignIn = false;\n    this._user = null;\n    this._isLogging = false;\n    this._userSocket = null;\n    this._socketID = null;\n    makeObservable(this, {\n      _isLogging: observable,\n      _isSignIn: observable,\n      _user: observable,\n      _userSocket: observable,\n      _socketID: observable,\n      isLogging: computed,\n      isSignIn: computed,\n      user: computed,\n      userSocket: computed,\n      socketID: computed,\n      setIsSignIn: action,\n      setUser: action,\n      signInWithToken: action,\n      signIn: action,\n      signOut: action,\n      changePW: action,\n      setIsLogging: action,\n      setUserSocket: action,\n      setSocketID: action\n    });\n  }\n\n  get isSignIn() {\n    return this._isSignIn;\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  get isLogging() {\n    return this._isLogging;\n  }\n\n  get userSocket() {\n    return this._userSocket;\n  }\n\n  get socketID() {\n    return this._socketID;\n  }\n\n  setIsSignIn(status) {\n    this._isSignIn = status;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  setIsLogging(boolean) {\n    this._isLogging = boolean;\n  }\n\n  setUserSocket(data) {\n    this._userSocket = data;\n  }\n\n  setSocketID(myID) {\n    this._socketID = myID;\n  }\n\n  saveSocketID() {\n    var _this$userSocket, _this$userSocket2;\n\n    (_this$userSocket = this.userSocket) === null || _this$userSocket === void 0 ? void 0 : _this$userSocket.emit('enter');\n    (_this$userSocket2 = this.userSocket) === null || _this$userSocket2 === void 0 ? void 0 : _this$userSocket2.on('entered', myID => {\n      this.setSocketID(myID);\n    });\n  } // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n  // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n  // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n\n\n  async signInWithToken(push) {\n    this.setIsLogging(true);\n\n    try {\n      const token = localStorage.getItem('SerendyToken');\n\n      if (!token) {\n        this.setIsLogging(false);\n        return;\n      } else if (token) {\n        const response = await serendyRepository.signInWidthToken();\n\n        if (response.data.message === 'Invalid Token') {\n          // 토큰만료 또는 없음\n          this.setIsLogging(false);\n          return;\n        } else if (response.data.message === 'SignIn Success') {\n          this.setUser({\n            account: response.data.account,\n            nickName: response.data.nickName\n          });\n          this.setIsSignIn(true);\n          localStorage.setItem('SerendyToken', response.data.token);\n          this.setIsLogging(false);\n          push();\n        }\n      }\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n  }\n\n  async signIn(userData, setError, push) {\n    this.setIsLogging(true);\n\n    try {\n      const response = await serendyRepository.signIn(userData);\n\n      if (response.data.message === 'SignIn Fail') {\n        this.setIsLogging(false);\n        setError();\n      } else if (response.data.message === 'SignIn Success') {\n        this.setUser({\n          account: response.data.account,\n          nickName: response.data.nickName\n        });\n        this.setIsSignIn(true);\n        localStorage.setItem('SerendyToken', response.data.token);\n        this.setIsLogging(false);\n        push();\n      }\n    } catch (err) {\n      console.log(5);\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n  }\n\n  signOut(push) {\n    this.setIsSignIn(false);\n    this.setUser({\n      account: null,\n      nickName: null\n    });\n    localStorage.removeItem('SerendyToken');\n    push();\n  }\n\n  async changePW(data, push) {\n    try {\n      const response = await serendyRepository.changePassword(data);\n\n      if (response.data.message === 'Changed') {\n        alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n        this.signOut(push);\n      }\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  async changeName(nickName, push) {\n    try {\n      const response = await serendyRepository.changeName(nickName);\n\n      if (response.data.message === 'Changed') {\n        alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`);\n        this.signOut(push);\n      }\n    } catch (err) {\n      console.log(err);\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n}\n\n;\nconst userStore = new UserStore();\nexport default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","makeObservable","observable","serendyRepository","UserStore","constructor","_isSignIn","_user","_isLogging","_userSocket","_socketID","isLogging","isSignIn","user","userSocket","socketID","setIsSignIn","setUser","signInWithToken","signIn","signOut","changePW","setIsLogging","setUserSocket","setSocketID","status","boolean","data","myID","saveSocketID","emit","on","push","token","localStorage","getItem","response","signInWidthToken","message","account","nickName","setItem","err","alert","userData","setError","console","log","removeItem","changePassword","changeName","userStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport { ISignInData } from '../components/SignIn/SignInBox';\nimport { IPassword } from '../components/MyPage/ChangePWBox';\nimport serendyRepository from '../repository/serendyRepository';\nimport { Socket } from 'socket.io-client';\nimport { INickName } from '../components/MyPage/ChangeNameBox';\ninterface IUser {\n    account: string | null,\n    nickName: string | null,\n}\n\ninterface IUserStore {\n    isLogging: boolean;\n    isSignIn: boolean;\n    user: IUser | null;\n    userSocket: Socket | null;\n    socketID: string | null;\n}\n\nclass UserStore implements IUserStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | null = null;\n    private _isLogging: boolean = false;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n\n    constructor() {\n        makeObservable<UserStore, '_isLogging' | '_isSignIn' | '_user' | '_userSocket' | '_socketID'>(this, {\n            _isLogging: observable,\n            _isSignIn: observable,\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: computed,\n            isSignIn: computed,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setIsSignIn: action,\n            setUser: action,\n            signInWithToken: action,\n            signIn: action,\n            signOut: action,\n            changePW: action,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action,\n        })\n    }\n\n    public get isSignIn(): boolean {\n        return this._isSignIn;\n    }\n\n    public get user(): IUser | null {\n        return this._user;\n    }\n\n    public get isLogging(): boolean {\n        return this._isLogging;\n    }\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    }\n\n    public get socketID(): string | null {\n        return this._socketID;\n    }\n\n    public setIsSignIn(status: boolean): void {\n        this._isSignIn = status;\n    }\n\n    public setUser(user: IUser): void {\n        this._user = user;\n    }\n\n    public setIsLogging(boolean: boolean): void {\n        this._isLogging = boolean;\n    }\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    }\n\n    public setSocketID(myID: string | null): void {\n        this._socketID = myID;\n    }\n\n    public saveSocketID(): void {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('entered', myID => {\n            this.setSocketID(myID);\n        });\n    }\n    // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n    // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n    // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n    async signInWithToken(push: () => void) {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (!token) {\n                this.setIsLogging(false);\n                return;\n            } else if (token) {\n                const response = await serendyRepository.signInWidthToken();\n                if ((response.data.message === 'Invalid Token')) { // 토큰만료 또는 없음\n                    this.setIsLogging(false);\n                    return;\n                } else if ((response.data.message === 'SignIn Success')) {\n                    this.setUser({\n                        account: response.data.account,\n                        nickName: response.data.nickName,\n                    });\n                    this.setIsSignIn(true);\n                    localStorage.setItem('SerendyToken', response.data.token);\n                    this.setIsLogging(false);\n                    push();\n                }\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다')\n        }\n    }\n\n    async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        this.setIsLogging(true);\n        try {\n            const response = await serendyRepository.signIn(userData);\n            if ((response.data.message === 'SignIn Fail')) {\n                this.setIsLogging(false);\n                setError();\n            } else if ((response.data.message === 'SignIn Success')) {\n                this.setUser({\n                    account: response.data.account,\n                    nickName: response.data.nickName,\n                });\n                this.setIsSignIn(true);\n                localStorage.setItem('SerendyToken', response.data.token);\n                this.setIsLogging(false);\n                push();\n            }\n        } catch(err) {\n            console.log(5);\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        }\n    }\n\n    signOut(push: () => void): void {\n        this.setIsSignIn(false);\n        this.setUser({ account: null, nickName: null });\n        localStorage.removeItem('SerendyToken');\n        push();\n    }\n\n    async changePW(data: IPassword, push: () => void): Promise<void> {\n        try {\n            const response = await serendyRepository.changePassword(data);\n            if ((response.data.message === 'Changed')) {\n                alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n                this.signOut(push);\n            }\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    async changeName(nickName: INickName, push: () => void): Promise<void> {\n        try {\n            const response = await serendyRepository.changeName(nickName);\n            if ((response.data.message === 'Changed')) {\n                alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`)\n                this.signOut(push);\n            }\n        } catch(err) {\n            console.log(err);\n            alert('서버가 점검중이에요');\n        };\n    };\n};\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}