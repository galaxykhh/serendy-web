{"ast":null,"code":"import { action, computed, makeObservable, observable, runInAction } from \"mobx\";\nimport authRepository from '../repository/authRepository';\n\nclass UserStore {\n  constructor() {\n    this._isSignIn = false;\n    this._user = null;\n    this._userSocket = null;\n    this._socketID = null;\n    this.isLogging = false;\n    makeObservable(this, {\n      isLogging: observable,\n      _isSignIn: observable,\n      _user: observable,\n      _userSocket: observable,\n      _socketID: observable,\n      isLogging: observable,\n      isSignIn: computed,\n      user: computed,\n      userSocket: computed,\n      socketID: computed,\n      setIsSignIn: action,\n      setUser: action,\n      signInWithToken: action,\n      signIn: action,\n      signOut: action,\n      changePW: action,\n      setIsLogging: action,\n      setUserSocket: action,\n      setSocketID: action\n    });\n  }\n\n  get isSignIn() {\n    return this._isSignIn;\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  get userSocket() {\n    return this._userSocket;\n  }\n\n  get socketID() {\n    return this._socketID;\n  }\n\n  setIsSignIn(status) {\n    this._isSignIn = status;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  setIsLogging(boolean) {\n    this.isLogging = boolean;\n  }\n\n  setUserSocket(data) {\n    this._userSocket = data;\n  }\n\n  setSocketID(myID) {\n    this._socketID = myID;\n  }\n\n  saveSocketID() {\n    var _this$userSocket, _this$userSocket2;\n\n    (_this$userSocket = this.userSocket) === null || _this$userSocket === void 0 ? void 0 : _this$userSocket.emit('enter');\n    (_this$userSocket2 = this.userSocket) === null || _this$userSocket2 === void 0 ? void 0 : _this$userSocket2.on('entered', myID => {\n      this.setSocketID(myID);\n    });\n  }\n\n  // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n  // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n  // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n  async signInWithToken(push) {\n    this.setIsLogging(true);\n\n    try {\n      const token = localStorage.getItem('SerendyToken');\n\n      if (!token) {\n        this.setIsLogging(false);\n        return;\n      } else {\n        const {\n          data: {\n            message,\n            account,\n            nickName,\n            token\n          }\n        } = await authRepository.signInWidthToken();\n        runInAction(() => {\n          if (message === 'Invalid Token') {\n            // 토큰만료 또는 없음\n            this.setIsLogging(false);\n            return;\n          } else if (message === 'SignIn Success') {\n            this.setUser({\n              account,\n              nickName\n            });\n            this.setIsSignIn(true);\n            localStorage.setItem('SerendyToken', token);\n            this.setIsLogging(false);\n            push();\n          }\n\n          ;\n        });\n      }\n\n      ;\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n\n    ;\n  }\n\n  async signIn(userData, setError, push) {\n    this.setIsLogging(true);\n\n    try {\n      const {\n        data: {\n          message,\n          account,\n          nickName,\n          token\n        }\n      } = await authRepository.signIn(userData);\n      runInAction(() => {\n        if (message === 'SignIn Fail') {\n          this.setIsLogging(false);\n          setError();\n          return;\n        }\n\n        if (message === 'SignIn Success') {\n          this.setUser({\n            account: account,\n            nickName: nickName\n          });\n          this.setIsSignIn(true);\n          localStorage.setItem('SerendyToken', token);\n          this.setIsLogging(false);\n          push();\n        }\n\n        ;\n      });\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n\n    ;\n  }\n\n  signOut(push) {\n    this.setIsSignIn(false);\n    this.setUser({\n      account: null,\n      nickName: null\n    });\n    localStorage.removeItem('SerendyToken');\n    push();\n  }\n\n  async changePW(data, push) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = await authRepository.changePassword(data);\n      runInAction(() => {\n        if (message === 'Changed') {\n          alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n          this.signOut(push);\n        }\n\n        ;\n      });\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  async changeName(nickName, push) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = await authRepository.changeName(nickName);\n      runInAction(() => {\n        if (message === 'Changed') {\n          alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`);\n          this.signOut(push);\n        }\n\n        ;\n      });\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  async findPW(data, push) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = await authRepository.findPW(data);\n      runInAction(() => {\n        if (message === 'Not Exist') {\n          alert('일치하는 정보가 없습니다');\n          return;\n        }\n\n        if (message === 'Valid User') {\n          alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n          push();\n        }\n\n        ;\n      });\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n}\n\n;\nconst userStore = new UserStore();\nexport default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","makeObservable","observable","runInAction","authRepository","UserStore","constructor","_isSignIn","_user","_userSocket","_socketID","isLogging","isSignIn","user","userSocket","socketID","setIsSignIn","setUser","signInWithToken","signIn","signOut","changePW","setIsLogging","setUserSocket","setSocketID","status","boolean","data","myID","saveSocketID","emit","on","push","token","localStorage","getItem","message","account","nickName","signInWidthToken","setItem","err","alert","userData","setError","removeItem","changePassword","changeName","findPW","userStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable, runInAction } from \"mobx\";\nimport authRepository from '../repository/authRepository';\nimport { ISignInData, IPassword, INickName, IFindPW, IUserStore, IUser } from '../interfaces';\nimport { Socket } from 'socket.io-client';\n\nclass UserStore implements IUserStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | null = null;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n    public isLogging: boolean = false;\n\n    constructor() {\n        makeObservable<UserStore, '_isSignIn' | '_user' | '_userSocket' | '_socketID'>(this, {\n            isLogging: observable,\n            _isSignIn: observable,\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: observable,\n            isSignIn: computed,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setIsSignIn: action,\n            setUser: action,\n            signInWithToken: action,\n            signIn: action,\n            signOut: action,\n            changePW: action,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action,\n        });\n    };\n\n    public get isSignIn(): boolean {\n        return this._isSignIn;\n    };\n\n    public get user(): IUser | null {\n        return this._user;\n    };\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    };\n\n    public get socketID(): string | null {\n        return this._socketID;\n    };\n\n    public setIsSignIn(status: boolean): void {\n        this._isSignIn = status;\n    };\n\n    public setUser(user: IUser): void {\n        this._user = user;\n    };\n\n    public setIsLogging(boolean: boolean): void {\n        this.isLogging = boolean;\n    };\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    };\n\n    public setSocketID(myID: string | null): void {\n        this._socketID = myID;\n    };\n\n    public saveSocketID(): void {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('entered', myID => {\n            this.setSocketID(myID);\n        });\n    };\n\n    // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n    // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n    // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n    public async signInWithToken(push: () => void) {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (!token) {\n                this.setIsLogging(false);\n                return;\n            } else {\n                const { data: {message, account, nickName, token}} = await authRepository.signInWidthToken();\n                runInAction(() => {\n                    if ((message === 'Invalid Token')) { // 토큰만료 또는 없음\n                        this.setIsLogging(false);\n                        return;\n                    } else if ((message === 'SignIn Success')) {\n                        this.setUser({ account , nickName });\n                        this.setIsSignIn(true);\n                        localStorage.setItem('SerendyToken', token);\n                        this.setIsLogging(false);\n                        push();\n                    };\n                });\n            };\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        this.setIsLogging(true);\n        try {\n            const { data: { message, account, nickName, token }} = await authRepository.signIn(userData);\n            runInAction(() => {\n                if ((message === 'SignIn Fail')) {\n                    this.setIsLogging(false);\n                    setError();\n                    return;\n                }\n                if ((message === 'SignIn Success')) {\n                    this.setUser({\n                        account: account,\n                        nickName: nickName,\n                    });\n                    this.setIsSignIn(true);\n                    localStorage.setItem('SerendyToken', token);\n                    this.setIsLogging(false);\n                    push();\n                };\n            });\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public signOut(push: () => void): void {\n        this.setIsSignIn(false);\n        this.setUser({ account: null, nickName: null });\n        localStorage.removeItem('SerendyToken');\n        push();\n    };\n\n    public async changePW(data: IPassword, push: () => void): Promise<void> {\n        try {\n            const { data: { message }} = await authRepository.changePassword(data);\n            runInAction(() => {\n                if ((message === 'Changed')) {\n                    alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n                    this.signOut(push);\n                };\n            });\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public async changeName(nickName: INickName, push: () => void): Promise<void> {\n        try {\n            const { data: { message }} = await authRepository.changeName(nickName);\n            runInAction(() => {\n                if ((message === 'Changed')) {\n                    alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`)\n                    this.signOut(push);\n                };\n            });\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public async findPW(data: IFindPW, push: () => void): Promise<void> {\n        try {\n            const { data: { message }} = await authRepository.findPW(data);\n            runInAction(() => {\n                if ((message === 'Not Exist')) {\n                    alert('일치하는 정보가 없습니다');\n                    return \n                }\n                if ((message === 'Valid User')) {\n                    alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n                    push();\n                };\n            });        \n        } catch (err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n};\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}