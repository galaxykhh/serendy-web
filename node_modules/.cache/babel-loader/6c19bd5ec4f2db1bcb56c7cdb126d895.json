{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport userStore from '../store/userStore';\nexport const useChat = () => {\n  _s();\n\n  const [isSearching, setIsSearching] = useState(false);\n  const [isMatched, setIsMatched] = useState(false);\n  const [display, setDisplay] = useState('hidden');\n  const sendBtn = useRef(null);\n  const [inputMessage, setInputMessage] = useState(''); // input target value\n\n  const [messageHistory, setMessageHistory] = useState([]); // 채팅내용을 담아두는 배열\n\n  const [recentMessage, setRecentMessage] = useState(''); // 서버에서 갱신된 메세지를 받아오는 state\n\n  const handleInput = e => {\n    setInputMessage(e.target.value);\n  };\n\n  const handleEnter = e => {\n    if (e.key === 'Enter') {\n      var _sendBtn$current;\n\n      (_sendBtn$current = sendBtn.current) === null || _sendBtn$current === void 0 ? void 0 : _sendBtn$current.click();\n    }\n  };\n\n  const showChat = () => {\n    setDisplay('visible');\n  };\n\n  const handleBtn = () => {\n    setIsSearching(!isSearching);\n    setIsMatched(!isMatched); // 채팅개발하게되면 수정\n  };\n\n  const handleSearch = () => {\n    if (display === 'hidden') {\n      showChat();\n      handleBtn();\n    } else {\n      handleBtn();\n    }\n  };\n\n  const handleMatch = () => {\n    setIsMatched(true);\n  };\n\n  const handleSendMsg = () => {\n    var _userStore$userSocket;\n\n    (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.emit('chat', inputMessage);\n    setInputMessage('');\n  };\n\n  return {\n    isSearching,\n    isMatched,\n    inputMessage,\n    display,\n    sendBtn,\n    messageHistory,\n    handleInput,\n    handleEnter,\n    handleSendMsg,\n    handleSearch,\n    handleMatch\n  };\n};\n\n_s(useChat, \"l7D17o/AqbYwRp/bkBYWae3RYIs=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/useChat.ts"],"names":["useState","useRef","userStore","useChat","isSearching","setIsSearching","isMatched","setIsMatched","display","setDisplay","sendBtn","inputMessage","setInputMessage","messageHistory","setMessageHistory","recentMessage","setRecentMessage","handleInput","e","target","value","handleEnter","key","current","click","showChat","handleBtn","handleSearch","handleMatch","handleSendMsg","userSocket","emit"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AAMA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAU,KAAV,CAA9C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAiB,QAAjB,CAAtC;AACA,QAAMU,OAAO,GAAGT,MAAM,CAAoB,IAApB,CAAtB;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAS,EAAT,CAAhD,CALyB,CAKqC;;AAC9D,QAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAU,EAAV,CAApD,CANyB,CAM0C;;AACnE,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAS,EAAT,CAAlD,CAPyB,CAOuC;;AAEhE,QAAMiB,WAAW,GAAIC,CAAD,IAAkD;AAClEN,IAAAA,eAAe,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAIH,CAAD,IAAkC;AAClD,QAAIA,CAAC,CAACI,GAAF,KAAU,OAAd,EAAuB;AAAA;;AACnB,0BAAAZ,OAAO,CAACa,OAAR,sEAAiBC,KAAjB;AACH;AACJ,GAJD;;AAMA,QAAMC,QAAQ,GAAG,MAAY;AACzBhB,IAAAA,UAAU,CAAC,SAAD,CAAV;AACH,GAFD;;AAIA,QAAMiB,SAAS,GAAG,MAAY;AAC1BrB,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACAG,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ,CAF0B,CAEA;AAC7B,GAHD;;AAKA,QAAMqB,YAAY,GAAG,MAAY;AAC7B,QAAInB,OAAO,KAAK,QAAhB,EAA0B;AACtBiB,MAAAA,QAAQ;AACRC,MAAAA,SAAS;AACZ,KAHD,MAGO;AACHA,MAAAA,SAAS;AACZ;AACJ,GAPD;;AASA,QAAME,WAAW,GAAG,MAAY;AAC5BrB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMsB,aAAa,GAAG,MAAY;AAAA;;AAC9B,6BAAA3B,SAAS,CAAC4B,UAAV,gFAAsBC,IAAtB,CAA2B,MAA3B,EAAmCpB,YAAnC;AACAC,IAAAA,eAAe,CAAC,EAAD,CAAf;AACH,GAHD;;AAOA,SAAO;AACHR,IAAAA,WADG;AAEHE,IAAAA,SAFG;AAGHK,IAAAA,YAHG;AAIHH,IAAAA,OAJG;AAKHE,IAAAA,OALG;AAMHG,IAAAA,cANG;AAOHI,IAAAA,WAPG;AAQHI,IAAAA,WARG;AASHQ,IAAAA,aATG;AAUHF,IAAAA,YAVG;AAWHC,IAAAA;AAXG,GAAP;AAcH,CA9DM;;GAAMzB,O","sourcesContent":["import { useState, useRef } from 'react'\nimport { VisibilityType } from '../type';\nimport userStore from '../store/userStore';\n\ninterface IChat {\n    message: string;\n}\n\nexport const useChat = () => {\n    const [isSearching, setIsSearching] = useState<boolean>(false);\n    const [isMatched, setIsMatched] = useState<boolean>(false);\n    const [display, setDisplay] = useState<VisibilityType>('hidden');\n    const sendBtn = useRef<HTMLButtonElement>(null);\n    const [inputMessage, setInputMessage] = useState<string>(''); // input target value\n    const [messageHistory, setMessageHistory] = useState<IChat[]>([]); // 채팅내용을 담아두는 배열\n    const [recentMessage, setRecentMessage] = useState<string>(''); // 서버에서 갱신된 메세지를 받아오는 state\n\n    const handleInput = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setInputMessage(e.target.value);\n    }\n\n    const handleEnter = (e: React.KeyboardEvent): void => {\n        if (e.key === 'Enter') {\n            sendBtn.current?.click();\n        }\n    }\n\n    const showChat = (): void => {\n        setDisplay('visible');\n    }\n\n    const handleBtn = (): void => {\n        setIsSearching(!isSearching);\n        setIsMatched(!isMatched); // 채팅개발하게되면 수정\n    };\n\n    const handleSearch = (): void => {\n        if (display === 'hidden') {\n            showChat();\n            handleBtn();\n        } else {\n            handleBtn();\n        }\n    };\n\n    const handleMatch = (): void => {\n        setIsMatched(true);\n    }\n\n    const handleSendMsg = (): void => {\n        userStore.userSocket?.emit('chat', inputMessage);\n        setInputMessage('');\n    }\n    \n\n\n    return {\n        isSearching,\n        isMatched,\n        inputMessage,\n        display,\n        sendBtn,\n        messageHistory,\n        handleInput,\n        handleEnter,\n        handleSendMsg,\n        handleSearch,\n        handleMatch,\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}