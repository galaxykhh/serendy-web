{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport userStore from '../store/userStore';\n;\nexport const useChat = () => {\n  _s();\n\n  const [isSearching, setIsSearching] = useState(false);\n  const [isMatched, setIsMatched] = useState(false);\n  const [display, setDisplay] = useState('hidden'); // 서버에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n  // 해결방법을 찾다가 스테이트를 나눠서 동작하기로 했다.\n\n  const [chatLog, setChatLog] = useState([]); // 메세지 내역을 담아두는 배열\n\n  const [recentChat, setRecentChat] = useState({\n    nickName: '',\n    message: '',\n    socketID: ''\n  }); // 서버에서 보내주는 메세지를 담는 state\n\n  const [chatFinished, setChatFinished] = useState(false);\n  const sendBtn = useRef(null);\n  const input = useRef(null);\n  const screen = useRef(null);\n\n  const handleEnter = e => {\n    if (e.key === 'Enter') {\n      var _sendBtn$current;\n\n      (_sendBtn$current = sendBtn.current) === null || _sendBtn$current === void 0 ? void 0 : _sendBtn$current.click();\n    }\n\n    ;\n  };\n\n  const handleCancel = () => {\n    var _userStore$userSocket;\n\n    (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.emit('cancel');\n  };\n\n  const handleFind = () => {\n    var _userStore$userSocket2;\n\n    (_userStore$userSocket2 = userStore.userSocket) === null || _userStore$userSocket2 === void 0 ? void 0 : _userStore$userSocket2.emit('find');\n  };\n\n  const handleSearch = () => {\n    if (!isSearching) {\n      setIsSearching(true);\n      handleFind();\n    } else {\n      // 도중 취소\n      setIsSearching(false);\n      handleCancel();\n    }\n\n    ;\n  };\n\n  const getMatchedUser = () => {\n    var _userStore$userSocket3;\n\n    (_userStore$userSocket3 = userStore.userSocket) === null || _userStore$userSocket3 === void 0 ? void 0 : _userStore$userSocket3.on('matched', () => {\n      setIsMatched(true);\n      setDisplay('visible');\n      setChatLog([{\n        nickName: 'SERENDY',\n        message: '상대와 대화가 시작되었어요!',\n        socketID: 'admin'\n      }]);\n    });\n  };\n\n  const handleSendMsg = () => {\n    var _input$current;\n\n    if (((_input$current = input.current) === null || _input$current === void 0 ? void 0 : _input$current.value.length) !== 0) {\n      var _userStore$user, _input$current2, _userStore$userSocket4;\n\n      const nickName = (_userStore$user = userStore.user) === null || _userStore$user === void 0 ? void 0 : _userStore$user.nickName;\n      const message = (_input$current2 = input.current) === null || _input$current2 === void 0 ? void 0 : _input$current2.value;\n      const data = {\n        nickName: nickName,\n        message: message\n      };\n      (_userStore$userSocket4 = userStore.userSocket) === null || _userStore$userSocket4 === void 0 ? void 0 : _userStore$userSocket4.emit('chat', data);\n      input.current.value = '';\n    } else {\n      return;\n    }\n\n    ;\n  };\n\n  const scrollToBottom = () => {\n    var _screen$current, _screen$current2;\n\n    if (((_screen$current = screen.current) === null || _screen$current === void 0 ? void 0 : _screen$current.scrollHeight) && ((_screen$current2 = screen.current) === null || _screen$current2 === void 0 ? void 0 : _screen$current2.clientHeight)) {\n      var _screen$current3;\n\n      const scroll = screen.current.scrollHeight - screen.current.clientHeight;\n      (_screen$current3 = screen.current) === null || _screen$current3 === void 0 ? void 0 : _screen$current3.scrollTo(0, scroll);\n    } else {\n      return;\n    }\n\n    ;\n  };\n\n  const handleReceiveMsg = () => {\n    var _userStore$userSocket5;\n\n    (_userStore$userSocket5 = userStore.userSocket) === null || _userStore$userSocket5 === void 0 ? void 0 : _userStore$userSocket5.on('receive', (data, socketID) => {\n      setRecentChat({\n        nickName: data.nickName,\n        message: data.message,\n        socketID: socketID\n      });\n    });\n  };\n\n  const handlePushChat = () => {\n    recentChat.message.length > 0 && setChatLog([...chatLog, recentChat]);\n  };\n\n  const handleFinished = () => {\n    setChatFinished(true);\n    setRecentChat({\n      nickName: 'SERENDY',\n      message: '대화가 종료되었어요!',\n      socketID: 'admin'\n    });\n  };\n\n  const stopChat = () => {\n    var _userStore$userSocket6;\n\n    (_userStore$userSocket6 = userStore.userSocket) === null || _userStore$userSocket6 === void 0 ? void 0 : _userStore$userSocket6.emit('stop chat');\n    handleFinished();\n  };\n\n  const chatStopped = () => {\n    var _userStore$userSocket7;\n\n    (_userStore$userSocket7 = userStore.userSocket) === null || _userStore$userSocket7 === void 0 ? void 0 : _userStore$userSocket7.on('is ended', () => {\n      handleFinished();\n    });\n  };\n\n  const reStart = () => {\n    setChatLog([]);\n    setIsSearching(false);\n    setChatFinished(false);\n    setIsMatched(false);\n    input.current.value = '';\n  };\n\n  return {\n    isSearching,\n    isMatched,\n    display,\n    sendBtn,\n    input,\n    screen,\n    chatLog,\n    recentChat,\n    chatFinished,\n    setRecentChat,\n    setChatLog,\n    handleEnter,\n    handleSendMsg,\n    handleSearch,\n    handleReceiveMsg,\n    handlePushChat,\n    getMatchedUser,\n    stopChat,\n    setChatFinished,\n    reStart,\n    chatStopped,\n    scrollToBottom\n  };\n};\n\n_s(useChat, \"DqqkCZWPLGTcARadA2UcaNJZ1tY=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/useChat.ts"],"names":["useState","useRef","userStore","useChat","isSearching","setIsSearching","isMatched","setIsMatched","display","setDisplay","chatLog","setChatLog","recentChat","setRecentChat","nickName","message","socketID","chatFinished","setChatFinished","sendBtn","input","screen","handleEnter","e","key","current","click","handleCancel","userSocket","emit","handleFind","handleSearch","getMatchedUser","on","handleSendMsg","value","length","user","data","scrollToBottom","scrollHeight","clientHeight","scroll","scrollTo","handleReceiveMsg","handlePushChat","handleFinished","stopChat","chatStopped","reStart"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react'\nimport { VisibilityType } from '../type';\nimport userStore from '../store/userStore';\n\nexport interface IRecentChat {\n    nickName: string;\n    message: string;\n    socketID: string;\n};\n\nexport const useChat = () => {\n    const [isSearching, setIsSearching] = useState<boolean>(false);\n    const [isMatched, setIsMatched] = useState<boolean>(false);\n    const [display, setDisplay] = useState<VisibilityType>('hidden');\n    // 서버에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n    // 해결방법을 찾다가 스테이트를 나눠서 동작하기로 했다.\n    const [chatLog, setChatLog] = useState<IRecentChat[]>([]); // 메세지 내역을 담아두는 배열\n    const [recentChat, setRecentChat] = useState<IRecentChat>({ nickName: '', message: '', socketID: '' }); // 서버에서 보내주는 메세지를 담는 state\n    const [chatFinished, setChatFinished] = useState<boolean>(false);\n    const sendBtn = useRef<HTMLButtonElement>(null);\n    const input = useRef<HTMLInputElement>(null);\n    const screen = useRef<HTMLDivElement>(null);\n    const handleEnter = (e: React.KeyboardEvent): void => {\n        if (e.key === 'Enter') {\n            sendBtn.current?.click();\n        };\n    };\n\n    const handleCancel = (): void => {\n        userStore.userSocket?.emit('cancel');\n    };\n\n    const handleFind = (): void => {\n        userStore.userSocket?.emit('find');\n    };\n\n    const handleSearch = (): void => {\n        if (!isSearching) {\n            setIsSearching(true);\n            handleFind();\n        } else { // 도중 취소\n            setIsSearching(false);\n            handleCancel();\n        };\n    };\n\n    const getMatchedUser = (): void => {\n        userStore.userSocket?.on('matched', () => {\n            setIsMatched(true);\n            setDisplay('visible');\n            setChatLog([{\n                nickName: 'SERENDY',\n                message: '상대와 대화가 시작되었어요!',\n                socketID: 'admin',\n            }]);\n        });\n    };\n\n    const handleSendMsg = (): void => {\n        if (input.current?.value.length !== 0) {\n            const nickName = userStore.user?.nickName;\n            const message = input.current?.value;\n            const data = {\n                nickName: nickName,\n                message: message,\n            };\n            userStore.userSocket?.emit('chat', data);\n            input.current!.value = '';\n\n        } else {\n            return;\n        };\n    };\n\n    const scrollToBottom = (): void => {\n        if (screen.current?.scrollHeight && screen.current?.clientHeight) {\n            const scroll = screen.current.scrollHeight - screen.current.clientHeight;\n            screen.current?.scrollTo(0, scroll);\n        } else {\n            return;\n        };\n    };\n\n    const handleReceiveMsg = () => {\n        userStore.userSocket?.on('receive', (data, socketID)=> {\n            setRecentChat({\n                nickName: data.nickName,\n                message: data.message,\n                socketID: socketID,\n            });\n        });\n    };\n\n    const handlePushChat = (): void => {\n        recentChat.message.length > 0 && setChatLog([...chatLog, recentChat]);\n    };\n\n    const handleFinished = () => {\n        setChatFinished(true);\n        setRecentChat({\n            nickName: 'SERENDY',\n            message: '대화가 종료되었어요!',\n            socketID: 'admin',\n        });\n    };\n\n    const stopChat = (): void => {\n        userStore.userSocket?.emit('stop chat');\n        handleFinished();\n    };\n\n    const chatStopped = (): void => {\n        userStore.userSocket?.on('is ended', () => {\n            handleFinished();\n        });\n    };\n\n    const reStart = (): void => {\n        setChatLog([]);\n        setIsSearching(false);\n        setChatFinished(false);\n        setIsMatched(false);\n        input.current!.value = '';\n    };\n\n    return {\n        isSearching,\n        isMatched,\n        display,\n        sendBtn,\n        input,\n        screen,\n        chatLog,\n        recentChat,\n        chatFinished,\n        setRecentChat,\n        setChatLog,\n        handleEnter,\n        handleSendMsg,\n        handleSearch,\n        handleReceiveMsg,\n        handlePushChat,\n        getMatchedUser,\n        stopChat,\n        setChatFinished,\n        reStart,\n        chatStopped,\n        scrollToBottom,\n    };\n};"]},"metadata":{},"sourceType":"module"}