{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport userStore from '../store/userStore';\nexport const useChat = () => {\n  _s();\n\n  const [isSearching, setIsSearching] = useState(false);\n  const [isMatched, setIsMatched] = useState(false);\n  const [display, setDisplay] = useState('hidden'); // 서버에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n  // 해결방법을 찾다가 스테이트를 나눠서 동작하기로 했다.\n\n  const [chatLog, setChatLog] = useState([]); // 메세지 내역을 담아두는 배열\n\n  const [recentChat, setRecentChat] = useState({\n    nickName: '',\n    message: '',\n    socketID: ''\n  }); // 서버에서 보내주는 메세지를 담는 state\n\n  const [chatFinished, setChatFinished] = useState(false);\n  const sendBtn = useRef(null);\n  const input = useRef(null);\n\n  const handleEnter = e => {\n    if (e.key === 'Enter') {\n      var _sendBtn$current;\n\n      (_sendBtn$current = sendBtn.current) === null || _sendBtn$current === void 0 ? void 0 : _sendBtn$current.click();\n    }\n  };\n\n  const handleSearch = () => {\n    if (!isSearching) {\n      setIsSearching(true);\n      handleFind();\n    } else {\n      // 도중 취소\n      setIsSearching(false);\n      handleCancel();\n    }\n  };\n\n  const getMatchedUser = () => {\n    var _userStore$userSocket;\n\n    (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.on('matched', strangerId => {\n      setIsMatched(true);\n      userStore.setOthersID(strangerId);\n      setDisplay('visible');\n      setChatLog([{\n        nickName: 'SERENDY',\n        message: '상대와 대화가 시작되었어요!',\n        socketID: 'admin'\n      }]);\n    });\n  };\n\n  const handleSendMsg = () => {\n    var _input$current;\n\n    if (((_input$current = input.current) === null || _input$current === void 0 ? void 0 : _input$current.value.length) !== 0) {\n      var _input$current2, _userStore$userSocket2;\n\n      const nickName = userStore.user;\n      const message = (_input$current2 = input.current) === null || _input$current2 === void 0 ? void 0 : _input$current2.value;\n      const data = {\n        nickName: nickName,\n        message: message\n      };\n      (_userStore$userSocket2 = userStore.userSocket) === null || _userStore$userSocket2 === void 0 ? void 0 : _userStore$userSocket2.emit('chat', data, userStore.othersID);\n      input.current.value = '';\n    } else {\n      return;\n    }\n  };\n\n  const handleReceiveMsg = () => {\n    var _userStore$userSocket3;\n\n    (_userStore$userSocket3 = userStore.userSocket) === null || _userStore$userSocket3 === void 0 ? void 0 : _userStore$userSocket3.on('receive', (data, socketID) => {\n      setRecentChat({\n        nickName: data.nickName,\n        message: data.message,\n        socketID: socketID\n      });\n    });\n  };\n\n  const handlePushChat = () => {\n    recentChat.message.length > 0 && setChatLog([...chatLog, recentChat]);\n  };\n\n  const handleCancel = () => {\n    var _userStore$userSocket4;\n\n    (_userStore$userSocket4 = userStore.userSocket) === null || _userStore$userSocket4 === void 0 ? void 0 : _userStore$userSocket4.emit('cancel');\n  };\n\n  const handleFind = () => {\n    var _userStore$userSocket5;\n\n    (_userStore$userSocket5 = userStore.userSocket) === null || _userStore$userSocket5 === void 0 ? void 0 : _userStore$userSocket5.emit('find');\n  };\n\n  const handleFinished = () => {\n    setChatFinished(true);\n    userStore.setOthersID(null);\n    setChatLog([{\n      nickName: 'SERENDY',\n      message: '대화가 종료되었어요!',\n      socketID: 'admin'\n    }]);\n  };\n\n  const stopChat = () => {\n    var _userStore$userSocket6;\n\n    (_userStore$userSocket6 = userStore.userSocket) === null || _userStore$userSocket6 === void 0 ? void 0 : _userStore$userSocket6.emit('end chat', userStore.othersID);\n    handleFinished();\n  };\n\n  const chatStopped = () => {\n    var _userStore$userSocket7;\n\n    (_userStore$userSocket7 = userStore.userSocket) === null || _userStore$userSocket7 === void 0 ? void 0 : _userStore$userSocket7.on('is ended', () => {\n      handleFinished();\n    });\n  };\n\n  const reStart = () => {\n    setChatLog([]);\n    setIsSearching(false);\n    setChatFinished(false);\n    setIsMatched(false);\n  };\n\n  return {\n    isSearching,\n    isMatched,\n    display,\n    sendBtn,\n    input,\n    chatLog,\n    recentChat,\n    chatFinished,\n    setRecentChat,\n    setChatLog,\n    handleEnter,\n    handleSendMsg,\n    handleSearch,\n    handleReceiveMsg,\n    handlePushChat,\n    getMatchedUser,\n    stopChat,\n    setChatFinished,\n    reStart // startFind,\n    // handleFind\n\n  };\n};\n\n_s(useChat, \"0BpMFKm0QtxBP24XyxoaJKv2RNs=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/useChat.ts"],"names":["useState","useRef","userStore","useChat","isSearching","setIsSearching","isMatched","setIsMatched","display","setDisplay","chatLog","setChatLog","recentChat","setRecentChat","nickName","message","socketID","chatFinished","setChatFinished","sendBtn","input","handleEnter","e","key","current","click","handleSearch","handleFind","handleCancel","getMatchedUser","userSocket","on","strangerId","setOthersID","handleSendMsg","value","length","user","data","emit","othersID","handleReceiveMsg","handlePushChat","handleFinished","stopChat","chatStopped","reStart"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AAQA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAU,KAAV,CAA9C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAiB,QAAjB,CAAtC,CAHyB,CAIzB;AACA;;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAgB,EAAhB,CAAtC,CANyB,CAMkC;;AAC3D,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAc;AAAEc,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,OAAO,EAAE,EAAzB;AAA6BC,IAAAA,QAAQ,EAAE;AAAvC,GAAd,CAA5C,CAPyB,CAO+E;;AACxG,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAU,KAAV,CAAhD;AACA,QAAMmB,OAAO,GAAGlB,MAAM,CAAoB,IAApB,CAAtB;AACA,QAAMmB,KAAK,GAAGnB,MAAM,CAAmB,IAAnB,CAApB;;AAEA,QAAMoB,WAAW,GAAIC,CAAD,IAAkC;AAClD,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AAAA;;AACnB,0BAAAJ,OAAO,CAACK,OAAR,sEAAiBC,KAAjB;AACH;AACJ,GAJD;;AAMA,QAAMC,YAAY,GAAG,MAAY;AAC7B,QAAI,CAACtB,WAAL,EAAkB;AACdC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAsB,MAAAA,UAAU;AACb,KAHD,MAGO;AAAE;AACLtB,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAuB,MAAAA,YAAY;AACf;AACJ,GARD;;AAUA,QAAMC,cAAc,GAAG,MAAY;AAAA;;AAC/B,6BAAA3B,SAAS,CAAC4B,UAAV,gFAAsBC,EAAtB,CAAyB,SAAzB,EAAoCC,UAAU,IAAI;AAC9CzB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,MAAAA,SAAS,CAAC+B,WAAV,CAAsBD,UAAtB;AACAvB,MAAAA,UAAU,CAAC,SAAD,CAAV;AACAE,MAAAA,UAAU,CAAC,CAAC;AACRG,QAAAA,QAAQ,EAAE,SADF;AAERC,QAAAA,OAAO,EAAE,iBAFD;AAGRC,QAAAA,QAAQ,EAAE;AAHF,OAAD,CAAD,CAAV;AAKH,KATD;AAUH,GAXD;;AAaA,QAAMkB,aAAa,GAAG,MAAY;AAAA;;AAC9B,QAAI,mBAAAd,KAAK,CAACI,OAAN,kEAAeW,KAAf,CAAqBC,MAArB,MAAgC,CAApC,EAAuC;AAAA;;AACnC,YAAMtB,QAAQ,GAAGZ,SAAS,CAACmC,IAA3B;AACA,YAAMtB,OAAO,sBAAGK,KAAK,CAACI,OAAT,oDAAG,gBAAeW,KAA/B;AACA,YAAMG,IAAI,GAAG;AACTxB,QAAAA,QAAQ,EAAEA,QADD;AAETC,QAAAA,OAAO,EAAEA;AAFA,OAAb;AAIA,gCAAAb,SAAS,CAAC4B,UAAV,kFAAsBS,IAAtB,CAA2B,MAA3B,EAAmCD,IAAnC,EAAyCpC,SAAS,CAACsC,QAAnD;AACApB,MAAAA,KAAK,CAACI,OAAN,CAAeW,KAAf,GAAuB,EAAvB;AAEH,KAVD,MAUO;AACH;AACH;AACJ,GAdD;;AAgBA,QAAMM,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,8BAAAvC,SAAS,CAAC4B,UAAV,kFAAsBC,EAAtB,CAAyB,SAAzB,EAAoC,CAACO,IAAD,EAAOtB,QAAP,KAAmB;AACnDH,MAAAA,aAAa,CAAC;AACVC,QAAAA,QAAQ,EAAEwB,IAAI,CAACxB,QADL;AAEVC,QAAAA,OAAO,EAAEuB,IAAI,CAACvB,OAFJ;AAGVC,QAAAA,QAAQ,EAAEA;AAHA,OAAD,CAAb;AAKH,KAND;AAOH,GARD;;AAUA,QAAM0B,cAAc,GAAG,MAAY;AAC/B9B,IAAAA,UAAU,CAACG,OAAX,CAAmBqB,MAAnB,GAA4B,CAA5B,IAAiCzB,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaE,UAAb,CAAD,CAA3C;AACH,GAFD;;AAIA,QAAMgB,YAAY,GAAG,MAAY;AAAA;;AAC7B,8BAAA1B,SAAS,CAAC4B,UAAV,kFAAsBS,IAAtB,CAA2B,QAA3B;AACH,GAFD;;AAIA,QAAMZ,UAAU,GAAG,MAAY;AAAA;;AAC3B,8BAAAzB,SAAS,CAAC4B,UAAV,kFAAsBS,IAAtB,CAA2B,MAA3B;AACH,GAFD;;AAIA,QAAMI,cAAc,GAAG,MAAM;AACzBzB,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAhB,IAAAA,SAAS,CAAC+B,WAAV,CAAsB,IAAtB;AACAtB,IAAAA,UAAU,CAAC,CAAC;AACRG,MAAAA,QAAQ,EAAE,SADF;AAERC,MAAAA,OAAO,EAAE,aAFD;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAAD,CAAD,CAAV;AAKH,GARD;;AAUA,QAAM4B,QAAQ,GAAG,MAAY;AAAA;;AACzB,8BAAA1C,SAAS,CAAC4B,UAAV,kFAAsBS,IAAtB,CAA2B,UAA3B,EAAuCrC,SAAS,CAACsC,QAAjD;AACAG,IAAAA,cAAc;AACjB,GAHD;;AAKA,QAAME,WAAW,GAAG,MAAY;AAAA;;AAC5B,8BAAA3C,SAAS,CAAC4B,UAAV,kFAAsBC,EAAtB,CAAyB,UAAzB,EAAqC,MAAM;AACvCY,MAAAA,cAAc;AACjB,KAFD;AAGH,GAJD;;AAMA,QAAMG,OAAO,GAAG,MAAY;AACxBnC,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAN,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAa,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAX,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GALD;;AAOA,SAAO;AACHH,IAAAA,WADG;AAEHE,IAAAA,SAFG;AAGHE,IAAAA,OAHG;AAIHW,IAAAA,OAJG;AAKHC,IAAAA,KALG;AAMHV,IAAAA,OANG;AAOHE,IAAAA,UAPG;AAQHK,IAAAA,YARG;AASHJ,IAAAA,aATG;AAUHF,IAAAA,UAVG;AAWHU,IAAAA,WAXG;AAYHa,IAAAA,aAZG;AAaHR,IAAAA,YAbG;AAcHe,IAAAA,gBAdG;AAeHC,IAAAA,cAfG;AAgBHb,IAAAA,cAhBG;AAiBHe,IAAAA,QAjBG;AAkBH1B,IAAAA,eAlBG;AAmBH4B,IAAAA,OAnBG,CAoBH;AACA;;AArBG,GAAP;AAuBH,CAlIM;;GAAM3C,O","sourcesContent":["import { useState, useRef } from 'react'\nimport { VisibilityType } from '../type';\nimport userStore from '../store/userStore';\n\nexport interface IRecentChat {\n    nickName: string;\n    message: string;\n    socketID: string;\n}\n\nexport const useChat = () => {\n    const [isSearching, setIsSearching] = useState<boolean>(false);\n    const [isMatched, setIsMatched] = useState<boolean>(false);\n    const [display, setDisplay] = useState<VisibilityType>('hidden');\n    // 서버에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n    // 해결방법을 찾다가 스테이트를 나눠서 동작하기로 했다.\n    const [chatLog, setChatLog] = useState<IRecentChat[]>([]); // 메세지 내역을 담아두는 배열\n    const [recentChat, setRecentChat] = useState<IRecentChat>({ nickName: '', message: '', socketID: '' }); // 서버에서 보내주는 메세지를 담는 state\n    const [chatFinished, setChatFinished] = useState<boolean>(false);\n    const sendBtn = useRef<HTMLButtonElement>(null);\n    const input = useRef<HTMLInputElement>(null);\n\n    const handleEnter = (e: React.KeyboardEvent): void => {\n        if (e.key === 'Enter') {\n            sendBtn.current?.click();\n        }\n    }\n\n    const handleSearch = (): void => {\n        if (!isSearching) {\n            setIsSearching(true);\n            handleFind();\n        } else { // 도중 취소\n            setIsSearching(false);\n            handleCancel();\n        }\n    }\n\n    const getMatchedUser = (): void => {\n        userStore.userSocket?.on('matched', strangerId => {\n            setIsMatched(true);\n            userStore.setOthersID(strangerId);\n            setDisplay('visible');\n            setChatLog([{\n                nickName: 'SERENDY',\n                message: '상대와 대화가 시작되었어요!',\n                socketID: 'admin',\n            }]);\n        })\n    }\n\n    const handleSendMsg = (): void => {\n        if (input.current?.value.length !== 0) {\n            const nickName = userStore.user;\n            const message = input.current?.value;\n            const data = {\n                nickName: nickName,\n                message: message,\n            }\n            userStore.userSocket?.emit('chat', data, userStore.othersID);\n            input.current!.value = ''\n\n        } else {\n            return;\n        }\n    }\n\n    const handleReceiveMsg = () => {\n        userStore.userSocket?.on('receive', (data, socketID)=> {\n            setRecentChat({\n                nickName: data.nickName,\n                message: data.message,\n                socketID: socketID,\n            })\n        })\n    }\n\n    const handlePushChat = (): void => {\n        recentChat.message.length > 0 && setChatLog([...chatLog, recentChat]);\n    }\n\n    const handleCancel = (): void => {\n        userStore.userSocket?.emit('cancel');\n    }\n\n    const handleFind = (): void => {\n        userStore.userSocket?.emit('find');\n    }\n\n    const handleFinished = () => {\n        setChatFinished(true);\n        userStore.setOthersID(null);\n        setChatLog([{\n            nickName: 'SERENDY',\n            message: '대화가 종료되었어요!',\n            socketID: 'admin',\n        }]);\n    }\n\n    const stopChat = (): void => {\n        userStore.userSocket?.emit('end chat', userStore.othersID);\n        handleFinished();\n    }\n\n    const chatStopped = (): void => {\n        userStore.userSocket?.on('is ended', () => {\n            handleFinished();\n        })\n    }\n\n    const reStart = (): void => {\n        setChatLog([]);\n        setIsSearching(false);\n        setChatFinished(false);\n        setIsMatched(false);\n    }\n\n    return {\n        isSearching,\n        isMatched,\n        display,\n        sendBtn,\n        input,\n        chatLog,\n        recentChat,\n        chatFinished,\n        setRecentChat,\n        setChatLog,\n        handleEnter,\n        handleSendMsg,\n        handleSearch,\n        handleReceiveMsg,\n        handlePushChat,\n        getMatchedUser,\n        stopChat,\n        setChatFinished,\n        reStart,\n        // startFind,\n        // handleFind\n    }\n}"]},"metadata":{},"sourceType":"module"}