{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _classCallCheck from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{action,computed,flow,makeObservable,observable}from\"mobx\";import authRepository from'../repository/authRepository';var UserStore=/*#__PURE__*/function(){function UserStore(){_classCallCheck(this,UserStore);this._user=null;this._userSocket=null;this._socketID=null;this.isLogging=false;makeObservable(this,{_user:observable,_userSocket:observable,_socketID:observable,isLogging:observable,user:computed,userSocket:computed,socketID:computed,setUser:action,signInWithToken:flow,signIn:flow,signUp:flow,checkAccount:flow,changePW:flow,changeName:flow,findPW:flow,signOut:action.bound,setIsLogging:action,setUserSocket:action,setSocketID:action,saveSocketID:action});}_createClass(UserStore,[{key:\"user\",get:function get(){return this._user;}},{key:\"userSocket\",get:function get(){return this._userSocket;}},{key:\"socketID\",get:function get(){return this._socketID;}},{key:\"setUser\",value:function setUser(user){this._user=user;}},{key:\"setIsLogging\",value:function setIsLogging(boolean){this.isLogging=boolean;}},{key:\"setUserSocket\",value:function setUserSocket(data){this._userSocket=data;}},{key:\"setSocketID\",value:function setSocketID(myID){this._socketID=myID;}},{key:\"saveSocketID\",value:function saveSocketID(){var _this$userSocket,_this$userSocket2,_this=this;(_this$userSocket=this.userSocket)===null||_this$userSocket===void 0?void 0:_this$userSocket.emit('enter');(_this$userSocket2=this.userSocket)===null||_this$userSocket2===void 0?void 0:_this$userSocket2.on('entered',function(myID){_this.setSocketID(myID);});}},{key:\"signInWithToken\",value:/*#__PURE__*/_regeneratorRuntime.mark(function signInWithToken(){var token,_yield$authRepository,_yield$authRepository2,message,account,nickName,_token;return _regeneratorRuntime.wrap(function signInWithToken$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;token=localStorage.getItem('SerendyToken');if(!token){_context.next=18;break;}this.setIsLogging(true);_context.next=6;return authRepository.signInWidthToken();case 6:_yield$authRepository=_context.sent;_yield$authRepository2=_yield$authRepository.data;message=_yield$authRepository2.message;account=_yield$authRepository2.account;nickName=_yield$authRepository2.nickName;_token=_yield$authRepository2.token;if(!(message==='SignIn Success')){_context.next=17;break;}this.setUser({account:account,nickName:nickName});localStorage.setItem('SerendyToken',_token);this.setIsLogging(false);return _context.abrupt(\"return\",true);case 17:;case 18:;this.setIsLogging(false);return _context.abrupt(\"return\",false);case 23:_context.prev=23;_context.t0=_context[\"catch\"](0);this.setIsLogging(false);alert('서버 점검중입니다');case 27:;case 28:case\"end\":return _context.stop();}}},signInWithToken,this,[[0,23]]);})},{key:\"signIn\",value:/*#__PURE__*/_regeneratorRuntime.mark(function signIn(userData){var _yield$authRepository3,_yield$authRepository4,message,account,nickName,token;return _regeneratorRuntime.wrap(function signIn$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:this.setIsLogging(true);_context2.prev=1;_context2.next=4;return authRepository.signIn(userData);case 4:_yield$authRepository3=_context2.sent;_yield$authRepository4=_yield$authRepository3.data;message=_yield$authRepository4.message;account=_yield$authRepository4.account;nickName=_yield$authRepository4.nickName;token=_yield$authRepository4.token;if(!(message==='SignIn Success')){_context2.next=15;break;}this.setUser({account:account,nickName:nickName});localStorage.setItem('SerendyToken',token);this.setIsLogging(false);return _context2.abrupt(\"return\",true);case 15:;this.setIsLogging(false);return _context2.abrupt(\"return\",false);case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0);this.setIsLogging(false);alert('서버 점검중입니다');case 25:;case 26:case\"end\":return _context2.stop();}}},signIn,this,[[1,20]]);})},{key:\"signUp\",value:/*#__PURE__*/_regeneratorRuntime.mark(function signUp(userData){var _yield$authRepository5,message;return _regeneratorRuntime.wrap(function signUp$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return authRepository.signUp(userData);case 3:_yield$authRepository5=_context3.sent;message=_yield$authRepository5.data.message;if(!(message==='SignUp Success')){_context3.next=7;break;}return _context3.abrupt(\"return\",true);case 7:;return _context3.abrupt(\"return\",false);case 11:_context3.prev=11;_context3.t0=_context3[\"catch\"](0);console.log(_context3.t0);alert('서버 점검중입니다');case 15:;case 16:case\"end\":return _context3.stop();}}},signUp,null,[[0,11]]);})},{key:\"checkAccount\",value:/*#__PURE__*/_regeneratorRuntime.mark(function checkAccount(account){var _yield$authRepository6,message;return _regeneratorRuntime.wrap(function checkAccount$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return authRepository.checkAccount(account);case 3:_yield$authRepository6=_context4.sent;message=_yield$authRepository6.data.message;if(!(message==='available')){_context4.next=7;break;}return _context4.abrupt(\"return\",true);case 7:;return _context4.abrupt(\"return\",false);case 11:_context4.prev=11;_context4.t0=_context4[\"catch\"](0);console.log(_context4.t0);alert('서버 점검중입니다');case 15:;case 16:case\"end\":return _context4.stop();}}},checkAccount,null,[[0,11]]);})},{key:\"changePW\",value:/*#__PURE__*/_regeneratorRuntime.mark(function changePW(data){var _yield$authRepository7,message;return _regeneratorRuntime.wrap(function changePW$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return authRepository.changePassword(data);case 3:_yield$authRepository7=_context5.sent;message=_yield$authRepository7.data.message;if(!(message==='Changed')){_context5.next=8;break;}alert(\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uBCC0\\uACBD\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\n\\uB2E4\\uC2DC \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694\");return _context5.abrupt(\"return\",this.signOut());case 8:;_context5.next=14;break;case 11:_context5.prev=11;_context5.t0=_context5[\"catch\"](0);alert('서버가 점검중이에요');case 14:;case 15:case\"end\":return _context5.stop();}}},changePW,this,[[0,11]]);})},{key:\"changeName\",value:/*#__PURE__*/_regeneratorRuntime.mark(function changeName(nickName){var _yield$authRepository8,message;return _regeneratorRuntime.wrap(function changeName$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;_context6.next=3;return authRepository.changeName(nickName);case 3:_yield$authRepository8=_context6.sent;message=_yield$authRepository8.data.message;if(!(message==='Changed')){_context6.next=8;break;}alert(\"\\uB2C9\\uB124\\uC784\\uC774 \\uBCC0\\uACBD\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\n\\uB2E4\\uC2DC \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694\");return _context6.abrupt(\"return\",this.signOut());case 8:;_context6.next=14;break;case 11:_context6.prev=11;_context6.t0=_context6[\"catch\"](0);alert('서버가 점검중이에요');case 14:;case 15:case\"end\":return _context6.stop();}}},changeName,this,[[0,11]]);})},{key:\"findPW\",value:/*#__PURE__*/_regeneratorRuntime.mark(function findPW(data){var _yield$authRepository9,message;return _regeneratorRuntime.wrap(function findPW$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;_context7.next=3;return authRepository.findPW(data);case 3:_yield$authRepository9=_context7.sent;message=_yield$authRepository9.data.message;if(!(message==='Not Exist')){_context7.next=8;break;}alert('일치하는 정보가 없습니다');return _context7.abrupt(\"return\",false);case 8:if(!(message==='Valid User')){_context7.next=11;break;}alert(\"\\uC784\\uC2DC\\uB85C \\uC554\\uD638 \\uBA54\\uC138\\uC9C0\\uAC00\\n\\uBE44\\uBC00\\uBC88\\uD638\\uB85C \\uC124\\uC815\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\n\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\\uC744 \\uAF2D \\uD574\\uC8FC\\uC138\\uC694\");return _context7.abrupt(\"return\",this.signOut());case 11:;_context7.next=17;break;case 14:_context7.prev=14;_context7.t0=_context7[\"catch\"](0);alert('서버가 점검중이에요');case 17:;case 18:case\"end\":return _context7.stop();}}},findPW,this,[[0,14]]);})},{key:\"signOut\",value:function signOut(){this.setUser(null);localStorage.removeItem('SerendyToken');return true;}}]);return UserStore;}();;var userStore=new UserStore();export default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","flow","makeObservable","observable","authRepository","UserStore","_user","_userSocket","_socketID","isLogging","user","userSocket","socketID","setUser","signInWithToken","signIn","signUp","checkAccount","changePW","changeName","findPW","signOut","bound","setIsLogging","setUserSocket","setSocketID","saveSocketID","boolean","data","myID","emit","on","token","localStorage","getItem","signInWidthToken","message","account","nickName","setItem","alert","userData","console","log","changePassword","removeItem","userStore"],"mappings":"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","sourcesContent":["import { action, computed, flow, makeObservable, observable } from \"mobx\";\nimport authRepository from '../repository/authRepository';\nimport { ISignInData, IPassword, INickName, IFindPW, IUserStore, IUser, ISignUpData } from '../interfaces';\nimport { Socket } from 'socket.io-client';\n\nclass UserStore implements IUserStore {\n    private _user: IUser | null = null;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n    public isLogging: boolean = false;\n\n    constructor() {\n        makeObservable<UserStore, '_user' | '_userSocket' | '_socketID'>(this, {\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: observable,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setUser: action,\n            signInWithToken: flow,\n            signIn: flow,\n            signUp: flow,\n            checkAccount: flow,\n            changePW: flow,\n            changeName: flow,\n            findPW: flow,\n            signOut: action.bound,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action,\n            saveSocketID: action,\n        });\n    };\n\n    public get user(): IUser | null {\n        return this._user;\n    };\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    };\n\n    public get socketID(): string | null {\n        return this._socketID;\n    };\n\n    public setUser(user: IUser | null): void {\n        this._user = user;\n    };\n\n    public setIsLogging(boolean: boolean): void {\n        this.isLogging = boolean;\n    };\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    };\n\n    public setSocketID(myID: string | null): void {\n        this._socketID = myID;\n    };\n\n    public saveSocketID(): void {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('entered', myID => {\n            this.setSocketID(myID);\n        });\n    };\n\n    public *signInWithToken() {\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (token) {\n                this.setIsLogging(true);\n                const { data: {message, account, nickName, token}} = yield authRepository.signInWidthToken();\n                    if (message === 'SignIn Success') {\n                        this.setUser({ account , nickName });\n                        localStorage.setItem('SerendyToken', token);\n                        this.setIsLogging(false);\n                        return true;\n                    };\n            };\n            this.setIsLogging(false);\n            return false;\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public *signIn(userData: ISignInData) {\n        this.setIsLogging(true);\n        try {\n            const { data: { message, account, nickName, token } } = yield authRepository.signIn(userData);\n            if (message === 'SignIn Success') {\n                this.setUser({ account, nickName });\n                localStorage.setItem('SerendyToken', token);\n                this.setIsLogging(false);\n                return true;\n            };\n            this.setIsLogging(false);\n            return false;\n        } catch(err) {\n            console.log(err);\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public *signUp(userData: ISignUpData) {\n        try {\n            const { data: { message } } = yield authRepository.signUp(userData);\n            if (message === 'SignUp Success') {\n                return true;\n            };\n            return false;\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public *checkAccount(account: string) {\n        try {\n            const { data: { message } } = yield authRepository.checkAccount(account);\n            if (message === 'available') {\n                return true;\n            };\n            return false; // message = 'already exist'\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n    \n    public *changePW(data: IPassword) {\n        try {\n            const { data: { message }} = yield authRepository.changePassword(data);\n            if (message === 'Changed') {\n                alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n                return this.signOut();\n            };\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n    \n    public *changeName(nickName: INickName) {\n        try {\n            const { data: { message }} = yield authRepository.changeName(nickName);\n            if (message === 'Changed') {\n                alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`)\n                return this.signOut();\n            };\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n    \n    public *findPW(data: IFindPW) {\n        try {\n            const { data: { message }} = yield authRepository.findPW(data);\n            if (message === 'Not Exist') {\n                alert('일치하는 정보가 없습니다');\n                return false;\n            }\n            if (message === 'Valid User') {\n                alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n                return this.signOut();\n            };\n        } catch (err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public signOut(): boolean {\n        this.setUser(null);\n        localStorage.removeItem('SerendyToken');\n        return true;\n    };\n};\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}