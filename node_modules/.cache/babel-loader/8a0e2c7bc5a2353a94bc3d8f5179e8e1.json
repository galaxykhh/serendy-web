{"ast":null,"code":"import { action, computed, makeObservable, observable, runInAction } from \"mobx\";\nimport authRepository from '../repository/authRepository';\n\nclass UserStore {\n  constructor() {\n    this._user = null;\n    this._userSocket = null;\n    this._socketID = null;\n    this.isLogging = false;\n    makeObservable(this, {\n      _user: observable,\n      _userSocket: observable,\n      _socketID: observable,\n      isLogging: observable,\n      user: computed,\n      userSocket: computed,\n      socketID: computed,\n      setUser: action,\n      signInWithToken: action,\n      signIn: action,\n      signOut: action,\n      changePW: action,\n      setIsLogging: action,\n      setUserSocket: action,\n      setSocketID: action\n    });\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  get userSocket() {\n    return this._userSocket;\n  }\n\n  get socketID() {\n    return this._socketID;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  setIsLogging(boolean) {\n    this.isLogging = boolean;\n  }\n\n  setUserSocket(data) {\n    this._userSocket = data;\n  }\n\n  setSocketID(myID) {\n    this._socketID = myID;\n  }\n\n  saveSocketID() {\n    var _this$userSocket, _this$userSocket2;\n\n    (_this$userSocket = this.userSocket) === null || _this$userSocket === void 0 ? void 0 : _this$userSocket.emit('enter');\n    (_this$userSocket2 = this.userSocket) === null || _this$userSocket2 === void 0 ? void 0 : _this$userSocket2.on('entered', myID => {\n      this.setSocketID(myID);\n    });\n  }\n\n  // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n  // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n  // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n  async signInWithToken() {\n    this.setIsLogging(true);\n\n    try {\n      const token = localStorage.getItem('SerendyToken');\n\n      if (token) {\n        const {\n          data: {\n            message,\n            account,\n            nickName,\n            token\n          }\n        } = await authRepository.signInWidthToken();\n        runInAction(() => {\n          if (message === 'SignIn Success') {\n            this.setUser({\n              account,\n              nickName\n            });\n            localStorage.setItem('SerendyToken', token);\n            this.setIsLogging(false);\n            return true;\n          }\n\n          ;\n        });\n      }\n\n      ;\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    } finally {\n      this.setIsLogging(false);\n      return false;\n    }\n\n    ;\n  }\n\n  async signIn(userData) {\n    this.setIsLogging(true);\n\n    try {\n      const {\n        data: {\n          message,\n          account,\n          nickName,\n          token\n        }\n      } = await authRepository.signIn(userData);\n      runInAction(() => {\n        if (message === 'SignIn Success') {\n          this.setUser({\n            account,\n            nickName\n          });\n          localStorage.setItem('SerendyToken', token);\n          this.setIsLogging(false);\n          return true;\n        }\n\n        ;\n      });\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n      return false;\n    }\n  }\n\n  signOut() {\n    this.setUser({\n      account: null,\n      nickName: null\n    });\n    localStorage.removeItem('SerendyToken');\n    return true;\n  }\n\n  async changePW(data) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = await authRepository.changePassword(data);\n      runInAction(() => {\n        if (message === 'Changed') {\n          alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n          this.signOut();\n        }\n\n        ;\n      });\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  async changeName(nickName) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = await authRepository.changeName(nickName);\n      runInAction(() => {\n        if (message === 'Changed') {\n          alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`);\n          this.signOut();\n        }\n\n        ;\n      });\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  async findPW(data) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = await authRepository.findPW(data);\n      runInAction(() => {\n        if (message === 'Not Exist') {\n          alert('일치하는 정보가 없습니다');\n          return;\n        }\n\n        if (message === 'Valid User') {\n          alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n        }\n\n        ;\n      });\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n}\n\n;\nconst userStore = new UserStore();\nexport default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","makeObservable","observable","runInAction","authRepository","UserStore","constructor","_user","_userSocket","_socketID","isLogging","user","userSocket","socketID","setUser","signInWithToken","signIn","signOut","changePW","setIsLogging","setUserSocket","setSocketID","boolean","data","myID","saveSocketID","emit","on","token","localStorage","getItem","message","account","nickName","signInWidthToken","setItem","err","alert","userData","removeItem","changePassword","changeName","findPW","userStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable, runInAction } from \"mobx\";\nimport authRepository from '../repository/authRepository';\nimport { ISignInData, IPassword, INickName, IFindPW, IUserStore, IUser } from '../interfaces';\nimport { Socket } from 'socket.io-client';\n\nclass UserStore implements IUserStore {\n    private _user: IUser | null = null;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n    public isLogging: boolean = false;\n\n    constructor() {\n        makeObservable<UserStore, '_user' | '_userSocket' | '_socketID'>(this, {\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: observable,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setUser: action,\n            signInWithToken: action,\n            signIn: action,\n            signOut: action,\n            changePW: action,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action,\n        });\n    };\n\n    public get user(): IUser | null {\n        return this._user;\n    };\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    };\n\n    public get socketID(): string | null {\n        return this._socketID;\n    };\n\n    public setUser(user: IUser): void {\n        this._user = user;\n    };\n\n    public setIsLogging(boolean: boolean): void {\n        this.isLogging = boolean;\n    };\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    };\n\n    public setSocketID(myID: string | null): void {\n        this._socketID = myID;\n    };\n\n    public saveSocketID(): void {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('entered', myID => {\n            this.setSocketID(myID);\n        });\n    };\n\n    // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n    // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n    // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n    public async signInWithToken(): Promise<boolean> {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (token) {\n                const { data: {message, account, nickName, token}} = await authRepository.signInWidthToken();\n                runInAction(() => {\n                    if (message === 'SignIn Success') {\n                        this.setUser({ account , nickName });\n                        localStorage.setItem('SerendyToken', token);\n                        this.setIsLogging(false);\n                        return true;\n                    };\n                });\n            };\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        } finally {\n            this.setIsLogging(false);\n            return false;\n        };\n    };\n\n    public async signIn(userData: ISignInData): Promise<boolean | undefined> {\n        this.setIsLogging(true);\n        try {\n            const { data: { message, account, nickName, token }} = await authRepository.signIn(userData);\n            runInAction(() => {\n                if (message === 'SignIn Success') {\n                    this.setUser({ account, nickName });\n                    localStorage.setItem('SerendyToken', token);\n                    this.setIsLogging(false);\n                    return true;\n                };\n            });\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n            return false;\n        } \n    };\n\n    public signOut(): true {\n        this.setUser({ account: null, nickName: null });\n        localStorage.removeItem('SerendyToken');\n        return true\n    };\n\n    public async changePW(data: IPassword): Promise<void> {\n        try {\n            const { data: { message }} = await authRepository.changePassword(data);\n            runInAction(() => {\n                if (message === 'Changed') {\n                    alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n                    this.signOut();\n                };\n            });\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public async changeName(nickName: INickName): Promise<void> {\n        try {\n            const { data: { message }} = await authRepository.changeName(nickName);\n            runInAction(() => {\n                if (message === 'Changed') {\n                    alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`)\n                    this.signOut();\n                };\n            });\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public async findPW(data: IFindPW): Promise<void> {\n        try {\n            const { data: { message }} = await authRepository.findPW(data);\n            runInAction(() => {\n                if (message === 'Not Exist') {\n                    alert('일치하는 정보가 없습니다');\n                    return \n                }\n                if (message === 'Valid User') {\n                    alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n                };\n            });        \n        } catch (err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n};\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}