{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport userStore from '../store/userStore';\nimport postRepository from '../repository/postRepository';\n;\n;\n;\nexport const usePost = () => {\n  _s();\n\n  const postArea = useRef(null);\n  const commentArea = useRef(null);\n  const [isSent, setIsSent] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sentPosts, setSentPosts] = useState([]);\n  const [receivedPosts, setReceivedPosts] = useState([]);\n  const [currentPost, setCurrentPost] = useState();\n\n  const handleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  const handlePost = async () => {\n    try {\n      var _userStore$user, _userStore$user2, _postArea$current, _postArea$current2;\n\n      const data = {\n        account: (_userStore$user = userStore.user) === null || _userStore$user === void 0 ? void 0 : _userStore$user.account,\n        nickName: (_userStore$user2 = userStore.user) === null || _userStore$user2 === void 0 ? void 0 : _userStore$user2.nickName,\n        content: (_postArea$current = postArea.current) === null || _postArea$current === void 0 ? void 0 : _postArea$current.value\n      };\n\n      if (((_postArea$current2 = postArea.current) === null || _postArea$current2 === void 0 ? void 0 : _postArea$current2.value) === '') {\n        return;\n      }\n\n      const response = await postRepository.sendPost(data);\n\n      if (response.data.message === 'Send Success') {\n        setIsSent(true);\n      }\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  };\n\n  const getSentPosts = async () => {\n    setIsLoading(true);\n\n    try {\n      var _userStore$user3;\n\n      const response = await postRepository.getSentPosts((_userStore$user3 = userStore.user) === null || _userStore$user3 === void 0 ? void 0 : _userStore$user3.account);\n      const data = response.data;\n      setSentPosts(data);\n      setIsLoading(false);\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n\n    ;\n  };\n\n  const getReceivedPosts = async () => {\n    setIsLoading(true);\n\n    try {\n      var _userStore$user4;\n\n      const response = await postRepository.getReceivePosts((_userStore$user4 = userStore.user) === null || _userStore$user4 === void 0 ? void 0 : _userStore$user4.account);\n      const posts = response.data;\n      setReceivedPosts(posts);\n      setIsLoading(false);\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n\n    ;\n  };\n\n  const handleSentOne = _id => {\n    const post = sentPosts.findIndex(x => x._id === _id);\n    setCurrentPost(sentPosts[post]);\n  };\n\n  const handleReceivedOne = _id => {\n    const post = receivedPosts.findIndex(x => x._id === _id);\n    setCurrentPost(receivedPosts[post]);\n  };\n\n  const sendComment = async () => {\n    try {\n      var _userStore$user5, _commentArea$current, _commentArea$current2;\n\n      const data = {\n        _id: currentPost === null || currentPost === void 0 ? void 0 : currentPost._id,\n        toAccount: currentPost === null || currentPost === void 0 ? void 0 : currentPost.toAccount,\n        nickName: (_userStore$user5 = userStore.user) === null || _userStore$user5 === void 0 ? void 0 : _userStore$user5.nickName,\n        content: (_commentArea$current = commentArea.current) === null || _commentArea$current === void 0 ? void 0 : _commentArea$current.value\n      };\n\n      if (((_commentArea$current2 = commentArea.current) === null || _commentArea$current2 === void 0 ? void 0 : _commentArea$current2.value) === '') {\n        return;\n      }\n\n      const response = await postRepository.sendComment(data);\n\n      if (response.data.message === 'Success') {\n        const posts = response.data.data;\n        setReceivedPosts(posts.posts);\n        console.log(1);\n        handleReceivedOne(data._id);\n        console.log(2);\n        commentArea.current.value = '';\n      }\n    } catch (err) {\n      console.log(err);\n      alert('서버 점검중입니다');\n    }\n\n    ;\n  };\n\n  return {\n    isLoading,\n    isSent,\n    postArea,\n    commentArea,\n    sentPosts,\n    receivedPosts,\n    currentPost,\n    handleLoading,\n    setIsSent,\n    handlePost,\n    getSentPosts,\n    getReceivedPosts,\n    handleSentOne,\n    handleReceivedOne,\n    sendComment\n  };\n};\n\n_s(usePost, \"0dAypTMxDSGP7NRag4q8cONHruk=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/usePost.ts"],"names":["useRef","useState","userStore","postRepository","usePost","postArea","commentArea","isSent","setIsSent","isLoading","setIsLoading","sentPosts","setSentPosts","receivedPosts","setReceivedPosts","currentPost","setCurrentPost","handleLoading","handlePost","data","account","user","nickName","content","current","value","response","sendPost","message","err","alert","getSentPosts","console","log","getReceivedPosts","getReceivePosts","posts","handleSentOne","_id","post","findIndex","x","handleReceivedOne","sendComment","toAccount"],"mappings":"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","sourcesContent":["\nimport { useRef, useState } from 'react'\nimport userStore from '../store/userStore';\nimport postRepository from '../repository/postRepository';\nimport { IComment } from '../components/SenderPage/View';\n\nexport interface ISendComment {\n    _id: string | undefined;\n    toAccount: string | undefined;\n    nickName: string | null | undefined;\n    content: string | undefined;\n};\n\nexport interface ISendPost {\n    account: string | null | undefined;\n    nickName: string | null | undefined;\n    content: string | undefined;\n};\n\nexport interface ICurrentPost {\n    _id: string;\n    toAccount: string;\n    nickName: string;\n    fromAccount: string;\n    content: string;\n    comment: IComment | undefined;\n};\n\nexport const usePost = () => {\n    const postArea = useRef<HTMLTextAreaElement>(null);\n    const commentArea = useRef<HTMLTextAreaElement>(null);\n\n    const [isSent, setIsSent] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [sentPosts, setSentPosts] = useState<any[]>([]);\n    const [receivedPosts, setReceivedPosts] = useState<any[]>([]);\n    const [currentPost, setCurrentPost] = useState<ICurrentPost>();\n\n    const handleLoading = (): void => {\n        setIsLoading(!isLoading);\n    };\n\n    const handlePost = async (): Promise<void> => {\n        try {\n            const data = {\n                account: userStore.user?.account,\n                nickName: userStore.user?.nickName,\n                content: postArea.current?.value,\n            }\n            if (postArea.current?.value === '' ) {\n                return;\n            }\n            const response = await postRepository.sendPost(data);\n            if ((response.data.message === 'Send Success')) {\n                setIsSent(true);\n            }\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    const getSentPosts = async (): Promise<void> => {\n        setIsLoading(true);\n        try {\n            const response = await postRepository.getSentPosts(userStore.user?.account);\n            const data = response.data;\n            setSentPosts(data);\n            setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            return;\n        };\n    };\n\n    const getReceivedPosts = async (): Promise<void> => {\n        setIsLoading(true);\n        try {\n            const response = await postRepository.getReceivePosts(userStore.user?.account);\n            const posts = response.data;\n            setReceivedPosts(posts);\n            setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            return;\n        };\n    };\n\n    const handleSentOne = (_id: string): void => {\n        const post = sentPosts.findIndex(x => x._id === _id);\n        setCurrentPost(sentPosts[post]);\n    };\n\n    const handleReceivedOne = (_id: string): void => {\n        const post = receivedPosts.findIndex(x => x._id === _id);\n        setCurrentPost(receivedPosts[post]);\n    };\n\n    const sendComment = async (): Promise<void> => {\n        try {\n            const data = {\n                _id: currentPost?._id,\n                toAccount: currentPost?.toAccount,\n                nickName: userStore.user?.nickName,\n                content: commentArea.current?.value,\n            }\n            if (commentArea.current?.value === '') {\n                return;\n            }\n            const response = await postRepository.sendComment(data);\n            if ((response.data.message === 'Success')) {\n                const posts = response.data.data;\n                setReceivedPosts(posts.posts);\n                console.log(1);\n                handleReceivedOne(data._id!);\n                console.log(2);\n                commentArea.current!.value = '';\n            }\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    return {\n        isLoading,\n        isSent,\n        postArea,\n        commentArea,\n        sentPosts,\n        receivedPosts,\n        currentPost,\n        handleLoading,\n        setIsSent,\n        handlePost,\n        getSentPosts,\n        getReceivedPosts,\n        handleSentOne,\n        handleReceivedOne,\n        sendComment,\n    };\n};"]},"metadata":{},"sourceType":"module"}