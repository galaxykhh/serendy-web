{"ast":null,"code":"import { action, computed, makeObservable, observable } from \"mobx\";\nimport serendyRepository from '../repository/serendyRepository';\n\nclass UserStore {\n  constructor() {\n    this._isSignIn = false;\n    this._user = null;\n    this._isLogging = false;\n    this._userSocket = null;\n    this._socketID = null;\n    this.strangerId = null;\n    makeObservable(this, {\n      _isLogging: observable,\n      _isSignIn: observable,\n      _user: observable,\n      _userSocket: observable,\n      _socketID: observable,\n      strangerId: observable,\n      isLogging: computed,\n      isSignIn: computed,\n      user: computed,\n      userSocket: computed,\n      socketID: computed,\n      setIsSignIn: action,\n      setUser: action,\n      signInWithToken: action,\n      signIn: action,\n      signOut: action,\n      setIsLogging: action,\n      setUserSocket: action,\n      setSocketID: action.bound\n    });\n  }\n\n  get isSignIn() {\n    return this._isSignIn;\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  get isLogging() {\n    return this._isLogging;\n  }\n\n  get userSocket() {\n    return this._userSocket;\n  }\n\n  get socketID() {\n    return this._socketID;\n  }\n\n  setIsSignIn() {\n    this._isSignIn = true;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  setIsLogging(boolean) {\n    this._isLogging = boolean;\n  }\n\n  setUserSocket(data) {\n    this._userSocket = data;\n  }\n\n  setSocketID(data) {\n    this._socketID = data;\n  }\n\n  saveSocketID() {\n    var _this$userSocket, _this$userSocket2;\n\n    (_this$userSocket = this.userSocket) === null || _this$userSocket === void 0 ? void 0 : _this$userSocket.emit('enter');\n    (_this$userSocket2 = this.userSocket) === null || _this$userSocket2 === void 0 ? void 0 : _this$userSocket2.on('enter', myID => {\n      this.setSocketID(myID);\n    });\n  }\n\n  getStrangerId(id) {\n    this.strangerId = id;\n  } // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n  // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n  // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n\n\n  async signInWithToken() {\n    this.setIsLogging(true);\n\n    try {\n      const token = localStorage.getItem('SerendyToken');\n\n      if (!token) {\n        this.setIsLogging(false);\n        return;\n      } else if (token) {\n        const response = await serendyRepository.signInWidthToken();\n\n        if (response.data.message === 'Invalid Token') {\n          // 토큰만료 또는 없음\n          this.setIsLogging(false);\n          return;\n        } else if (response.data.message === 'SignIn Success') {\n          this.setUser(response.data.nickName);\n          this.setIsSignIn();\n          localStorage.setItem('SerendyToken', response.data.token);\n          this.setIsLogging(false);\n        }\n      }\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n  }\n\n  async signIn(userData, setError, push) {\n    this.setIsLogging(true);\n\n    try {\n      const response = await serendyRepository.signIn(userData);\n\n      if (response.data.message === 'SignIn Fail') {\n        this.setIsLogging(false);\n        setError();\n      } else if (response.data.message === 'SignIn Success') {\n        this.setUser(response.data.nickName);\n        this.setIsSignIn();\n        localStorage.setItem('SerendyToken', response.data.token);\n        this.setIsLogging(false);\n        push();\n      }\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('서버 점검중입니다');\n    }\n  }\n\n  signOut(push) {\n    this._isSignIn = false;\n    this._user = null;\n    localStorage.removeItem('SerendyToken');\n    push();\n  }\n\n}\n\nconst userStore = new UserStore();\nexport default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","makeObservable","observable","serendyRepository","UserStore","constructor","_isSignIn","_user","_isLogging","_userSocket","_socketID","strangerId","isLogging","isSignIn","user","userSocket","socketID","setIsSignIn","setUser","signInWithToken","signIn","signOut","setIsLogging","setUserSocket","setSocketID","bound","boolean","data","saveSocketID","emit","on","myID","getStrangerId","id","token","localStorage","getItem","response","signInWidthToken","message","nickName","setItem","err","alert","userData","setError","push","removeItem","userStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport { ISignInData } from '../components/SignIn/SignInBox';\nimport serendyRepository from '../repository/serendyRepository';\nimport { Socket } from 'socket.io-client';\n\ninterface IUser {\n    nickName: string;\n}\n\ninterface IUserStore {\n    isLogging: boolean;\n    isSignIn: boolean;\n    user: IUser | null;\n    userSocket: Socket | null;\n    socketID: string | null;\n}\n\nclass UserStore implements IUserStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | null = null;\n    private _isLogging: boolean = false;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n    strangerId: string | null = null;\n\n    constructor() {\n        makeObservable<UserStore, '_isLogging' | '_isSignIn' | '_user' | '_userSocket' | '_socketID'>(this, {\n            _isLogging: observable,\n            _isSignIn: observable,\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            strangerId: observable,\n            isLogging: computed,\n            isSignIn: computed,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setIsSignIn: action,\n            setUser: action,\n            signInWithToken: action,\n            signIn: action,\n            signOut: action,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action.bound,\n        })\n    }\n\n    public get isSignIn(): boolean {\n        return this._isSignIn;\n    }\n\n    public get user(): IUser | null {\n        return this._user;\n    }\n\n    public get isLogging(): boolean {\n        return this._isLogging;\n    }\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    }\n\n    public get socketID(): string | null {\n        return this._socketID;\n    }\n\n    public setIsSignIn(): void {\n        this._isSignIn = true;\n    }\n\n    public setUser(user: IUser): void {\n        this._user = user;\n    }\n\n    public setIsLogging(boolean: boolean): void {\n        this._isLogging = boolean;\n    }\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    }\n\n    public setSocketID(data: string | null): void {\n        this._socketID = data;\n    }\n\n    public saveSocketID() {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('enter', myID => {\n            this.setSocketID(myID);\n        });\n    }\n\n    public getStrangerId(id: string | null): void {\n        this.strangerId = id;\n    }\n\n    \n\n    // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n    // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n    // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n    async signInWithToken() {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (!token) {\n                this.setIsLogging(false);\n                return;\n            } else if (token) {\n                const response = await serendyRepository.signInWidthToken();\n                if ((response.data.message === 'Invalid Token')) { // 토큰만료 또는 없음\n                    this.setIsLogging(false);\n                    return;\n                } else if ((response.data.message === 'SignIn Success')) {\n                    this.setUser(response.data.nickName);\n                    this.setIsSignIn();\n                    localStorage.setItem('SerendyToken', response.data.token);\n                    this.setIsLogging(false);\n                }\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다')\n        }\n    }\n\n    async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        this.setIsLogging(true);\n        try {\n            const response = await serendyRepository.signIn(userData);\n            if ((response.data.message === 'SignIn Fail')) {\n                this.setIsLogging(false);\n                setError();\n            } else if ((response.data.message === 'SignIn Success')) {\n                this.setUser(response.data.nickName);\n                this.setIsSignIn();\n                localStorage.setItem('SerendyToken', response.data.token);\n                this.setIsLogging(false);\n                push();\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        }\n    }\n\n    signOut(push: () => void): void {\n        this._isSignIn = false;\n        this._user = null;\n        localStorage.removeItem('SerendyToken');\n        push();\n    }\n}\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}