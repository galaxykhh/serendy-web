{"ast":null,"code":"import { action, computed, makeObservable, observable } from \"mobx\";\nimport serendyRepository from '../repository/serendyRepository';\n\nclass AuthStore {\n  constructor() {\n    this._isSignIn = false;\n    this._user = null;\n    makeObservable(this, {\n      _isSignIn: observable,\n      _user: observable,\n      isSignIn: computed,\n      user: computed,\n      setIsSignIn: action.bound,\n      setUser: action,\n      signInWithToken: action.bound,\n      signIn: action.bound,\n      signOut: action.bound\n    });\n  }\n\n  get isSignIn() {\n    return this._isSignIn;\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  setIsSignIn() {\n    this._isSignIn = true;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  async signInWithToken() {\n    const token = localStorage.getItem('SerendyToken');\n\n    if (!token) {\n      return;\n    } else if (token) {\n      const response = await serendyRepository.signInWidthToken(token);\n\n      if (response.data.message === 'Invalid Token') {\n        console.log('invalid token');\n        return;\n      } else if (response.data.message === 'SignIn Fail') {\n        return;\n      } else if (response.data.message === 'SignIn Success') {\n        this.setUser(response.data.nickName);\n        this.setIsSignIn();\n      }\n    }\n  }\n\n  async signIn(userData, setError, push) {\n    try {\n      const response = await serendyRepository.signIn(userData);\n      console.log(response);\n\n      if (response.data.message === 'SignIn Fail') {\n        console.log('fail');\n        setError();\n      } else if (response.data.message === 'SignIn Success') {\n        this.setUser(response.data.nickName);\n        this.setIsSignIn();\n        localStorage.setItem('SerendyToken', response.data.token);\n        push();\n      }\n    } catch (err) {\n      alert('현재 서버가 점검중입니다');\n    }\n  }\n\n  signOut(push) {\n    this._isSignIn = false;\n    this._user = null;\n    localStorage.removeItem('SerendyToken');\n    push();\n  }\n\n}\n\nconst authStore = new AuthStore();\nexport default authStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/authStore.ts"],"names":["action","computed","makeObservable","observable","serendyRepository","AuthStore","constructor","_isSignIn","_user","isSignIn","user","setIsSignIn","bound","setUser","signInWithToken","signIn","signOut","token","localStorage","getItem","response","signInWidthToken","data","message","console","log","nickName","userData","setError","push","setItem","err","alert","removeItem","authStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport { ISignInData } from '../components/SignIn/SignInBox';\nimport serendyRepository from '../repository/serendyRepository';\n\ninterface IUser {\n    nickName: string;\n}\n\ninterface IAuthStore {\n    isSignIn: boolean;\n    user: IUser | null;\n}\n\nclass AuthStore implements IAuthStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | null = null;\n\n    constructor() {\n        makeObservable<AuthStore, '_isSignIn' | '_user'>(this, {\n            _isSignIn: observable,\n            _user: observable,\n            isSignIn: computed,\n            user: computed,\n            setIsSignIn: action.bound,\n            setUser: action,\n            signInWithToken: action.bound,\n            signIn: action.bound,\n            signOut: action.bound,\n        })\n    }\n\n    get isSignIn(): boolean {\n        return this._isSignIn;\n    }\n\n    get user(): IUser | null {\n        return this._user;\n    }\n\n    setIsSignIn(): void {\n        this._isSignIn = true;\n    }\n\n    setUser(user: IUser): void {\n        this._user = user;\n    }\n\n    async signInWithToken() {\n        const token = localStorage.getItem('SerendyToken');\n        \n        if (!token) {\n            return;\n        } else if (token) {\n            const response = await serendyRepository.signInWidthToken(token);\n            if ((response.data.message === 'Invalid Token')) {\n                console.log('invalid token')\n                return;\n            } else if ((response.data.message === 'SignIn Fail')) {\n                return;\n            } else if ((response.data.message === 'SignIn Success')) {\n                this.setUser(response.data.nickName);\n                this.setIsSignIn();\n            }\n        }\n    }\n\n    async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        try {\n            const response = await serendyRepository.signIn(userData);\n            console.log(response);\n            if ((response.data.message === 'SignIn Fail')) {\n                console.log('fail');\n                setError();\n            } else if ((response.data.message === 'SignIn Success')) {\n                this.setUser(response.data.nickName);\n                this.setIsSignIn();\n                localStorage.setItem('SerendyToken', response.data.token);\n                push();\n            }\n        } catch(err) {\n            alert('현재 서버가 점검중입니다');\n        }\n    }\n\n    signOut(push: () => void): void {\n        this._isSignIn = false;\n        this._user = null;\n        localStorage.removeItem('SerendyToken');\n        push();\n    }\n}\n\nconst authStore = new AuthStore();\nexport default authStore;"]},"metadata":{},"sourceType":"module"}