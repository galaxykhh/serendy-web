{"ast":null,"code":"var _jsxFileName = \"/Users/hyeonghan/VSCode/React/Serendy/client/src/components/ChatPage/ChatWindow.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport styled from 'styled-components';\nimport { useChat } from '../../Hooks/useChat';\nimport { zoomIn, zoomOut } from '../../style/keyframes';\nimport userStore from '../../store/userStore';\nimport MessageBox from './MessageBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatWindow = () => {\n  _s();\n\n  const sendBtn = useRef(null);\n  const input = useRef(null);\n  const screen = useRef(null);\n  const chat = useChat();\n  return /*#__PURE__*/_jsxDEV(ChatBox, {\n    animation: chat.isMatched ? zoomIn : zoomOut,\n    visibility: chat.display,\n    children: [/*#__PURE__*/_jsxDEV(Screen, {\n      ref: screen,\n      children: chat.chatLog.map((data, index) => /*#__PURE__*/_jsxDEV(MessageBox, {\n        message: data.message,\n        nickName: data.nickName,\n        socketID: data.socketID === userStore.socketID\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SenderBox, {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: input,\n        onKeyPress: chat.handleEnter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SendBtn, {\n        ref: sendBtn,\n        onClick: chat.handleSendMsg,\n        disabled: chat.isFinished ? true : false,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatWindow, \"Rb4iXiduBQxd4rS0c8F2+JKqnik=\", false, function () {\n  return [useChat];\n});\n\n_c = ChatWindow;\nexport default ChatWindow;\nconst ChatBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-right: 20px;\n    width: 100%;\n    height: 740px;\n    min-height: 740px;\n    visibility: ${({\n  visibility\n}) => visibility};\n    animation: ${({\n  animation\n}) => animation} .7s ease forwards;\n    @media only screen and (max-width: 1450px) {\n        margin-right: 0px;\n        min-height: 340px;\n    };\n    @media only screen and (max-width: 600px) {\n        height: 100%;\n    };\n`;\n_c2 = ChatBox;\nconst Screen = styled.div`\n    width: 740px;\n    height: 680px;\n    max-height: 680px;\n    background-color: ${({\n  theme\n}) => theme.colors.white10};\n    border-radius: 10px;\n    overflow-y: auto;\n    @media only screen and (max-width: 1450px) {\n        width: 99%;\n        height: 70%;\n        min-width: 300px;\n    };\n`;\n_c3 = Screen;\nconst SenderBox = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 10px;\n    width: 740px;\n    min-width: 500px;\n    height: 50px;\n    @media only screen and (max-width: 1450px) {\n        width: 99%;\n        min-width: 200px;\n    };\n`;\n_c4 = SenderBox;\nconst Input = styled.input.attrs({\n  type: 'text',\n  placeholder: '내용을 입력해주세요',\n  autocomplete: 'off'\n})`\n    all: unset;\n    width: 84%;\n    min-height: 50px;\n    padding-left: 30px;\n    font-size: 18px;\n    color: ${({\n  theme\n}) => theme.colors.white};\n    background-color: ${({\n  theme\n}) => theme.colors.white10};\n    border-radius: 10px;\n    @media only screen and (max-width: 600px) {\n        width: 70%;\n        font-size: 15px;\n    };\n`;\n_c5 = Input;\nconst SendBtn = styled.button`\n    all: unset;\n    width: 10%;\n    height: 50px;\n    font-size: 18px;\n    text-align: center;\n    background-color: ${({\n  theme\n}) => theme.colors.main60};\n    border-radius: 10px;\n    color: ${({\n  theme\n}) => theme.colors.white};\n    cursor: pointer;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({\n  theme\n}) => theme.colors.plum};\n        color: ${({\n  theme\n}) => theme.colors.black};\n    }\n    @media only screen and (max-width: 1450px) {\n        font-size: 15px;\n        width: 10%;\n    };\n    @media only screen and (max-width: 600px) {\n        width: 18%;\n    };\n`;\n_c6 = SendBtn;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"ChatWindow\");\n$RefreshReg$(_c2, \"ChatBox\");\n$RefreshReg$(_c3, \"Screen\");\n$RefreshReg$(_c4, \"SenderBox\");\n$RefreshReg$(_c5, \"Input\");\n$RefreshReg$(_c6, \"SendBtn\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/components/ChatPage/ChatWindow.tsx"],"names":["React","useRef","styled","useChat","zoomIn","zoomOut","userStore","MessageBox","ChatWindow","sendBtn","input","screen","chat","isMatched","display","chatLog","map","data","index","message","nickName","socketID","handleEnter","handleSendMsg","isFinished","ChatBox","div","visibility","animation","Screen","theme","colors","white10","SenderBox","Input","attrs","type","placeholder","autocomplete","white","SendBtn","button","main60","plum","black"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react'\nimport styled, { Keyframes } from 'styled-components'\nimport { useChat } from '../../Hooks/useChat'\nimport { VisibilityType } from '../../interfaces'\nimport { zoomIn, zoomOut } from '../../style/keyframes'\nimport userStore from '../../store/userStore'\nimport MessageBox from './MessageBox'\n\nconst ChatWindow: React.FC = () => {\n    const sendBtn = useRef<HTMLButtonElement>(null);\n    const input = useRef<HTMLInputElement>(null);\n    const screen = useRef<HTMLDivElement>(null);\n    const chat = useChat();\n    return (\n        <ChatBox animation={chat.isMatched ? zoomIn : zoomOut}\n            visibility={chat.display}\n        >\n            <Screen ref={screen} >\n                {chat.chatLog.map((data, index) => (\n                    <MessageBox message={data.message}\n                        nickName={data.nickName}\n                        socketID={data.socketID === userStore.socketID}\n                        key={index}\n                    />\n                ))}\n            </Screen>\n            <SenderBox>\n                <Input ref={input}\n                    onKeyPress={chat.handleEnter}\n                />\n                <SendBtn ref={sendBtn}\n                    onClick={chat.handleSendMsg}\n                    disabled={chat.isFinished ? true : false}\n                >\n                    전송\n                </SendBtn>\n            </SenderBox>\n        </ChatBox>\n    );\n};\n\nexport default ChatWindow;\n\nconst ChatBox = styled.div<{ animation: Keyframes, visibility: VisibilityType }>`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin-right: 20px;\n    width: 100%;\n    height: 740px;\n    min-height: 740px;\n    visibility: ${({ visibility }) => visibility};\n    animation: ${({ animation }) => animation} .7s ease forwards;\n    @media only screen and (max-width: 1450px) {\n        margin-right: 0px;\n        min-height: 340px;\n    };\n    @media only screen and (max-width: 600px) {\n        height: 100%;\n    };\n`;\n\nconst Screen = styled.div`\n    width: 740px;\n    height: 680px;\n    max-height: 680px;\n    background-color: ${({ theme }) => theme.colors.white10};\n    border-radius: 10px;\n    overflow-y: auto;\n    @media only screen and (max-width: 1450px) {\n        width: 99%;\n        height: 70%;\n        min-width: 300px;\n    };\n`;\n\nconst SenderBox = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 10px;\n    width: 740px;\n    min-width: 500px;\n    height: 50px;\n    @media only screen and (max-width: 1450px) {\n        width: 99%;\n        min-width: 200px;\n    };\n`;\n\nconst Input = styled.input.attrs(({\n    type: 'text',\n    placeholder: '내용을 입력해주세요',\n    autocomplete: 'off',\n}))`\n    all: unset;\n    width: 84%;\n    min-height: 50px;\n    padding-left: 30px;\n    font-size: 18px;\n    color: ${({ theme }) => theme.colors.white};\n    background-color: ${({ theme }) => theme.colors.white10};\n    border-radius: 10px;\n    @media only screen and (max-width: 600px) {\n        width: 70%;\n        font-size: 15px;\n    };\n`;\n\nconst SendBtn = styled.button`\n    all: unset;\n    width: 10%;\n    height: 50px;\n    font-size: 18px;\n    text-align: center;\n    background-color: ${({ theme }) => theme.colors.main60};\n    border-radius: 10px;\n    color: ${({ theme }) => theme.colors.white};\n    cursor: pointer;\n    transition: .3s ease;\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.plum};\n        color: ${({ theme }) => theme.colors.black};\n    }\n    @media only screen and (max-width: 1450px) {\n        font-size: 15px;\n        width: 10%;\n    };\n    @media only screen and (max-width: 600px) {\n        width: 18%;\n    };\n`;"]},"metadata":{},"sourceType":"module"}