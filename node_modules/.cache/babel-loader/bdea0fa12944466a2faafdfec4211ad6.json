{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport userStore from '../store/userStore';\nexport const useChat = () => {\n  _s();\n\n  const [isSearching, setIsSearching] = useState(false);\n  const [isMatched, setIsMatched] = useState(false);\n  const [display, setDisplay] = useState('hidden');\n  const sendBtn = useRef(null);\n  const input = useRef(null);\n\n  const handleEnter = e => {\n    if (e.key === 'Enter') {\n      var _sendBtn$current;\n\n      (_sendBtn$current = sendBtn.current) === null || _sendBtn$current === void 0 ? void 0 : _sendBtn$current.click();\n    }\n  };\n\n  const showChat = () => {\n    setDisplay('visible');\n  };\n\n  const handleBtn = () => {\n    setIsSearching(!isSearching);\n    setIsMatched(!isMatched); // 채팅개발하게되면 수정\n  };\n\n  const handleSearch = () => {\n    if (display === 'hidden') {\n      showChat();\n      handleBtn();\n    } else {\n      handleBtn();\n    }\n  };\n\n  const handleMatch = () => {\n    setIsMatched(true);\n  };\n\n  const handleSendMsg = () => {\n    var _input$current;\n\n    if (((_input$current = input.current) === null || _input$current === void 0 ? void 0 : _input$current.value.length) !== 0) {\n      var _input$current2, _userStore$userSocket;\n\n      const nickName = userStore.user;\n      console.log(nickName);\n      const message = (_input$current2 = input.current) === null || _input$current2 === void 0 ? void 0 : _input$current2.value;\n      console.log(message);\n      (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.emit('chat', nickName, message);\n      input.current.value = '';\n    } else {\n      return;\n    }\n  };\n\n  return {\n    isSearching,\n    isMatched,\n    display,\n    sendBtn,\n    input,\n    handleEnter,\n    handleSendMsg,\n    handleSearch,\n    handleMatch\n  };\n};\n\n_s(useChat, \"eEMjlmvZHRxU28jXznfIbRCQeRM=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/useChat.ts"],"names":["useState","useRef","userStore","useChat","isSearching","setIsSearching","isMatched","setIsMatched","display","setDisplay","sendBtn","input","handleEnter","e","key","current","click","showChat","handleBtn","handleSearch","handleMatch","handleSendMsg","value","length","nickName","user","console","log","message","userSocket","emit"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAU,KAAV,CAA9C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAiB,QAAjB,CAAtC;AACA,QAAMU,OAAO,GAAGT,MAAM,CAAoB,IAApB,CAAtB;AACA,QAAMU,KAAK,GAAGV,MAAM,CAAmB,IAAnB,CAApB;;AAEA,QAAMW,WAAW,GAAIC,CAAD,IAAkC;AAClD,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AAAA;;AACnB,0BAAAJ,OAAO,CAACK,OAAR,sEAAiBC,KAAjB;AACH;AACJ,GAJD;;AAMA,QAAMC,QAAQ,GAAG,MAAY;AACzBR,IAAAA,UAAU,CAAC,SAAD,CAAV;AACH,GAFD;;AAIA,QAAMS,SAAS,GAAG,MAAY;AAC1Bb,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACAG,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ,CAF0B,CAEA;AAC7B,GAHD;;AAKA,QAAMa,YAAY,GAAG,MAAY;AAC7B,QAAIX,OAAO,KAAK,QAAhB,EAA0B;AACtBS,MAAAA,QAAQ;AACRC,MAAAA,SAAS;AACZ,KAHD,MAGO;AACHA,MAAAA,SAAS;AACZ;AACJ,GAPD;;AASA,QAAME,WAAW,GAAG,MAAY;AAC5Bb,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMc,aAAa,GAAG,MAAY;AAAA;;AAC9B,QAAI,mBAAAV,KAAK,CAACI,OAAN,kEAAeO,KAAf,CAAqBC,MAArB,MAAgC,CAApC,EAAuC;AAAA;;AACnC,YAAMC,QAAQ,GAAGtB,SAAS,CAACuB,IAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,YAAMI,OAAO,sBAAGjB,KAAK,CAACI,OAAT,oDAAG,gBAAeO,KAA/B;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACA,+BAAA1B,SAAS,CAAC2B,UAAV,gFAAsBC,IAAtB,CAA2B,MAA3B,EAAmCN,QAAnC,EAA6CI,OAA7C;AACAjB,MAAAA,KAAK,CAACI,OAAN,CAAeO,KAAf,GAAuB,EAAvB;AACH,KAPD,MAOO;AACH;AACH;AACJ,GAXD;;AAeA,SAAO;AACHlB,IAAAA,WADG;AAEHE,IAAAA,SAFG;AAGHE,IAAAA,OAHG;AAIHE,IAAAA,OAJG;AAKHC,IAAAA,KALG;AAMHC,IAAAA,WANG;AAOHS,IAAAA,aAPG;AAQHF,IAAAA,YARG;AASHC,IAAAA;AATG,GAAP;AAWH,CA7DM;;GAAMjB,O","sourcesContent":["import { useState, useRef } from 'react'\nimport { VisibilityType } from '../type';\nimport userStore from '../store/userStore';\n\nexport const useChat = () => {\n    const [isSearching, setIsSearching] = useState<boolean>(false);\n    const [isMatched, setIsMatched] = useState<boolean>(false);\n    const [display, setDisplay] = useState<VisibilityType>('hidden');\n    const sendBtn = useRef<HTMLButtonElement>(null);\n    const input = useRef<HTMLInputElement>(null);\n\n    const handleEnter = (e: React.KeyboardEvent): void => {\n        if (e.key === 'Enter') {\n            sendBtn.current?.click();\n        }\n    }\n\n    const showChat = (): void => {\n        setDisplay('visible');\n    }\n\n    const handleBtn = (): void => {\n        setIsSearching(!isSearching);\n        setIsMatched(!isMatched); // 채팅개발하게되면 수정\n    };\n\n    const handleSearch = (): void => {\n        if (display === 'hidden') {\n            showChat();\n            handleBtn();\n        } else {\n            handleBtn();\n        }\n    };\n\n    const handleMatch = (): void => {\n        setIsMatched(true);\n    }\n\n    const handleSendMsg = (): void => {\n        if (input.current?.value.length !== 0) {\n            const nickName = userStore.user;\n            console.log(nickName);\n            const message = input.current?.value;\n            console.log(message);\n            userStore.userSocket?.emit('chat', nickName, message);\n            input.current!.value = ''\n        } else {\n            return;\n        }\n    }\n    \n\n\n    return {\n        isSearching,\n        isMatched,\n        display,\n        sendBtn,\n        input,\n        handleEnter,\n        handleSendMsg,\n        handleSearch,\n        handleMatch,\n    }\n}"]},"metadata":{},"sourceType":"module"}