{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport userStore from '../store/userStore';\nexport const useChat = () => {\n  _s();\n\n  const [isSearching, setIsSearching] = useState(false);\n  const [isMatched, setIsMatched] = useState(false);\n  const [isFinished, setIsFinished] = useState(false);\n  const [display, setDisplay] = useState('hidden');\n  const [chatLog, setChatLog] = useState([]);\n  const [recentChat, setRecentChat] = useState({\n    nickName: '',\n    message: '',\n    socketID: ''\n  });\n\n  const handleCancel = () => {\n    var _userStore$userSocket;\n\n    (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.emit('cancel');\n  };\n\n  const handleFind = () => {\n    var _userStore$userSocket2;\n\n    (_userStore$userSocket2 = userStore.userSocket) === null || _userStore$userSocket2 === void 0 ? void 0 : _userStore$userSocket2.emit('find');\n  };\n\n  const handleSearch = () => {\n    if (!isSearching) {\n      setIsSearching(true);\n      handleFind();\n    } else {\n      // 도중 취소\n      setIsSearching(false);\n      handleCancel();\n    }\n\n    ;\n  };\n\n  const getMatchedUser = () => {\n    var _userStore$userSocket3;\n\n    (_userStore$userSocket3 = userStore.userSocket) === null || _userStore$userSocket3 === void 0 ? void 0 : _userStore$userSocket3.on('matched', () => {\n      setIsMatched(true);\n      setDisplay('visible');\n      setChatLog([{\n        nickName: 'SERENDY',\n        message: '상대와 대화가 시작되었어요!',\n        socketID: 'admin'\n      }]);\n    });\n  };\n\n  const handleReceiveMsg = () => {\n    var _userStore$userSocket4;\n\n    (_userStore$userSocket4 = userStore.userSocket) === null || _userStore$userSocket4 === void 0 ? void 0 : _userStore$userSocket4.on('receive', (data, socketID) => {\n      setRecentChat({\n        nickName: data.nickName,\n        message: data.message,\n        socketID: socketID\n      });\n    });\n  };\n\n  const handlePushChat = () => {\n    recentChat.message.length > 0 && setChatLog([...chatLog, recentChat]);\n  };\n\n  const handleFinished = () => {\n    setIsFinished(true);\n    setRecentChat({\n      nickName: 'SERENDY',\n      message: '대화가 종료되었어요!',\n      socketID: 'admin'\n    });\n  };\n\n  const stopChat = () => {\n    var _userStore$userSocket5;\n\n    (_userStore$userSocket5 = userStore.userSocket) === null || _userStore$userSocket5 === void 0 ? void 0 : _userStore$userSocket5.emit('stop chat');\n    handleFinished();\n  };\n\n  const chatStopped = () => {\n    var _userStore$userSocket6;\n\n    (_userStore$userSocket6 = userStore.userSocket) === null || _userStore$userSocket6 === void 0 ? void 0 : _userStore$userSocket6.on('is ended', () => {\n      handleFinished();\n    });\n  };\n\n  const reStart = () => {\n    setChatLog([]);\n    setIsSearching(false);\n    setIsFinished(false);\n    setIsMatched(false);\n  };\n\n  return {\n    isSearching,\n    isMatched,\n    display,\n    chatLog,\n    recentChat,\n    isFinished,\n    setRecentChat,\n    setChatLog,\n    handleSearch,\n    handleReceiveMsg,\n    handlePushChat,\n    getMatchedUser,\n    stopChat,\n    setIsFinished,\n    reStart,\n    chatStopped\n  };\n};\n\n_s(useChat, \"jq6+JcALUDAMVWZqkyxmrTgVOWA=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/useChat.ts"],"names":["useState","userStore","useChat","isSearching","setIsSearching","isMatched","setIsMatched","isFinished","setIsFinished","display","setDisplay","chatLog","setChatLog","recentChat","setRecentChat","nickName","message","socketID","handleCancel","userSocket","emit","handleFind","handleSearch","getMatchedUser","on","handleReceiveMsg","data","handlePushChat","length","handleFinished","stopChat","chatStopped","reStart"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react'\nimport { VisibilityType, IRecentChat } from '../interfaces';\nimport userStore from '../store/userStore';\n\n\nexport const useChat = () => {\n    const [isSearching, setIsSearching] = useState<boolean>(false);\n    const [isMatched, setIsMatched] = useState<boolean>(false);\n    const [isFinished, setIsFinished] = useState<boolean>(false);\n    const [display, setDisplay] = useState<VisibilityType>('hidden');\n    const [chatLog, setChatLog] = useState<IRecentChat[]>([]);\n    const [recentChat, setRecentChat] = useState<IRecentChat>({ nickName: '', message: '', socketID: '' });\n\n    const handleCancel = (): void => {\n        userStore.userSocket?.emit('cancel');\n    };\n\n    const handleFind = (): void => {\n        userStore.userSocket?.emit('find');\n    };\n\n    const handleSearch = (): void => {\n        if (!isSearching) {\n            setIsSearching(true);\n            handleFind();\n        } else { // 도중 취소\n            setIsSearching(false);\n            handleCancel();\n        };\n    };\n\n    \n\n    const getMatchedUser = (): void => {\n        userStore.userSocket?.on('matched', () => {\n            setIsMatched(true);\n            setDisplay('visible');\n            setChatLog([{\n                nickName: 'SERENDY',\n                message: '상대와 대화가 시작되었어요!',\n                socketID: 'admin',\n            }]);\n        });\n    };\n\n    const handleReceiveMsg = () => {\n        userStore.userSocket?.on('receive', (data, socketID)=> {\n            setRecentChat({\n                nickName: data.nickName,\n                message: data.message,\n                socketID: socketID,\n            });\n        });\n    };\n\n    const handlePushChat = (): void => {\n        recentChat.message.length > 0 && setChatLog([...chatLog, recentChat]);\n    };\n\n    const handleFinished = () => {\n        setIsFinished(true);\n        setRecentChat({\n            nickName: 'SERENDY',\n            message: '대화가 종료되었어요!',\n            socketID: 'admin',\n        });\n    };\n\n    const stopChat = (): void => {\n        userStore.userSocket?.emit('stop chat');\n        handleFinished();\n    };\n\n    const chatStopped = (): void => {\n        userStore.userSocket?.on('is ended', () => {\n            handleFinished();\n        });\n    };\n\n    const reStart = (): void => {\n        setChatLog([]);\n        setIsSearching(false);\n        setIsFinished(false);\n        setIsMatched(false);\n    };\n\n    return {\n        isSearching,\n        isMatched,\n        display,\n        chatLog,\n        recentChat,\n        isFinished,\n        setRecentChat,\n        setChatLog,\n        handleSearch,\n        handleReceiveMsg,\n        handlePushChat,\n        getMatchedUser,\n        stopChat,\n        setIsFinished,\n        reStart,\n        chatStopped,\n    };\n};"]},"metadata":{},"sourceType":"module"}