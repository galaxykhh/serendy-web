{"ast":null,"code":"import { action, makeObservable, observable, runInAction } from 'mobx';\nimport userStore from './userStore';\nimport postRespository from '../repository/postRepository';\n\nclass PostStore {\n  constructor() {\n    this.sentPosts = [];\n    this.receivedPosts = [];\n    this.currentSentPost = null;\n    this.currentReceivedPost = null;\n    makeObservable(this, {\n      sentPosts: observable,\n      receivedPosts: observable,\n      currentSentPost: observable,\n      currentReceivedPost: observable,\n      setSentPosts: action,\n      setReceivedPosts: action,\n      setCurrentSentPost: action,\n      setCurrentReceivedPost: action,\n      handlePost: action,\n      getSentPosts: action,\n      getReceivedPosts: action,\n      handleSentOne: action,\n      handleReceivedOne: action,\n      sendComment: action\n    });\n  }\n\n  setSentPosts(data) {\n    this.sentPosts = data;\n  }\n\n  setReceivedPosts(data) {\n    this.receivedPosts = data;\n  }\n\n  setCurrentSentPost(data) {\n    this.currentSentPost = data;\n  }\n\n  setCurrentReceivedPost(data) {\n    this.currentReceivedPost = data;\n  }\n\n  async handlePost(content, setIsSent) {\n    try {\n      var _userStore$user, _userStore$user2;\n\n      if ((content === null || content === void 0 ? void 0 : content.length) === 0) {\n        return;\n      }\n\n      ;\n      const data = {\n        account: (_userStore$user = userStore.user) === null || _userStore$user === void 0 ? void 0 : _userStore$user.account,\n        nickName: (_userStore$user2 = userStore.user) === null || _userStore$user2 === void 0 ? void 0 : _userStore$user2.nickName,\n        content: content\n      };\n      const {\n        data: message\n      } = await postRespository.sendPost(data);\n      runInAction(() => {\n        if (message === 'Send Success') {\n          setIsSent();\n        }\n\n        ;\n      });\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  async getSentPosts(Loader) {\n    Loader();\n\n    try {\n      var _userStore$user3;\n\n      const {\n        data: {\n          data\n        }\n      } = await postRespository.getSentPosts((_userStore$user3 = userStore.user) === null || _userStore$user3 === void 0 ? void 0 : _userStore$user3.account);\n      runInAction(() => {\n        this.setSentPosts(data);\n        Loader();\n      });\n    } catch (err) {\n      console.log(err);\n      alert('오류가 발생하였습니다');\n      return;\n    }\n\n    ;\n  }\n\n  async getReceivedPosts(Loader) {\n    Loader();\n\n    try {\n      var _userStore$user4;\n\n      const {\n        data\n      } = await postRespository.getReceivePosts((_userStore$user4 = userStore.user) === null || _userStore$user4 === void 0 ? void 0 : _userStore$user4.account);\n      runInAction(() => {\n        if (data) {\n          this.setReceivedPosts(data);\n          console.log(data);\n          Loader();\n        }\n\n        ;\n      });\n    } catch (err) {\n      console.log(err);\n      alert('오류가 발생하였습니다');\n      return;\n    }\n\n    ;\n  }\n\n  handleSentOne(_id) {\n    const post = this.sentPosts.find(x => x._id === _id);\n    post && this.setCurrentSentPost(post);\n  }\n\n  handleReceivedOne(_id) {\n    const post = this.receivedPosts.find(x => x._id === x._id);\n    post && this.setCurrentReceivedPost(post);\n  }\n\n  async sendComment(content) {\n    try {\n      var _this$currentReceived, _this$currentReceived2, _userStore$user5;\n\n      if ((content === null || content === void 0 ? void 0 : content.length) === 0) {\n        return;\n      }\n\n      ;\n      const data = {\n        _id: (_this$currentReceived = this.currentReceivedPost) === null || _this$currentReceived === void 0 ? void 0 : _this$currentReceived._id,\n        toAccount: (_this$currentReceived2 = this.currentReceivedPost) === null || _this$currentReceived2 === void 0 ? void 0 : _this$currentReceived2.toAccount,\n        nickName: (_userStore$user5 = userStore.user) === null || _userStore$user5 === void 0 ? void 0 : _userStore$user5.nickName,\n        content: content\n      };\n      const {\n        data: {\n          message,\n          receivedPosts,\n          currentReceivedPost\n        }\n      } = await postRespository.sendComment(data);\n\n      if (message === 'Success') {\n        this.setReceivedPosts(receivedPosts);\n        this.setCurrentReceivedPost(currentReceivedPost);\n      }\n\n      ;\n    } catch (err) {\n      console.log(err);\n      alert('서버 점검중입니다');\n    }\n\n    ;\n  }\n\n}\n\n;\nconst postStore = new PostStore();\nexport default postStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/postStore.ts"],"names":["action","makeObservable","observable","runInAction","userStore","postRespository","PostStore","constructor","sentPosts","receivedPosts","currentSentPost","currentReceivedPost","setSentPosts","setReceivedPosts","setCurrentSentPost","setCurrentReceivedPost","handlePost","getSentPosts","getReceivedPosts","handleSentOne","handleReceivedOne","sendComment","data","content","setIsSent","length","account","user","nickName","message","sendPost","err","alert","Loader","console","log","getReceivePosts","_id","post","find","x","toAccount","postStore"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,cAAjB,EAAiCC,UAAjC,EAA6CC,WAA7C,QAAgE,MAAhE;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;;AAEA,MAAMC,SAAN,CAAgB;AAMZC,EAAAA,WAAW,GAAG;AAAA,SALPC,SAKO,GALqB,EAKrB;AAAA,SAJPC,aAIO,GAJyB,EAIzB;AAAA,SAHPC,eAGO,GAHgC,IAGhC;AAAA,SAFPC,mBAEO,GAFoC,IAEpC;AACVV,IAAAA,cAAc,CAAC,IAAD,EAAO;AACjBO,MAAAA,SAAS,EAAEN,UADM;AAEjBO,MAAAA,aAAa,EAAEP,UAFE;AAGjBQ,MAAAA,eAAe,EAAER,UAHA;AAIjBS,MAAAA,mBAAmB,EAAET,UAJJ;AAKjBU,MAAAA,YAAY,EAAEZ,MALG;AAMjBa,MAAAA,gBAAgB,EAAEb,MAND;AAOjBc,MAAAA,kBAAkB,EAAEd,MAPH;AAQjBe,MAAAA,sBAAsB,EAAEf,MARP;AASjBgB,MAAAA,UAAU,EAAEhB,MATK;AAUjBiB,MAAAA,YAAY,EAAEjB,MAVG;AAWjBkB,MAAAA,gBAAgB,EAAElB,MAXD;AAYjBmB,MAAAA,aAAa,EAAEnB,MAZE;AAajBoB,MAAAA,iBAAiB,EAAEpB,MAbF;AAcjBqB,MAAAA,WAAW,EAAErB;AAdI,KAAP,CAAd;AAgBH;;AAEMY,EAAAA,YAAY,CAACU,IAAD,EAA6B;AAC5C,SAAKd,SAAL,GAAiBc,IAAjB;AACH;;AAEMT,EAAAA,gBAAgB,CAACS,IAAD,EAA6B;AAChD,SAAKb,aAAL,GAAqBa,IAArB;AACH;;AAEMR,EAAAA,kBAAkB,CAACQ,IAAD,EAA2B;AAChD,SAAKZ,eAAL,GAAuBY,IAAvB;AACH;;AAEMP,EAAAA,sBAAsB,CAACO,IAAD,EAA2B;AACpD,SAAKX,mBAAL,GAA2BW,IAA3B;AACH;;AAEsB,QAAVN,UAAU,CAACO,OAAD,EAA8BC,SAA9B,EAAoE;AACvF,QAAI;AAAA;;AACA,UAAI,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,MAAT,MAAoB,CAAxB,EAA2B;AACvB;AACH;;AAAA;AACD,YAAMH,IAAI,GAAG;AACTI,QAAAA,OAAO,qBAAEtB,SAAS,CAACuB,IAAZ,oDAAE,gBAAgBD,OADhB;AAETE,QAAAA,QAAQ,sBAAExB,SAAS,CAACuB,IAAZ,qDAAE,iBAAgBC,QAFjB;AAGTL,QAAAA,OAAO,EAAEA;AAHA,OAAb;AAKA,YAAM;AAAED,QAAAA,IAAI,EAAEO;AAAR,UAAoB,MAAMxB,eAAe,CAACyB,QAAhB,CAAyBR,IAAzB,CAAhC;AACAnB,MAAAA,WAAW,CAAC,MAAM;AACd,YAAK0B,OAAO,KAAK,cAAjB,EAAkC;AAC9BL,UAAAA,SAAS;AACZ;;AAAA;AACJ,OAJU,CAAX;AAKH,KAfD,CAeE,OAAMO,GAAN,EAAW;AACTC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACH;;AAAA;AACJ;;AAEwB,QAAZf,YAAY,CAACgB,MAAD,EAAoC;AACzDA,IAAAA,MAAM;;AACN,QAAI;AAAA;;AACA,YAAM;AAAEX,QAAAA,IAAI,EAAE;AAAEA,UAAAA;AAAF;AAAR,UAAoB,MAAMjB,eAAe,CAACY,YAAhB,qBAA6Bb,SAAS,CAACuB,IAAvC,qDAA6B,iBAAgBD,OAA7C,CAAhC;AACAvB,MAAAA,WAAW,CAAC,MAAM;AACd,aAAKS,YAAL,CAAkBU,IAAlB;AACAW,QAAAA,MAAM;AACT,OAHU,CAAX;AAIH,KAND,CAME,OAAMF,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAC,MAAAA,KAAK,CAAC,aAAD,CAAL;AACA;AACH;;AAAA;AACJ;;AAE4B,QAAhBd,gBAAgB,CAACe,MAAD,EAAoC;AAC7DA,IAAAA,MAAM;;AACN,QAAI;AAAA;;AACA,YAAM;AAAEX,QAAAA;AAAF,UAAW,MAAMjB,eAAe,CAAC+B,eAAhB,qBAAgChC,SAAS,CAACuB,IAA1C,qDAAgC,iBAAgBD,OAAhD,CAAvB;AACAvB,MAAAA,WAAW,CAAC,MAAM;AACd,YAAImB,IAAJ,EAAU;AACN,eAAKT,gBAAL,CAAsBS,IAAtB;AACAY,UAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACAW,UAAAA,MAAM;AACT;;AAAA;AACJ,OANU,CAAX;AAOH,KATD,CASE,OAAMF,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAC,MAAAA,KAAK,CAAC,aAAD,CAAL;AACA;AACH;;AAAA;AACJ;;AAEMb,EAAAA,aAAa,CAACkB,GAAD,EAAoB;AACpC,UAAMC,IAAI,GAAG,KAAK9B,SAAL,CAAe+B,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUA,GAAnC,CAAb;AACAC,IAAAA,IAAI,IAAI,KAAKxB,kBAAL,CAAwBwB,IAAxB,CAAR;AACH;;AAEMlB,EAAAA,iBAAiB,CAACiB,GAAD,EAAoB;AACxC,UAAMC,IAAI,GAAG,KAAK7B,aAAL,CAAmB8B,IAAnB,CAAwBC,CAAC,IAAIA,CAAC,CAACH,GAAF,KAAUG,CAAC,CAACH,GAAzC,CAAb;AACAC,IAAAA,IAAI,IAAI,KAAKvB,sBAAL,CAA4BuB,IAA5B,CAAR;AACH;;AAEuB,QAAXjB,WAAW,CAACE,OAAD,EAA6C;AACjE,QAAI;AAAA;;AACA,UAAI,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,MAAT,MAAoB,CAAxB,EAA2B;AACvB;AACH;;AAAA;AACD,YAAMH,IAAI,GAAG;AACTe,QAAAA,GAAG,2BAAE,KAAK1B,mBAAP,0DAAE,sBAA0B0B,GADtB;AAETI,QAAAA,SAAS,4BAAE,KAAK9B,mBAAP,2DAAE,uBAA0B8B,SAF5B;AAGTb,QAAAA,QAAQ,sBAAExB,SAAS,CAACuB,IAAZ,qDAAE,iBAAgBC,QAHjB;AAITL,QAAAA,OAAO,EAAEA;AAJA,OAAb;AAMA,YAAM;AAAED,QAAAA,IAAI,EAAE;AAAEO,UAAAA,OAAF;AAAWpB,UAAAA,aAAX;AAA0BE,UAAAA;AAA1B;AAAR,UAA0D,MAAMN,eAAe,CAACgB,WAAhB,CAA4BC,IAA5B,CAAtE;;AACA,UAAKO,OAAO,KAAK,SAAjB,EAA6B;AACzB,aAAKhB,gBAAL,CAAsBJ,aAAtB;AACA,aAAKM,sBAAL,CAA4BJ,mBAA5B;AACH;;AAAA;AACJ,KAfD,CAeE,OAAMoB,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AAAA;AACJ;;AA7HW;;AA8Hf;AAED,MAAMU,SAAS,GAAG,IAAIpC,SAAJ,EAAlB;AACA,eAAeoC,SAAf","sourcesContent":["import { action, makeObservable, observable, runInAction } from 'mobx';\nimport { ICurrentPost } from '../interfaces/index';\nimport userStore from './userStore';\nimport postRespository from '../repository/postRepository'\n\nclass PostStore {\n    public sentPosts: ICurrentPost[] = [];\n    public receivedPosts: ICurrentPost[] = [];\n    public currentSentPost: ICurrentPost | null = null\n    public currentReceivedPost: ICurrentPost | null = null;\n\n    constructor() {\n        makeObservable(this, {\n            sentPosts: observable,\n            receivedPosts: observable,\n            currentSentPost: observable,\n            currentReceivedPost: observable,\n            setSentPosts: action,\n            setReceivedPosts: action,\n            setCurrentSentPost: action,\n            setCurrentReceivedPost: action,\n            handlePost: action,\n            getSentPosts: action,\n            getReceivedPosts: action,\n            handleSentOne: action,\n            handleReceivedOne: action,\n            sendComment: action,\n        });\n    };\n\n    public setSentPosts(data: ICurrentPost[]): void {\n        this.sentPosts = data;\n    };\n\n    public setReceivedPosts(data: ICurrentPost[]): void {\n        this.receivedPosts = data;\n    };\n\n    public setCurrentSentPost(data: ICurrentPost): void {\n        this.currentSentPost = data;\n    };\n\n    public setCurrentReceivedPost(data: ICurrentPost): void {\n        this.currentReceivedPost = data;\n    };\n\n    public async handlePost(content: string | undefined, setIsSent: () => void): Promise<void> {\n        try {\n            if (content?.length === 0) {\n                return;\n            };\n            const data = {\n                account: userStore.user?.account,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: message } = await postRespository.sendPost(data);\n            runInAction(() => {\n                if ((message === 'Send Success')) {\n                    setIsSent();\n                };\n            })\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public async getSentPosts(Loader: () => void): Promise<void> {\n        Loader();\n        try {\n            const { data: { data }} = await postRespository.getSentPosts(userStore.user?.account);\n            runInAction(() => {\n                this.setSentPosts(data);\n                Loader();\n            });\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public async getReceivedPosts(Loader: () => void): Promise<void> {\n        Loader();\n        try {\n            const { data } = await postRespository.getReceivePosts(userStore.user?.account);\n            runInAction(() => {\n                if (data) {\n                    this.setReceivedPosts(data);\n                    console.log(data);\n                    Loader();\n                };\n            });\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public handleSentOne(_id: string): void {\n        const post = this.sentPosts.find(x => x._id === _id);\n        post && this.setCurrentSentPost(post);\n    };\n\n    public handleReceivedOne(_id: string): void {\n        const post = this.receivedPosts.find(x => x._id === x._id);\n        post && this.setCurrentReceivedPost(post);\n    };\n\n    public async sendComment(content: string | undefined): Promise<void> {\n        try {\n            if (content?.length === 0) {\n                return;\n            };\n            const data = {\n                _id: this.currentReceivedPost?._id,\n                toAccount: this.currentReceivedPost?.toAccount,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: { message, receivedPosts, currentReceivedPost}} = await postRespository.sendComment(data);\n            if ((message === 'Success')) {\n                this.setReceivedPosts(receivedPosts);\n                this.setCurrentReceivedPost(currentReceivedPost);\n            };\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n};\n\nconst postStore = new PostStore();\nexport default postStore;"]},"metadata":{},"sourceType":"module"}