{"ast":null,"code":"import { action, computed, makeObservable, observable } from \"mobx\";\nimport serendyRepository from '../repository/serendyRepository';\n\nclass AuthStore {\n  constructor() {\n    this._isSignIn = false;\n    this._user = null;\n    this._isLogging = false;\n    makeObservable(this, {\n      _isLogging: observable,\n      _isSignIn: observable,\n      _user: observable,\n      isLogging: computed,\n      isSignIn: computed,\n      user: computed,\n      setIsSignIn: action.bound,\n      setUser: action,\n      signInWithToken: action.bound,\n      signIn: action.bound,\n      signOut: action.bound,\n      setIsLogging: action.bound\n    });\n  }\n\n  get isSignIn() {\n    return this._isSignIn;\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  get isLogging() {\n    return this._isLogging;\n  }\n\n  setIsSignIn() {\n    this._isSignIn = true;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  setIsLogging(boolean) {\n    this._isLogging = boolean;\n  }\n\n  async signInWithToken() {\n    this.setIsLogging(true);\n\n    try {\n      const token = localStorage.getItem('SerendyToken');\n\n      if (!token) {\n        this.setIsLogging(false);\n        return;\n      } else if (token) {\n        const response = await serendyRepository.signInWidthToken();\n\n        if (response.data.message === 'Invalid Token') {\n          return;\n        } else if (response.data.message === 'SignIn Success') {\n          this.setUser(response.data.nickName);\n          this.setIsSignIn();\n          this.setIsLogging(false);\n        }\n      }\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('현재 서버를 점검중입니다');\n    }\n  }\n\n  async signIn(userData, setError, push) {\n    this.setIsLogging(true);\n\n    try {\n      const response = await serendyRepository.signIn(userData);\n\n      if (response.data.message === 'SignIn Fail') {\n        this.setIsLogging(false);\n        setError();\n      } else if (response.data.message === 'SignIn Success') {\n        this.setUser(response.data.nickName);\n        this.setIsSignIn();\n        localStorage.setItem('SerendyToken', response.data.token);\n        this.setIsLogging(false);\n        push();\n      }\n    } catch (err) {\n      this.setIsLogging(false);\n      alert('현재 서버를 점검중입니다');\n    }\n  }\n\n  signOut(push) {\n    this._isSignIn = false;\n    this._user = null;\n    localStorage.removeItem('SerendyToken');\n    push();\n  }\n\n}\n\nconst authStore = new AuthStore();\nexport default authStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/authStore.ts"],"names":["action","computed","makeObservable","observable","serendyRepository","AuthStore","constructor","_isSignIn","_user","_isLogging","isLogging","isSignIn","user","setIsSignIn","bound","setUser","signInWithToken","signIn","signOut","setIsLogging","boolean","token","localStorage","getItem","response","signInWidthToken","data","message","nickName","err","alert","userData","setError","push","setItem","removeItem","authStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport { ISignInData } from '../components/SignIn/SignInBox';\nimport serendyRepository from '../repository/serendyRepository';\n\ninterface IUser {\n    nickName: string;\n}\n\ninterface IAuthStore {\n    isLogging: boolean;\n    isSignIn: boolean;\n    user: IUser | null;\n}\n\nclass AuthStore implements IAuthStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | null = null;\n    private _isLogging: boolean = false;\n\n    constructor() {\n        makeObservable<AuthStore, '_isLogging' | '_isSignIn' | '_user'>(this, {\n            _isLogging: observable,\n            _isSignIn: observable,\n            _user: observable,\n            isLogging: computed,\n            isSignIn: computed,\n            user: computed,\n            setIsSignIn: action.bound,\n            setUser: action,\n            signInWithToken: action.bound,\n            signIn: action.bound,\n            signOut: action.bound,\n            setIsLogging: action.bound,\n        })\n    }\n\n    get isSignIn(): boolean {\n        return this._isSignIn;\n    }\n\n    get user(): IUser | null {\n        return this._user;\n    }\n\n    get isLogging(): boolean {\n        return this._isLogging;\n    }\n\n    setIsSignIn(): void {\n        this._isSignIn = true;\n    }\n\n    setUser(user: IUser): void {\n        this._user = user;\n    }\n\n    setIsLogging(boolean: boolean): void {\n        this._isLogging = boolean;\n    }\n\n    async signInWithToken() {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (!token) {\n                this.setIsLogging(false);\n                return;\n            } else if (token) {\n                const response = await serendyRepository.signInWidthToken();\n                if ((response.data.message === 'Invalid Token')) {\n                    return;\n                } else if ((response.data.message === 'SignIn Success')) {\n                    this.setUser(response.data.nickName);\n                    this.setIsSignIn();\n                    this.setIsLogging(false);\n                }\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('현재 서버를 점검중입니다')\n        }\n    }\n\n    async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        this.setIsLogging(true);\n        try {\n            const response = await serendyRepository.signIn(userData);\n            if ((response.data.message === 'SignIn Fail')) {\n                this.setIsLogging(false);\n                setError();\n            } else if ((response.data.message === 'SignIn Success')) {\n                this.setUser(response.data.nickName);\n                this.setIsSignIn();\n                localStorage.setItem('SerendyToken', response.data.token);\n                this.setIsLogging(false);\n                push();\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('현재 서버를 점검중입니다');\n        }\n    }\n\n    signOut(push: () => void): void {\n        this._isSignIn = false;\n        this._user = null;\n        localStorage.removeItem('SerendyToken');\n        push();\n    }\n}\n\nconst authStore = new AuthStore();\nexport default authStore;"]},"metadata":{},"sourceType":"module"}