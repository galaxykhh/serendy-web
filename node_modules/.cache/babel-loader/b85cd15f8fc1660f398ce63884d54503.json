{"ast":null,"code":"import { action, computed, makeObservable, observable } from \"mobx\";\n\nclass AuthStore {\n  constructor() {\n    this._isLogged = false;\n    this._user = null;\n    makeObservable(this, {\n      _isLogged: observable,\n      _user: observable,\n      isLogged: computed,\n      user: computed,\n      setIsLogged: action,\n      setUser: action\n    });\n  }\n\n  get isLogged() {\n    return this._isLogged;\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  setIsLogged(status) {\n    this._isLogged = status;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  signUp(data) {\n    alert('hi');\n  }\n\n}\n\nconst authStore = new AuthStore();\nexport default authStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/src/store/authStore.ts"],"names":["action","computed","makeObservable","observable","AuthStore","constructor","_isLogged","_user","isLogged","user","setIsLogged","setUser","status","signUp","data","alert","authStore"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,cAA3B,EAA2CC,UAA3C,QAA6D,MAA7D;;AAcA,MAAMC,SAAN,CAAsC;AAKlCC,EAAAA,WAAW,GAAG;AAAA,SAHNC,SAGM,GAHe,KAGf;AAAA,SAFNC,KAEM,GAFgB,IAEhB;AACVL,IAAAA,cAAc,CAAmC,IAAnC,EAAyC;AACnDI,MAAAA,SAAS,EAAEH,UADwC;AAEnDI,MAAAA,KAAK,EAAEJ,UAF4C;AAGnDK,MAAAA,QAAQ,EAAEP,QAHyC;AAInDQ,MAAAA,IAAI,EAAER,QAJ6C;AAKnDS,MAAAA,WAAW,EAAEV,MALsC;AAMnDW,MAAAA,OAAO,EAAEX;AAN0C,KAAzC,CAAd;AAQH;;AAEW,MAARQ,QAAQ,GAAY;AACpB,WAAO,KAAKF,SAAZ;AACH;;AAEO,MAAJG,IAAI,GAAiB;AACrB,WAAO,KAAKF,KAAZ;AACH;;AAEDG,EAAAA,WAAW,CAACE,MAAD,EAAwB;AAC/B,SAAKN,SAAL,GAAiBM,MAAjB;AACH;;AAEDD,EAAAA,OAAO,CAACF,IAAD,EAAoB;AACvB,SAAKF,KAAL,GAAaE,IAAb;AACH;;AAEDI,EAAAA,MAAM,CAACC,IAAD,EAAoB;AACtBC,IAAAA,KAAK,CAAC,IAAD,CAAL;AACH;;AAlCiC;;AAqCtC,MAAMC,SAAS,GAAG,IAAIZ,SAAJ,EAAlB;AACA,eAAeY,SAAf","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport serendyRepository from \"../repository/serendyRepository\";\nimport { ISignUpData } from '../components/SignUp/SignUpBox';\nimport { SubmitHandler } from 'react-hook-form';\n\ninterface IUser {\n    nickName: string;\n}\n\ninterface IAuthStore {\n    isLogged: boolean;\n    user: IUser | null;\n}\n\nclass AuthStore implements IAuthStore {\n\n    private _isLogged: boolean = false;\n    private _user: IUser | null = null;\n\n    constructor() {\n        makeObservable<AuthStore, '_isLogged' | '_user'>(this, {\n            _isLogged: observable,\n            _user: observable,\n            isLogged: computed,\n            user: computed,\n            setIsLogged: action,\n            setUser: action,\n        })\n    }\n\n    get isLogged(): boolean {\n        return this._isLogged;\n    }\n\n    get user(): IUser | null {\n        return this._user;\n    }\n\n    setIsLogged(status: boolean): void {\n        this._isLogged = status;\n    }\n\n    setUser(user: IUser): void {\n        this._user = user;\n    }\n\n    signUp(data: ISignUpData) {\n        alert('hi');\n    }\n}\n\nconst authStore = new AuthStore();\nexport default authStore;"]},"metadata":{},"sourceType":"module"}