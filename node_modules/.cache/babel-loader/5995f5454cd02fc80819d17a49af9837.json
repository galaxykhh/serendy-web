{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport userStore from '../store/userStore';\nexport const useChat = () => {\n  _s();\n\n  const [isSearching, setIsSearching] = useState(false);\n  const [isMatched, setIsMatched] = useState(false);\n  const [display, setDisplay] = useState('hidden'); // 소켓에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n  // 해결방법을 찾다가 스테이트를 나눠서 동작하기로 했다.\n\n  const [chatLog, setChatLog] = useState([]); // 메세지 내역을 담아두는 배열\n\n  const [recentChat, setRecentChat] = useState({\n    nickName: '',\n    message: ''\n  }); // 서버에서 갱신된 메세지를 담는 state\n\n  const [othersChat, setOthersChat] = useState({\n    nickName: '',\n    message: ''\n  });\n  ; // 다른사람의 메세지\n\n  const sendBtn = useRef(null);\n  const input = useRef(null);\n\n  const handleEnter = e => {\n    if (e.key === 'Enter') {\n      var _sendBtn$current;\n\n      (_sendBtn$current = sendBtn.current) === null || _sendBtn$current === void 0 ? void 0 : _sendBtn$current.click();\n    }\n  };\n\n  const showChat = () => {\n    setDisplay('visible');\n  };\n\n  const handleBtn = () => {\n    setIsSearching(!isSearching);\n    setIsMatched(!isMatched); // 채팅개발하게되면 수정\n  };\n\n  const handleSearch = () => {\n    if (display === 'hidden') {\n      showChat();\n      handleBtn();\n    } else {\n      handleBtn();\n    }\n  };\n\n  const handleMatch = () => {\n    setIsMatched(true);\n  };\n\n  const handleSendMsg = () => {\n    var _input$current;\n\n    if (((_input$current = input.current) === null || _input$current === void 0 ? void 0 : _input$current.value.length) !== 0) {\n      var _input$current2, _userStore$userSocket;\n\n      const nickName = userStore.user;\n      const message = (_input$current2 = input.current) === null || _input$current2 === void 0 ? void 0 : _input$current2.value;\n      const data = {\n        nickName: nickName,\n        message: message\n      };\n      (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.emit('chat', data);\n      input.current.value = '';\n    } else {\n      return;\n    }\n  };\n\n  const handleReceive = () => {\n    var _userStore$userSocket2;\n\n    (_userStore$userSocket2 = userStore.userSocket) === null || _userStore$userSocket2 === void 0 ? void 0 : _userStore$userSocket2.on('receive', data => {\n      setRecentChat({\n        nickName: data.nickName,\n        message: data.message\n      });\n    });\n  };\n\n  const handlePushChat = () => {\n    recentChat.message.length > 0 && setChatLog([...chatLog, recentChat]);\n    return () => {\n      setRecentChat({\n        nickName: '',\n        message: ''\n      });\n    };\n  };\n\n  return {\n    isSearching,\n    isMatched,\n    display,\n    sendBtn,\n    input,\n    chatLog,\n    recentChat,\n    othersChat,\n    setOthersChat,\n    setRecentChat,\n    setChatLog,\n    handleEnter,\n    handleSendMsg,\n    handleSearch,\n    handleMatch,\n    handleReceive,\n    handlePushChat\n  };\n};\n\n_s(useChat, \"rtp3ErhUZJq8Hn2sjNJaRbReOWc=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/useChat.ts"],"names":["useState","useRef","userStore","useChat","isSearching","setIsSearching","isMatched","setIsMatched","display","setDisplay","chatLog","setChatLog","recentChat","setRecentChat","nickName","message","othersChat","setOthersChat","sendBtn","input","handleEnter","e","key","current","click","showChat","handleBtn","handleSearch","handleMatch","handleSendMsg","value","length","user","data","userSocket","emit","handleReceive","on","handlePushChat"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react'\nimport { VisibilityType } from '../type';\nimport userStore from '../store/userStore';\n\nexport interface IRecentChat {\n    nickName: string;\n    message: string;\n}\n\nexport const useChat = () => {\n    const [isSearching, setIsSearching] = useState<boolean>(false);\n    const [isMatched, setIsMatched] = useState<boolean>(false);\n    const [display, setDisplay] = useState<VisibilityType>('hidden');\n    // 소켓에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n    // 해결방법을 찾다가 스테이트를 나눠서 동작하기로 했다.\n    const [chatLog, setChatLog] = useState<IRecentChat[]>([]); // 메세지 내역을 담아두는 배열\n    const [recentChat, setRecentChat] = useState<IRecentChat>({ nickName: '', message: '' }); // 서버에서 갱신된 메세지를 담는 state\n    const [othersChat, setOthersChat] = useState<IRecentChat>({ nickName: '', message: '' });; // 다른사람의 메세지\n    const sendBtn = useRef<HTMLButtonElement>(null);\n    const input = useRef<HTMLInputElement>(null);\n\n    const handleEnter = (e: React.KeyboardEvent): void => {\n        if (e.key === 'Enter') {\n            sendBtn.current?.click();\n        }\n    }\n\n    const showChat = (): void => {\n        setDisplay('visible');\n    }\n\n    const handleBtn = (): void => {\n        setIsSearching(!isSearching);\n        setIsMatched(!isMatched); // 채팅개발하게되면 수정\n    };\n\n    const handleSearch = (): void => {\n        if (display === 'hidden') {\n            showChat();\n            handleBtn();\n        } else {\n            handleBtn();\n        }\n    };\n\n    const handleMatch = (): void => {\n        setIsMatched(true);\n    }\n\n    const handleSendMsg = (): void => {\n        if (input.current?.value.length !== 0) {\n            const nickName = userStore.user;\n            const message = input.current?.value;\n            const data = {\n                nickName: nickName,\n                message: message,\n            }\n            userStore.userSocket?.emit('chat', data);\n            input.current!.value = ''\n        } else {\n            return;\n        }\n    }\n\n    const handleReceive = () => {\n        userStore.userSocket?.on('receive', data => {\n            setRecentChat({\n                nickName: data.nickName,\n                message: data.message,\n            })\n        })\n    }\n\n    const handlePushChat = () => {\n        recentChat.message.length > 0 && setChatLog([...chatLog, recentChat]);\n        return () => {\n            setRecentChat({ nickName: '', message: '' });\n        }\n    }\n    \n\n\n    return {\n        isSearching,\n        isMatched,\n        display,\n        sendBtn,\n        input,\n        chatLog,\n        recentChat,\n        othersChat,\n        setOthersChat,\n        setRecentChat,\n        setChatLog,\n        handleEnter,\n        handleSendMsg,\n        handleSearch,\n        handleMatch,\n        handleReceive,\n        handlePushChat,\n    }\n}"]},"metadata":{},"sourceType":"module"}