{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{action,makeObservable,observable,runInAction}from'mobx';import userStore from'./userStore';import postRepository from'../repository/postRepository';var PostStore=/*#__PURE__*/function(){function PostStore(){_classCallCheck(this,PostStore);this.sentPosts=[];this.receivedPosts=[];this.currentSentPost=null;this.currentReceivedPost=null;this.isLoading=false;makeObservable(this,{sentPosts:observable,receivedPosts:observable,currentSentPost:observable,currentReceivedPost:observable,isLoading:observable,setSentPosts:action,setReceivedPosts:action,setCurrentSentPost:action,setCurrentReceivedPost:action,setIsLoading:action,sendPost:action,getSentPosts:action,getReceivedPosts:action,handleSentOne:action.bound,handleReceivedOne:action.bound,sendComment:action,resetReceivedPosts:action,resetSentPosts:action});}_createClass(PostStore,[{key:\"setSentPosts\",value:function setSentPosts(data){this.sentPosts=data;}},{key:\"setReceivedPosts\",value:function setReceivedPosts(data){this.receivedPosts=data;}},{key:\"setCurrentSentPost\",value:function setCurrentSentPost(data){this.currentSentPost=data;}},{key:\"setCurrentReceivedPost\",value:function setCurrentReceivedPost(data){this.currentReceivedPost=data;}},{key:\"setIsLoading\",value:function setIsLoading(boolean){this.isLoading=boolean;}},{key:\"sendPost\",value:function(){var _sendPost=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(content,setIsSent){var _userStore$user,_userStore$user2,data,_yield$postRepository,message;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setIsSent();_context.prev=1;if(!((content===null||content===void 0?void 0:content.length)===0)){_context.next=4;break;}return _context.abrupt(\"return\");case 4:;data={account:(_userStore$user=userStore.user)===null||_userStore$user===void 0?void 0:_userStore$user.account,nickName:(_userStore$user2=userStore.user)===null||_userStore$user2===void 0?void 0:_userStore$user2.nickName,content:content};_context.next=8;return postRepository.sendPost(data);case 8:_yield$postRepository=_context.sent;message=_yield$postRepository.data.message;runInAction(function(){if(message==='Send Success'){return;};});_context.next=17;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](1);console.log(_context.t0);alert('서버가 점검중이에요');case 17:;case 18:case\"end\":return _context.stop();}}},_callee,null,[[1,13]]);}));function sendPost(_x,_x2){return _sendPost.apply(this,arguments);}return sendPost;}()},{key:\"getSentPosts\",value:function(){var _getSentPosts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _this=this;var _userStore$user3,_yield$postRepository2,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:this.setIsLoading(true);_context2.prev=1;_context2.next=4;return postRepository.getSentPosts((_userStore$user3=userStore.user)===null||_userStore$user3===void 0?void 0:_userStore$user3.account);case 4:_yield$postRepository2=_context2.sent;data=_yield$postRepository2.data;runInAction(function(){_this.setSentPosts(data);_this.setIsLoading(false);});_context2.next=14;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](1);console.log(_context2.t0);alert('오류가 발생하였습니다');return _context2.abrupt(\"return\");case 14:;case 15:case\"end\":return _context2.stop();}}},_callee2,this,[[1,9]]);}));function getSentPosts(){return _getSentPosts.apply(this,arguments);}return getSentPosts;}()},{key:\"getReceivedPosts\",value:function(){var _getReceivedPosts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _this2=this;var _userStore$user4,_yield$postRepository3,data;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:this.setIsLoading(true);_context3.prev=1;_context3.next=4;return postRepository.getReceivePosts((_userStore$user4=userStore.user)===null||_userStore$user4===void 0?void 0:_userStore$user4.account);case 4:_yield$postRepository3=_context3.sent;data=_yield$postRepository3.data;runInAction(function(){_this2.setReceivedPosts(data);_this2.setIsLoading(false);});_context3.next=14;break;case 9:_context3.prev=9;_context3.t0=_context3[\"catch\"](1);console.log(_context3.t0);alert('오류가 발생하였습니다');return _context3.abrupt(\"return\");case 14:;case 15:case\"end\":return _context3.stop();}}},_callee3,this,[[1,9]]);}));function getReceivedPosts(){return _getReceivedPosts.apply(this,arguments);}return getReceivedPosts;}()},{key:\"handleSentOne\",value:function handleSentOne(_id){var post=this.sentPosts.find(function(x){return x._id===_id;});post&&this.setCurrentSentPost(post);}},{key:\"handleReceivedOne\",value:function handleReceivedOne(_id){var post=this.receivedPosts.find(function(x){return x._id===_id;});post&&this.setCurrentReceivedPost(post);}},{key:\"sendComment\",value:function(){var _sendComment=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(content){var _this$currentReceived,_this$currentReceived2,_userStore$user5,data,_yield$postRepository4,_yield$postRepository5,message,receivedPosts,currentReceivedPost;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;if(!((content===null||content===void 0?void 0:content.length)===0)){_context4.next=3;break;}return _context4.abrupt(\"return\");case 3:;data={_id:(_this$currentReceived=this.currentReceivedPost)===null||_this$currentReceived===void 0?void 0:_this$currentReceived._id,toAccount:(_this$currentReceived2=this.currentReceivedPost)===null||_this$currentReceived2===void 0?void 0:_this$currentReceived2.toAccount,nickName:(_userStore$user5=userStore.user)===null||_userStore$user5===void 0?void 0:_userStore$user5.nickName,content:content};_context4.next=7;return postRepository.sendComment(data);case 7:_yield$postRepository4=_context4.sent;_yield$postRepository5=_yield$postRepository4.data;message=_yield$postRepository5.message;receivedPosts=_yield$postRepository5.receivedPosts;currentReceivedPost=_yield$postRepository5.currentReceivedPost;if(message==='Success'){this.setReceivedPosts(receivedPosts);this.setCurrentReceivedPost(currentReceivedPost);};_context4.next=20;break;case 16:_context4.prev=16;_context4.t0=_context4[\"catch\"](0);console.log(_context4.t0);alert('서버 점검중입니다');case 20:;case 21:case\"end\":return _context4.stop();}}},_callee4,this,[[0,16]]);}));function sendComment(_x3){return _sendComment.apply(this,arguments);}return sendComment;}()},{key:\"resetReceivedPosts\",value:function resetReceivedPosts(){this.setReceivedPosts([]);}},{key:\"resetSentPosts\",value:function resetSentPosts(){this.setSentPosts([]);}}]);return PostStore;}();;var postStore=new PostStore();export default postStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/postStore.ts"],"names":["action","makeObservable","observable","runInAction","userStore","postRepository","PostStore","sentPosts","receivedPosts","currentSentPost","currentReceivedPost","isLoading","setSentPosts","setReceivedPosts","setCurrentSentPost","setCurrentReceivedPost","setIsLoading","sendPost","getSentPosts","getReceivedPosts","handleSentOne","bound","handleReceivedOne","sendComment","resetReceivedPosts","resetSentPosts","data","boolean","content","setIsSent","length","account","user","nickName","message","console","log","alert","getReceivePosts","_id","post","find","x","toAccount","postStore"],"mappings":"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","sourcesContent":["import { action, makeObservable, observable, runInAction } from 'mobx';\nimport { ICurrentPost } from '../interfaces/index';\nimport userStore from './userStore';\nimport postRepository from '../repository/postRepository'\n\nclass PostStore {\n    public sentPosts: ICurrentPost[] = [];\n    public receivedPosts: ICurrentPost[] = [];\n    public currentSentPost: ICurrentPost | null = null\n    public currentReceivedPost: ICurrentPost | null = null;\n    public isLoading: boolean = false;\n\n    constructor() {\n        makeObservable(this, {\n            sentPosts: observable,\n            receivedPosts: observable,\n            currentSentPost: observable,\n            currentReceivedPost: observable,\n            isLoading: observable,\n            setSentPosts: action,\n            setReceivedPosts: action,\n            setCurrentSentPost: action,\n            setCurrentReceivedPost: action,\n            setIsLoading: action,\n            sendPost: action,\n            getSentPosts: action,\n            getReceivedPosts: action,\n            handleSentOne: action.bound,\n            handleReceivedOne: action.bound,\n            sendComment: action,\n            resetReceivedPosts: action,\n            resetSentPosts: action,\n        });\n    };\n\n    public setSentPosts(data: ICurrentPost[]): void {\n        this.sentPosts = data;\n    };\n\n    public setReceivedPosts(data: ICurrentPost[]): void {\n        this.receivedPosts = data;\n    };\n\n    public setCurrentSentPost(data: ICurrentPost): void {\n        this.currentSentPost = data;\n    };\n\n    public setCurrentReceivedPost(data: ICurrentPost): void {\n        this.currentReceivedPost = data;\n    };\n\n    public setIsLoading(boolean: boolean): void {\n        this.isLoading = boolean;\n    };\n\n    public async sendPost(content: string | undefined, setIsSent: () => void): Promise<void> {\n        setIsSent();\n        try {\n            if (content?.length === 0) {\n                return;\n            };\n            const data = {\n                account: userStore.user?.account,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: { message }} = await postRepository.sendPost(data);\n            runInAction(() => {\n                if ((message === 'Send Success')) {\n                    return;\n                };\n            })\n        } catch(err) {\n            console.log(err);\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public async getSentPosts(): Promise<void> {\n        this.setIsLoading(true);\n        try {\n            const { data } = await postRepository.getSentPosts(userStore.user?.account);\n            runInAction(() => {\n                this.setSentPosts(data);\n                this.setIsLoading(false);\n            });\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public async getReceivedPosts(): Promise<void> {\n        this.setIsLoading(true);\n        try {\n            const { data } = await postRepository.getReceivePosts(userStore.user?.account);\n            runInAction(() => {\n                this.setReceivedPosts(data);\n                this.setIsLoading(false);\n            });\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public handleSentOne(_id: string): void {\n        const post = this.sentPosts.find(x => x._id === _id);\n        post && this.setCurrentSentPost(post);\n    };\n\n    public handleReceivedOne(_id: string): void {\n        const post = this.receivedPosts.find(x => x._id === _id);\n        post && this.setCurrentReceivedPost(post);\n    };\n\n    public async sendComment(content: string | undefined): Promise<void> {\n        try {\n            if (content?.length === 0) {\n                return;\n            };\n            const data = {\n                _id: this.currentReceivedPost?._id,\n                toAccount: this.currentReceivedPost?.toAccount,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: { message, receivedPosts, currentReceivedPost}} = await postRepository.sendComment(data);\n            if ((message === 'Success')) {\n                this.setReceivedPosts(receivedPosts);\n                this.setCurrentReceivedPost(currentReceivedPost);\n            };\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public resetReceivedPosts(): void {\n        this.setReceivedPosts([]);\n    };\n\n    public resetSentPosts(): void {\n        this.setSentPosts([]);\n    };\n};\n\nconst postStore = new PostStore();\nexport default postStore;"]},"metadata":{},"sourceType":"module"}