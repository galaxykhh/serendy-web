{"ast":null,"code":"import { action, computed, flow, makeObservable, observable } from \"mobx\";\nimport authRepository from '../repository/authRepository';\n\nclass UserStore {\n  constructor() {\n    this._user = null;\n    this._userSocket = null;\n    this._socketID = null;\n    this.isLogging = false;\n    makeObservable(this, {\n      _user: observable,\n      _userSocket: observable,\n      _socketID: observable,\n      isLogging: observable,\n      user: computed,\n      userSocket: computed,\n      socketID: computed,\n      setUser: action,\n      signInWithToken: flow,\n      signIn: flow,\n      signUp: flow,\n      checkAccount: flow,\n      changePW: flow,\n      changeName: flow,\n      findPW: flow,\n      signOut: action.bound,\n      setIsLogging: action,\n      setUserSocket: action,\n      setSocketID: action,\n      saveSocketID: action\n    });\n  }\n\n  get user() {\n    return this._user;\n  }\n\n  get userSocket() {\n    return this._userSocket;\n  }\n\n  get socketID() {\n    return this._socketID;\n  }\n\n  setUser(user) {\n    this._user = user;\n  }\n\n  setIsLogging(boolean) {\n    this.isLogging = boolean;\n  }\n\n  setUserSocket(data) {\n    this._userSocket = data;\n  }\n\n  setSocketID(myID) {\n    this._socketID = myID;\n  }\n\n  saveSocketID() {\n    var _this$userSocket, _this$userSocket2;\n\n    (_this$userSocket = this.userSocket) === null || _this$userSocket === void 0 ? void 0 : _this$userSocket.emit('enter');\n    (_this$userSocket2 = this.userSocket) === null || _this$userSocket2 === void 0 ? void 0 : _this$userSocket2.on('entered', myID => {\n      this.setSocketID(myID);\n    });\n  }\n\n  *signInWithToken() {\n    try {\n      const token = localStorage.getItem('SerendyToken');\n\n      if (token) {\n        this.setIsLogging(true);\n        const {\n          data: {\n            message,\n            account,\n            nickName,\n            token\n          }\n        } = yield authRepository.signInWidthToken();\n\n        if (message === 'SignIn Success') {\n          this.setUser({\n            account,\n            nickName\n          });\n          localStorage.setItem('SerendyToken', token);\n          this.setIsLogging(false);\n          return true;\n        }\n\n        ;\n      }\n\n      ;\n      this.setIsLogging(false);\n      return false;\n    } catch (err) {\n      alert('서버 점검중입니다');\n    }\n\n    ;\n  }\n\n  *signIn(userData) {\n    this.setIsLogging(true);\n\n    try {\n      const {\n        data: {\n          message,\n          account,\n          nickName,\n          token\n        }\n      } = yield authRepository.signIn(userData);\n      console.log(userData);\n\n      if (message === 'SignIn Success') {\n        this.setUser({\n          account,\n          nickName\n        });\n        localStorage.setItem('SerendyToken', token);\n        return true;\n      }\n\n      ;\n      return false;\n    } catch (err) {\n      console.log(err);\n      alert('서버 점검중입니다');\n    } finally {\n      this.setIsLogging(false);\n    }\n\n    ;\n  }\n\n  *signUp(userData) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = yield authRepository.signUp(userData);\n\n      if (message === 'SignUp Success') {\n        return true;\n      }\n\n      ;\n      return false;\n    } catch (err) {\n      console.log(err);\n      alert('서버 점검중입니다');\n    }\n\n    ;\n  }\n\n  *checkAccount(account) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = yield authRepository.checkAccount(account);\n\n      if (message === 'available') {\n        return true;\n      }\n\n      ;\n      return false; // message = 'already exist'\n    } catch (err) {\n      console.log(err);\n      alert('서버 점검중입니다');\n    }\n\n    ;\n  }\n\n  *changePW(data) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = yield authRepository.changePassword(data);\n\n      if (message === 'Changed') {\n        alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n        return this.signOut();\n      }\n\n      ;\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  *changeName(nickName) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = yield authRepository.changeName(nickName);\n\n      if (message === 'Changed') {\n        alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`);\n        return this.signOut();\n      }\n\n      ;\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  *findPW(data) {\n    try {\n      const {\n        data: {\n          message\n        }\n      } = yield authRepository.findPW(data);\n\n      if (message === 'Not Exist') {\n        alert('일치하는 정보가 없습니다');\n        return false;\n      }\n\n      if (message === 'Valid User') {\n        alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n        return this.signOut();\n      }\n\n      ;\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  signOut() {\n    this.setUser(null);\n    localStorage.removeItem('SerendyToken');\n    return true;\n  }\n\n}\n\n;\nconst userStore = new UserStore();\nexport default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","flow","makeObservable","observable","authRepository","UserStore","constructor","_user","_userSocket","_socketID","isLogging","user","userSocket","socketID","setUser","signInWithToken","signIn","signUp","checkAccount","changePW","changeName","findPW","signOut","bound","setIsLogging","setUserSocket","setSocketID","saveSocketID","boolean","data","myID","emit","on","token","localStorage","getItem","message","account","nickName","signInWidthToken","setItem","err","alert","userData","console","log","changePassword","removeItem","userStore"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,cAAjC,EAAiDC,UAAjD,QAAgF,MAAhF;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAIA,MAAMC,SAAN,CAAsC;AAMlCC,EAAAA,WAAW,GAAG;AAAA,SALNC,KAKM,GALgB,IAKhB;AAAA,SAJNC,WAIM,GAJuB,IAIvB;AAAA,SAHNC,SAGM,GAHqB,IAGrB;AAAA,SAFPC,SAEO,GAFc,KAEd;AACVR,IAAAA,cAAc,CAAmD,IAAnD,EAAyD;AACnEK,MAAAA,KAAK,EAAEJ,UAD4D;AAEnEK,MAAAA,WAAW,EAAEL,UAFsD;AAGnEM,MAAAA,SAAS,EAAEN,UAHwD;AAInEO,MAAAA,SAAS,EAAEP,UAJwD;AAKnEQ,MAAAA,IAAI,EAAEX,QAL6D;AAMnEY,MAAAA,UAAU,EAAEZ,QANuD;AAOnEa,MAAAA,QAAQ,EAAEb,QAPyD;AAQnEc,MAAAA,OAAO,EAAEf,MAR0D;AASnEgB,MAAAA,eAAe,EAAEd,IATkD;AAUnEe,MAAAA,MAAM,EAAEf,IAV2D;AAWnEgB,MAAAA,MAAM,EAAEhB,IAX2D;AAYnEiB,MAAAA,YAAY,EAAEjB,IAZqD;AAanEkB,MAAAA,QAAQ,EAAElB,IAbyD;AAcnEmB,MAAAA,UAAU,EAAEnB,IAduD;AAenEoB,MAAAA,MAAM,EAAEpB,IAf2D;AAgBnEqB,MAAAA,OAAO,EAAEvB,MAAM,CAACwB,KAhBmD;AAiBnEC,MAAAA,YAAY,EAAEzB,MAjBqD;AAkBnE0B,MAAAA,aAAa,EAAE1B,MAlBoD;AAmBnE2B,MAAAA,WAAW,EAAE3B,MAnBsD;AAoBnE4B,MAAAA,YAAY,EAAE5B;AApBqD,KAAzD,CAAd;AAsBH;;AAEc,MAAJY,IAAI,GAAiB;AAC5B,WAAO,KAAKJ,KAAZ;AACH;;AAEoB,MAAVK,UAAU,GAAkB;AACnC,WAAO,KAAKJ,WAAZ;AACH;;AAEkB,MAARK,QAAQ,GAAkB;AACjC,WAAO,KAAKJ,SAAZ;AACH;;AAEMK,EAAAA,OAAO,CAACH,IAAD,EAA2B;AACrC,SAAKJ,KAAL,GAAaI,IAAb;AACH;;AAEMa,EAAAA,YAAY,CAACI,OAAD,EAAyB;AACxC,SAAKlB,SAAL,GAAiBkB,OAAjB;AACH;;AAEMH,EAAAA,aAAa,CAACI,IAAD,EAA4B;AAC5C,SAAKrB,WAAL,GAAmBqB,IAAnB;AACH;;AAEMH,EAAAA,WAAW,CAACI,IAAD,EAA4B;AAC1C,SAAKrB,SAAL,GAAiBqB,IAAjB;AACH;;AAEMH,EAAAA,YAAY,GAAS;AAAA;;AACxB,6BAAKf,UAAL,sEAAiBmB,IAAjB,CAAsB,OAAtB;AACA,8BAAKnB,UAAL,wEAAiBoB,EAAjB,CAAoB,SAApB,EAA+BF,IAAI,IAAI;AACnC,WAAKJ,WAAL,CAAiBI,IAAjB;AACH,KAFD;AAGH;;AAEsB,GAAff,eAAe,GAAG;AACtB,QAAI;AACA,YAAMkB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAd;;AACA,UAAIF,KAAJ,EAAW;AACP,aAAKT,YAAL,CAAkB,IAAlB;AACA,cAAM;AAAEK,UAAAA,IAAI,EAAE;AAAEO,YAAAA,OAAF;AAAWC,YAAAA,OAAX;AAAoBC,YAAAA,QAApB;AAA8BL,YAAAA;AAA9B;AAAR,YAAkD,MAAM7B,cAAc,CAACmC,gBAAf,EAA9D;;AACI,YAAIH,OAAO,KAAK,gBAAhB,EAAkC;AAC9B,eAAKtB,OAAL,CAAa;AAAEuB,YAAAA,OAAF;AAAYC,YAAAA;AAAZ,WAAb;AACAJ,UAAAA,YAAY,CAACM,OAAb,CAAqB,cAArB,EAAqCP,KAArC;AACA,eAAKT,YAAL,CAAkB,KAAlB;AACA,iBAAO,IAAP;AACH;;AAAA;AACR;;AAAA;AACD,WAAKA,YAAL,CAAkB,KAAlB;AACA,aAAO,KAAP;AACH,KAdD,CAcE,OAAMiB,GAAN,EAAW;AACTC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AAAA;AACJ;;AAEa,GAAN1B,MAAM,CAAC2B,QAAD,EAAwB;AAClC,SAAKnB,YAAL,CAAkB,IAAlB;;AACA,QAAI;AACA,YAAM;AAAEK,QAAAA,IAAI,EAAE;AAAEO,UAAAA,OAAF;AAAWC,UAAAA,OAAX;AAAoBC,UAAAA,QAApB;AAA8BL,UAAAA;AAA9B;AAAR,UAAkD,MAAM7B,cAAc,CAACY,MAAf,CAAsB2B,QAAtB,CAA9D;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,UAAIP,OAAO,KAAK,gBAAhB,EAAkC;AAC9B,aAAKtB,OAAL,CAAa;AAAEuB,UAAAA,OAAF;AAAWC,UAAAA;AAAX,SAAb;AACAJ,QAAAA,YAAY,CAACM,OAAb,CAAqB,cAArB,EAAqCP,KAArC;AACA,eAAO,IAAP;AACH;;AAAA;AACD,aAAO,KAAP;AACH,KATD,CASE,OAAMQ,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH,KAZD,SAYU;AACN,WAAKlB,YAAL,CAAkB,KAAlB;AACH;;AAAA;AACJ;;AAEa,GAANP,MAAM,CAAC0B,QAAD,EAAwB;AAClC,QAAI;AACA,YAAM;AAAEd,QAAAA,IAAI,EAAE;AAAEO,UAAAA;AAAF;AAAR,UAAwB,MAAMhC,cAAc,CAACa,MAAf,CAAsB0B,QAAtB,CAApC;;AACA,UAAIP,OAAO,KAAK,gBAAhB,EAAkC;AAC9B,eAAO,IAAP;AACH;;AAAA;AACD,aAAO,KAAP;AACH,KAND,CAME,OAAMK,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AAAA;AACJ;;AAEmB,GAAZxB,YAAY,CAACmB,OAAD,EAAkB;AAClC,QAAI;AACA,YAAM;AAAER,QAAAA,IAAI,EAAE;AAAEO,UAAAA;AAAF;AAAR,UAAwB,MAAMhC,cAAc,CAACc,YAAf,CAA4BmB,OAA5B,CAApC;;AACA,UAAID,OAAO,KAAK,WAAhB,EAA6B;AACzB,eAAO,IAAP;AACH;;AAAA;AACD,aAAO,KAAP,CALA,CAKc;AACjB,KAND,CAME,OAAMK,GAAN,EAAW;AACTG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACAC,MAAAA,KAAK,CAAC,WAAD,CAAL;AACH;;AAAA;AACJ;;AAEe,GAARvB,QAAQ,CAACU,IAAD,EAAkB;AAC9B,QAAI;AACA,YAAM;AAAEA,QAAAA,IAAI,EAAE;AAAEO,UAAAA;AAAF;AAAR,UAAuB,MAAMhC,cAAc,CAAC0C,cAAf,CAA8BjB,IAA9B,CAAnC;;AACA,UAAIO,OAAO,KAAK,SAAhB,EAA2B;AACvBM,QAAAA,KAAK,CAAE,4BAAF,CAAL;AACA,eAAO,KAAKpB,OAAL,EAAP;AACH;;AAAA;AACJ,KAND,CAME,OAAMmB,GAAN,EAAW;AACTC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACH;;AAAA;AACJ;;AAEiB,GAAVtB,UAAU,CAACkB,QAAD,EAAsB;AACpC,QAAI;AACA,YAAM;AAAET,QAAAA,IAAI,EAAE;AAAEO,UAAAA;AAAF;AAAR,UAAuB,MAAMhC,cAAc,CAACgB,UAAf,CAA0BkB,QAA1B,CAAnC;;AACA,UAAIF,OAAO,KAAK,SAAhB,EAA2B;AACvBM,QAAAA,KAAK,CAAE,2BAAF,CAAL;AACA,eAAO,KAAKpB,OAAL,EAAP;AACH;;AAAA;AACJ,KAND,CAME,OAAMmB,GAAN,EAAW;AACTC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACH;;AAAA;AACJ;;AAEa,GAANrB,MAAM,CAACQ,IAAD,EAAgB;AAC1B,QAAI;AACA,YAAM;AAAEA,QAAAA,IAAI,EAAE;AAAEO,UAAAA;AAAF;AAAR,UAAuB,MAAMhC,cAAc,CAACiB,MAAf,CAAsBQ,IAAtB,CAAnC;;AACA,UAAIO,OAAO,KAAK,WAAhB,EAA6B;AACzBM,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA,eAAO,KAAP;AACH;;AACD,UAAIN,OAAO,KAAK,YAAhB,EAA8B;AAC1BM,QAAAA,KAAK,CAAE,6CAAF,CAAL;AACA,eAAO,KAAKpB,OAAL,EAAP;AACH;;AAAA;AACJ,KAVD,CAUE,OAAOmB,GAAP,EAAY;AACVC,MAAAA,KAAK,CAAC,YAAD,CAAL;AACH;;AAAA;AACJ;;AAEMpB,EAAAA,OAAO,GAAY;AACtB,SAAKR,OAAL,CAAa,IAAb;AACAoB,IAAAA,YAAY,CAACa,UAAb,CAAwB,cAAxB;AACA,WAAO,IAAP;AACH;;AA/KiC;;AAgLrC;AAED,MAAMC,SAAS,GAAG,IAAI3C,SAAJ,EAAlB;AACA,eAAe2C,SAAf","sourcesContent":["import { action, computed, flow, makeObservable, observable, runInAction } from \"mobx\";\nimport authRepository from '../repository/authRepository';\nimport { ISignInData, IPassword, INickName, IFindPW, IUserStore, IUser, ISignUpData } from '../interfaces';\nimport { Socket } from 'socket.io-client';\n\nclass UserStore implements IUserStore {\n    private _user: IUser | null = null;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n    public isLogging: boolean = false;\n\n    constructor() {\n        makeObservable<UserStore, '_user' | '_userSocket' | '_socketID'>(this, {\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: observable,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setUser: action,\n            signInWithToken: flow,\n            signIn: flow,\n            signUp: flow,\n            checkAccount: flow,\n            changePW: flow,\n            changeName: flow,\n            findPW: flow,\n            signOut: action.bound,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action,\n            saveSocketID: action,\n        });\n    };\n\n    public get user(): IUser | null {\n        return this._user;\n    };\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    };\n\n    public get socketID(): string | null {\n        return this._socketID;\n    };\n\n    public setUser(user: IUser | null): void {\n        this._user = user;\n    };\n\n    public setIsLogging(boolean: boolean): void {\n        this.isLogging = boolean;\n    };\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    };\n\n    public setSocketID(myID: string | null): void {\n        this._socketID = myID;\n    };\n\n    public saveSocketID(): void {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('entered', myID => {\n            this.setSocketID(myID);\n        });\n    };\n\n    public *signInWithToken() {\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (token) {\n                this.setIsLogging(true);\n                const { data: { message, account, nickName, token } } = yield authRepository.signInWidthToken();\n                    if (message === 'SignIn Success') {\n                        this.setUser({ account , nickName });\n                        localStorage.setItem('SerendyToken', token);\n                        this.setIsLogging(false);\n                        return true;\n                    };\n            };\n            this.setIsLogging(false);\n            return false;\n        } catch(err) {\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public *signIn(userData: ISignInData) {\n        this.setIsLogging(true);\n        try {\n            const { data: { message, account, nickName, token } } = yield authRepository.signIn(userData);\n            console.log(userData);\n            if (message === 'SignIn Success') {\n                this.setUser({ account, nickName });\n                localStorage.setItem('SerendyToken', token);\n                return true;\n            };\n            return false;\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        } finally {\n            this.setIsLogging(false);\n        };\n    };\n\n    public *signUp(userData: ISignUpData) {\n        try {\n            const { data: { message } } = yield authRepository.signUp(userData);\n            if (message === 'SignUp Success') {\n                return true;\n            };\n            return false;\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public *checkAccount(account: string) {\n        try {\n            const { data: { message } } = yield authRepository.checkAccount(account);\n            if (message === 'available') {\n                return true;\n            };\n            return false; // message = 'already exist'\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n    \n    public *changePW(data: IPassword) {\n        try {\n            const { data: { message }} = yield authRepository.changePassword(data);\n            if (message === 'Changed') {\n                alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n                return this.signOut();\n            };\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n    \n    public *changeName(nickName: INickName) {\n        try {\n            const { data: { message }} = yield authRepository.changeName(nickName);\n            if (message === 'Changed') {\n                alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`)\n                return this.signOut();\n            };\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n    \n    public *findPW(data: IFindPW) {\n        try {\n            const { data: { message }} = yield authRepository.findPW(data);\n            if (message === 'Not Exist') {\n                alert('일치하는 정보가 없습니다');\n                return false;\n            }\n            if (message === 'Valid User') {\n                alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n                return this.signOut();\n            };\n        } catch (err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public signOut(): boolean {\n        this.setUser(null);\n        localStorage.removeItem('SerendyToken');\n        return true;\n    };\n};\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}