{"ast":null,"code":"import { action, makeObservable, observable, runInAction } from 'mobx';\nimport userStore from './userStore';\nimport postRespository from '../repository/postRepository';\n\nclass PostStore {\n  constructor() {\n    this.sentPosts = [];\n    this.receivedPosts = [];\n    this.currentSentPost = null;\n    this.currentReceivedPost = null;\n    this.isLoading = false;\n    makeObservable(this, {\n      sentPosts: observable,\n      receivedPosts: observable,\n      currentSentPost: observable,\n      currentReceivedPost: observable,\n      isLoading: observable,\n      setSentPosts: action,\n      setReceivedPosts: action,\n      setCurrentSentPost: action,\n      setCurrentReceivedPost: action,\n      setIsLoading: action,\n      handlePost: action,\n      getSentPosts: action,\n      getReceivedPosts: action,\n      handleSentOne: action.bound,\n      handleReceivedOne: action.bound,\n      sendComment: action,\n      resetReceivedPosts: action,\n      resetSentPosts: action\n    });\n  }\n\n  setSentPosts(data) {\n    this.sentPosts = data;\n  }\n\n  setReceivedPosts(data) {\n    this.receivedPosts = data;\n  }\n\n  setCurrentSentPost(data) {\n    this.currentSentPost = data;\n  }\n\n  setCurrentReceivedPost(data) {\n    this.currentReceivedPost = data;\n  }\n\n  setIsLoading(boolean) {\n    this.isLoading = boolean;\n  }\n\n  async handlePost(content, setIsSent) {\n    try {\n      var _userStore$user, _userStore$user2;\n\n      if ((content === null || content === void 0 ? void 0 : content.length) === 0) {\n        return;\n      }\n\n      ;\n      const data = {\n        account: (_userStore$user = userStore.user) === null || _userStore$user === void 0 ? void 0 : _userStore$user.account,\n        nickName: (_userStore$user2 = userStore.user) === null || _userStore$user2 === void 0 ? void 0 : _userStore$user2.nickName,\n        content: content\n      };\n      const {\n        data: message\n      } = await postRespository.sendPost(data);\n      runInAction(() => {\n        if (message === 'Send Success') {\n          setIsSent();\n        }\n\n        ;\n      });\n    } catch (err) {\n      console.log(err);\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  }\n\n  async getSentPosts() {\n    this.setIsLoading(true);\n\n    try {\n      var _userStore$user3;\n\n      const {\n        data\n      } = await postRespository.getSentPosts((_userStore$user3 = userStore.user) === null || _userStore$user3 === void 0 ? void 0 : _userStore$user3.account);\n      runInAction(() => {\n        this.setSentPosts(data);\n        this.setIsLoading(false);\n      });\n    } catch (err) {\n      console.log(err);\n      alert('오류가 발생하였습니다');\n      return;\n    }\n\n    ;\n  }\n\n  async getReceivedPosts() {\n    this.setIsLoading(true);\n\n    try {\n      var _userStore$user4;\n\n      const {\n        data\n      } = await postRespository.getReceivePosts((_userStore$user4 = userStore.user) === null || _userStore$user4 === void 0 ? void 0 : _userStore$user4.account);\n      runInAction(() => {\n        this.setReceivedPosts(data);\n        this.setIsLoading(false);\n      });\n    } catch (err) {\n      console.log(err);\n      alert('오류가 발생하였습니다');\n      return;\n    }\n\n    ;\n  }\n\n  handleSentOne(_id) {\n    const post = this.sentPosts.find(x => x._id === _id);\n    post && this.setCurrentSentPost(post);\n  }\n\n  handleReceivedOne(_id) {\n    const post = this.receivedPosts.find(x => x._id === _id);\n    post && this.setCurrentReceivedPost(post);\n  }\n\n  async sendComment(content) {\n    try {\n      var _this$currentReceived, _this$currentReceived2, _userStore$user5;\n\n      if ((content === null || content === void 0 ? void 0 : content.length) === 0) {\n        return;\n      }\n\n      ;\n      const data = {\n        _id: (_this$currentReceived = this.currentReceivedPost) === null || _this$currentReceived === void 0 ? void 0 : _this$currentReceived._id,\n        toAccount: (_this$currentReceived2 = this.currentReceivedPost) === null || _this$currentReceived2 === void 0 ? void 0 : _this$currentReceived2.toAccount,\n        nickName: (_userStore$user5 = userStore.user) === null || _userStore$user5 === void 0 ? void 0 : _userStore$user5.nickName,\n        content: content\n      };\n      const {\n        data: {\n          message,\n          receivedPosts,\n          currentReceivedPost\n        }\n      } = await postRespository.sendComment(data);\n\n      if (message === 'Success') {\n        this.setReceivedPosts(receivedPosts);\n        this.setCurrentReceivedPost(currentReceivedPost);\n      }\n\n      ;\n    } catch (err) {\n      console.log(err);\n      alert('서버 점검중입니다');\n    }\n\n    ;\n  }\n\n  resetReceivedPosts() {\n    this.setReceivedPosts([]);\n  }\n\n  resetSentPosts() {\n    this.setSentPosts([]);\n  }\n\n}\n\n;\nconst postStore = new PostStore();\nexport default postStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/postStore.ts"],"names":["action","makeObservable","observable","runInAction","userStore","postRespository","PostStore","constructor","sentPosts","receivedPosts","currentSentPost","currentReceivedPost","isLoading","setSentPosts","setReceivedPosts","setCurrentSentPost","setCurrentReceivedPost","setIsLoading","handlePost","getSentPosts","getReceivedPosts","handleSentOne","bound","handleReceivedOne","sendComment","resetReceivedPosts","resetSentPosts","data","boolean","content","setIsSent","length","account","user","nickName","message","sendPost","err","console","log","alert","getReceivePosts","_id","post","find","x","toAccount","postStore"],"mappings":"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","sourcesContent":["import { action, makeObservable, observable, runInAction } from 'mobx';\nimport { ICurrentPost } from '../interfaces/index';\nimport userStore from './userStore';\nimport postRespository from '../repository/postRepository'\n\nclass PostStore {\n    public sentPosts: ICurrentPost[] = [];\n    public receivedPosts: ICurrentPost[] = [];\n    public currentSentPost: ICurrentPost | null = null\n    public currentReceivedPost: ICurrentPost | null = null;\n    public isLoading: boolean = false;\n\n    constructor() {\n        makeObservable(this, {\n            sentPosts: observable,\n            receivedPosts: observable,\n            currentSentPost: observable,\n            currentReceivedPost: observable,\n            isLoading: observable,\n            setSentPosts: action,\n            setReceivedPosts: action,\n            setCurrentSentPost: action,\n            setCurrentReceivedPost: action,\n            setIsLoading: action,\n            handlePost: action,\n            getSentPosts: action,\n            getReceivedPosts: action,\n            handleSentOne: action.bound,\n            handleReceivedOne: action.bound,\n            sendComment: action,\n            resetReceivedPosts: action,\n            resetSentPosts: action,\n        });\n    };\n\n    public setSentPosts(data: ICurrentPost[]): void {\n        this.sentPosts = data;\n    };\n\n    public setReceivedPosts(data: ICurrentPost[]): void {\n        this.receivedPosts = data;\n    };\n\n    public setCurrentSentPost(data: ICurrentPost): void {\n        this.currentSentPost = data;\n    };\n\n    public setCurrentReceivedPost(data: ICurrentPost): void {\n        this.currentReceivedPost = data;\n    };\n\n    public setIsLoading(boolean: boolean): void {\n        this.isLoading = boolean;\n    };\n\n    public async handlePost(content: string | undefined, setIsSent: () => void): Promise<void> {\n        try {\n            if (content?.length === 0) {\n                return;\n            };\n            const data = {\n                account: userStore.user?.account,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: message } = await postRespository.sendPost(data);\n            runInAction(() => {\n                if ((message === 'Send Success')) {\n                    setIsSent();\n                };\n            })\n        } catch(err) {\n            console.log(err);\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    public async getSentPosts(): Promise<void> {\n        this.setIsLoading(true);\n        try {\n            const { data } = await postRespository.getSentPosts(userStore.user?.account);\n            runInAction(() => {\n                this.setSentPosts(data);\n                this.setIsLoading(false);\n            });\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public async getReceivedPosts(): Promise<void> {\n        this.setIsLoading(true);\n        try {\n            const { data } = await postRespository.getReceivePosts(userStore.user?.account);\n            runInAction(() => {\n                this.setReceivedPosts(data);\n                this.setIsLoading(false);\n            });\n        } catch(err) {\n            console.log(err);\n            alert('오류가 발생하였습니다');\n            return;\n        };\n    };\n\n    public handleSentOne(_id: string): void {\n        const post = this.sentPosts.find(x => x._id === _id);\n        post && this.setCurrentSentPost(post);\n    };\n\n    public handleReceivedOne(_id: string): void {\n        const post = this.receivedPosts.find(x => x._id === _id);\n        post && this.setCurrentReceivedPost(post);\n    };\n\n    public async sendComment(content: string | undefined): Promise<void> {\n        try {\n            if (content?.length === 0) {\n                return;\n            };\n            const data = {\n                _id: this.currentReceivedPost?._id,\n                toAccount: this.currentReceivedPost?.toAccount,\n                nickName: userStore.user?.nickName,\n                content: content,\n            };\n            const { data: { message, receivedPosts, currentReceivedPost}} = await postRespository.sendComment(data);\n            if ((message === 'Success')) {\n                this.setReceivedPosts(receivedPosts);\n                this.setCurrentReceivedPost(currentReceivedPost);\n            };\n        } catch(err) {\n            console.log(err);\n            alert('서버 점검중입니다');\n        };\n    };\n\n    public resetReceivedPosts(): void {\n        this.setReceivedPosts([]);\n    };\n\n    public resetSentPosts(): void {\n        this.setSentPosts([]);\n    };\n};\n\nconst postStore = new PostStore();\nexport default postStore;"]},"metadata":{},"sourceType":"module"}