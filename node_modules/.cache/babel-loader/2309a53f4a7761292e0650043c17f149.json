{"ast":null,"code":"import _toConsumableArray from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useRef}from'react';import userStore from'../store/userStore';export var useChat=function useChat(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isSearching=_useState2[0],setIsSearching=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isMatched=_useState4[0],setIsMatched=_useState4[1];var _useState5=useState('hidden'),_useState6=_slicedToArray(_useState5,2),display=_useState6[0],setDisplay=_useState6[1];// 서버에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n// 해결방법을 찾다가 스테이트를 나눠서 동작하기로 했다.\nvar _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),chatLog=_useState8[0],setChatLog=_useState8[1];// 메세지 내역을 담아두는 배열\nvar _useState9=useState({nickName:'',message:'',socketID:''}),_useState10=_slicedToArray(_useState9,2),recentChat=_useState10[0],setRecentChat=_useState10[1];// 서버에서 보내주는 메세지를 담는 state\nvar _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),chatFinished=_useState12[0],setChatFinished=_useState12[1];var sendBtn=useRef(null);var input=useRef(null);var screen=useRef(null);var handleEnter=function handleEnter(e){if(e.key==='Enter'){var _sendBtn$current;(_sendBtn$current=sendBtn.current)===null||_sendBtn$current===void 0?void 0:_sendBtn$current.click();}};var handleCancel=function handleCancel(){var _userStore$userSocket;(_userStore$userSocket=userStore.userSocket)===null||_userStore$userSocket===void 0?void 0:_userStore$userSocket.emit('cancel');};var handleFind=function handleFind(){var _userStore$userSocket2;(_userStore$userSocket2=userStore.userSocket)===null||_userStore$userSocket2===void 0?void 0:_userStore$userSocket2.emit('find');};var handleSearch=function handleSearch(){if(!isSearching){setIsSearching(true);handleFind();}else{// 도중 취소\nsetIsSearching(false);handleCancel();}};var getMatchedUser=function getMatchedUser(){var _userStore$userSocket3;(_userStore$userSocket3=userStore.userSocket)===null||_userStore$userSocket3===void 0?void 0:_userStore$userSocket3.on('matched',function(){setIsMatched(true);setDisplay('visible');setChatLog([{nickName:'SERENDY',message:'상대와 대화가 시작되었어요!',socketID:'admin'}]);});};var handleSendMsg=function handleSendMsg(){var _input$current;if(((_input$current=input.current)===null||_input$current===void 0?void 0:_input$current.value.length)!==0){var _userStore$user,_input$current2,_userStore$userSocket4;var nickName=(_userStore$user=userStore.user)===null||_userStore$user===void 0?void 0:_userStore$user.nickName;var message=(_input$current2=input.current)===null||_input$current2===void 0?void 0:_input$current2.value;var data={nickName:nickName,message:message};(_userStore$userSocket4=userStore.userSocket)===null||_userStore$userSocket4===void 0?void 0:_userStore$userSocket4.emit('chat',data);input.current.value='';}else{return;}};var scrollToBottom=function scrollToBottom(){var _screen$current,_screen$current2;if(((_screen$current=screen.current)===null||_screen$current===void 0?void 0:_screen$current.scrollHeight)&&((_screen$current2=screen.current)===null||_screen$current2===void 0?void 0:_screen$current2.clientHeight)){var _screen$current3;var scroll=screen.current.scrollHeight-screen.current.clientHeight;(_screen$current3=screen.current)===null||_screen$current3===void 0?void 0:_screen$current3.scrollTo(0,scroll);}else{return;}};var handleReceiveMsg=function handleReceiveMsg(){var _userStore$userSocket5;(_userStore$userSocket5=userStore.userSocket)===null||_userStore$userSocket5===void 0?void 0:_userStore$userSocket5.on('receive',function(data,socketID){setRecentChat({nickName:data.nickName,message:data.message,socketID:socketID});});};var handlePushChat=function handlePushChat(){recentChat.message.length>0&&setChatLog([].concat(_toConsumableArray(chatLog),[recentChat]));};var handleFinished=function handleFinished(){setChatFinished(true);setRecentChat({nickName:'SERENDY',message:'대화가 종료되었어요!',socketID:'admin'});};var stopChat=function stopChat(){var _userStore$userSocket6;(_userStore$userSocket6=userStore.userSocket)===null||_userStore$userSocket6===void 0?void 0:_userStore$userSocket6.emit('stop chat');handleFinished();};var chatStopped=function chatStopped(){var _userStore$userSocket7;(_userStore$userSocket7=userStore.userSocket)===null||_userStore$userSocket7===void 0?void 0:_userStore$userSocket7.on('is ended',function(){handleFinished();});};var report=function report(){alert('신고 접수되었습니다');reStart();};var reStart=function reStart(){setChatLog([]);setIsSearching(false);setChatFinished(false);setIsMatched(false);};return{isSearching:isSearching,isMatched:isMatched,display:display,sendBtn:sendBtn,input:input,screen:screen,chatLog:chatLog,recentChat:recentChat,chatFinished:chatFinished,setRecentChat:setRecentChat,setChatLog:setChatLog,handleEnter:handleEnter,handleSendMsg:handleSendMsg,handleSearch:handleSearch,handleReceiveMsg:handleReceiveMsg,handlePushChat:handlePushChat,getMatchedUser:getMatchedUser,stopChat:stopChat,setChatFinished:setChatFinished,report:report,reStart:reStart,chatStopped:chatStopped,scrollToBottom:scrollToBottom};};","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/useChat.ts"],"names":["useState","useRef","userStore","useChat","isSearching","setIsSearching","isMatched","setIsMatched","display","setDisplay","chatLog","setChatLog","nickName","message","socketID","recentChat","setRecentChat","chatFinished","setChatFinished","sendBtn","input","screen","handleEnter","e","key","current","click","handleCancel","userSocket","emit","handleFind","handleSearch","getMatchedUser","on","handleSendMsg","value","length","user","data","scrollToBottom","scrollHeight","clientHeight","scroll","scrollTo","handleReceiveMsg","handlePushChat","handleFinished","stopChat","chatStopped","report","alert","reStart"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react'\nimport { VisibilityType } from '../type';\nimport userStore from '../store/userStore';\n\nexport interface IRecentChat {\n    nickName: string;\n    message: string;\n    socketID: string;\n}\n\nexport const useChat = () => {\n    const [isSearching, setIsSearching] = useState<boolean>(false);\n    const [isMatched, setIsMatched] = useState<boolean>(false);\n    const [display, setDisplay] = useState<VisibilityType>('hidden');\n    // 서버에서 오는 메세지를 그대로 넣었을 때 렌더링이 통째로 되는 문제가 있어서\n    // 해결방법을 찾다가 스테이트를 나눠서 동작하기로 했다.\n    const [chatLog, setChatLog] = useState<IRecentChat[]>([]); // 메세지 내역을 담아두는 배열\n    const [recentChat, setRecentChat] = useState<IRecentChat>({ nickName: '', message: '', socketID: '' }); // 서버에서 보내주는 메세지를 담는 state\n    const [chatFinished, setChatFinished] = useState<boolean>(false);\n    const sendBtn = useRef<HTMLButtonElement>(null);\n    const input = useRef<HTMLInputElement>(null);\n    const screen = useRef<HTMLDivElement>(null);\n    const handleEnter = (e: React.KeyboardEvent): void => {\n        if (e.key === 'Enter') {\n            sendBtn.current?.click();\n        }\n    }\n\n    const handleCancel = (): void => {\n        userStore.userSocket?.emit('cancel');\n    }\n\n    const handleFind = (): void => {\n        userStore.userSocket?.emit('find');\n    }\n\n    const handleSearch = (): void => {\n        if (!isSearching) {\n            setIsSearching(true);\n            handleFind();\n        } else { // 도중 취소\n            setIsSearching(false);\n            handleCancel();\n        }\n    }\n\n    const getMatchedUser = (): void => {\n        userStore.userSocket?.on('matched', () => {\n            setIsMatched(true);\n            setDisplay('visible');\n            setChatLog([{\n                nickName: 'SERENDY',\n                message: '상대와 대화가 시작되었어요!',\n                socketID: 'admin',\n            }]);\n        })\n    }\n\n    const handleSendMsg = (): void => {\n        if (input.current?.value.length !== 0) {\n            const nickName = userStore.user?.nickName;\n            const message = input.current?.value;\n            const data = {\n                nickName: nickName,\n                message: message,\n            }\n            userStore.userSocket?.emit('chat', data);\n            input.current!.value = ''\n\n        } else {\n            return;\n        }\n    }\n\n    const scrollToBottom = (): void => {\n        if (screen.current?.scrollHeight && screen.current?.clientHeight) {\n            const scroll = screen.current.scrollHeight - screen.current.clientHeight;\n            screen.current?.scrollTo(0, scroll);\n        } else {\n            return;\n        }\n    }\n\n    const handleReceiveMsg = () => {\n        userStore.userSocket?.on('receive', (data, socketID)=> {\n            setRecentChat({\n                nickName: data.nickName,\n                message: data.message,\n                socketID: socketID,\n            })\n        })\n    }\n\n    const handlePushChat = (): void => {\n        recentChat.message.length > 0 && setChatLog([...chatLog, recentChat]);\n    }\n\n    const handleFinished = () => {\n        setChatFinished(true);\n        setRecentChat({\n            nickName: 'SERENDY',\n            message: '대화가 종료되었어요!',\n            socketID: 'admin',\n        });\n    }\n\n    const stopChat = (): void => {\n        userStore.userSocket?.emit('stop chat');\n        handleFinished();\n    }\n\n    const chatStopped = (): void => {\n        userStore.userSocket?.on('is ended', () => {\n            handleFinished();\n        })\n    }\n\n    const report = (): void => {\n        alert('신고 접수되었습니다');\n        reStart();\n    }\n\n    const reStart = (): void => {\n        setChatLog([]);\n        setIsSearching(false);\n        setChatFinished(false);\n        setIsMatched(false);\n    }\n\n    return {\n        isSearching,\n        isMatched,\n        display,\n        sendBtn,\n        input,\n        screen,\n        chatLog,\n        recentChat,\n        chatFinished,\n        setRecentChat,\n        setChatLog,\n        handleEnter,\n        handleSendMsg,\n        handleSearch,\n        handleReceiveMsg,\n        handlePushChat,\n        getMatchedUser,\n        stopChat,\n        setChatFinished,\n        report,\n        reStart,\n        chatStopped,\n        scrollToBottom,\n    }\n}"]},"metadata":{},"sourceType":"module"}