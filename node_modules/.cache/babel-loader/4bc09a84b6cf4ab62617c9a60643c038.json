{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{action,computed,makeObservable,observable}from\"mobx\";import serendyRepository from'../repository/serendyRepository';var UserStore=/*#__PURE__*/function(){function UserStore(){_classCallCheck(this,UserStore);this._isSignIn=false;this._user=null;this._isLogging=false;this._userSocket=null;this._socketID=null;makeObservable(this,{_isLogging:observable,_isSignIn:observable,_user:observable,_userSocket:observable,_socketID:observable,isLogging:computed,isSignIn:computed,user:computed,userSocket:computed,socketID:computed,setIsSignIn:action,setUser:action,signInWithToken:action,signIn:action,signOut:action,setIsLogging:action,setUserSocket:action,setSocketID:action});}_createClass(UserStore,[{key:\"isSignIn\",get:function get(){return this._isSignIn;}},{key:\"user\",get:function get(){return this._user;}},{key:\"isLogging\",get:function get(){return this._isLogging;}},{key:\"userSocket\",get:function get(){return this._userSocket;}},{key:\"socketID\",get:function get(){return this._socketID;}},{key:\"setIsSignIn\",value:function setIsSignIn(){this._isSignIn=true;}},{key:\"setUser\",value:function setUser(user){this._user=user;}},{key:\"setIsLogging\",value:function setIsLogging(boolean){this._isLogging=boolean;}},{key:\"setUserSocket\",value:function setUserSocket(data){this._userSocket=data;}},{key:\"setSocketID\",value:function setSocketID(myID){this._socketID=myID;}},{key:\"saveSocketID\",value:function saveSocketID(){var _this$userSocket,_this$userSocket2,_this=this;(_this$userSocket=this.userSocket)===null||_this$userSocket===void 0?void 0:_this$userSocket.emit('enter');(_this$userSocket2=this.userSocket)===null||_this$userSocket2===void 0?void 0:_this$userSocket2.on('entered',function(myID){_this.setSocketID(myID);});}// 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n// 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n// App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n},{key:\"signInWithToken\",value:function(){var _signInWithToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var token,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:this.setIsLogging(true);_context.prev=1;token=localStorage.getItem('SerendyToken');if(token){_context.next=8;break;}this.setIsLogging(false);return _context.abrupt(\"return\");case 8:if(!token){_context.next=18;break;}_context.next=11;return serendyRepository.signInWidthToken();case 11:response=_context.sent;if(!(response.data.message==='Invalid Token')){_context.next=17;break;}// 토큰만료 또는 없음\nthis.setIsLogging(false);return _context.abrupt(\"return\");case 17:if(response.data.message==='SignIn Success'){this.setUser(response.data.nickName);this.setIsSignIn();localStorage.setItem('SerendyToken',response.data.token);this.setIsLogging(false);}case 18:_context.next=24;break;case 20:_context.prev=20;_context.t0=_context[\"catch\"](1);this.setIsLogging(false);alert('서버 점검중입니다');case 24:case\"end\":return _context.stop();}}},_callee,this,[[1,20]]);}));function signInWithToken(){return _signInWithToken.apply(this,arguments);}return signInWithToken;}()},{key:\"signIn\",value:function(){var _signIn=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userData,setError,push){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:this.setIsLogging(true);_context2.prev=1;_context2.next=4;return serendyRepository.signIn(userData);case 4:response=_context2.sent;if(response.data.message==='SignIn Fail'){this.setIsLogging(false);setError();}else if(response.data.message==='SignIn Success'){this.setUser(response.data.nickName);this.setIsSignIn();localStorage.setItem('SerendyToken',response.data.token);this.setIsLogging(false);push();}_context2.next=12;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](1);this.setIsLogging(false);alert('서버 점검중입니다');case 12:case\"end\":return _context2.stop();}}},_callee2,this,[[1,8]]);}));function signIn(_x,_x2,_x3){return _signIn.apply(this,arguments);}return signIn;}()},{key:\"signOut\",value:function signOut(push){this._isSignIn=false;this._user=null;localStorage.removeItem('SerendyToken');push();}}]);return UserStore;}();var userStore=new UserStore();export default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","makeObservable","observable","serendyRepository","UserStore","_isSignIn","_user","_isLogging","_userSocket","_socketID","isLogging","isSignIn","user","userSocket","socketID","setIsSignIn","setUser","signInWithToken","signIn","signOut","setIsLogging","setUserSocket","setSocketID","boolean","data","myID","emit","on","token","localStorage","getItem","signInWidthToken","response","message","nickName","setItem","alert","userData","setError","push","removeItem","userStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport { ISignInData } from '../components/SignIn/SignInBox';\nimport serendyRepository from '../repository/serendyRepository';\nimport { Socket } from 'socket.io-client';\n\ninterface IUser {\n    nickName: string;\n}\n\ninterface IUserStore {\n    isLogging: boolean;\n    isSignIn: boolean;\n    user: IUser | null;\n    userSocket: Socket | null;\n    socketID: string | null;\n}\n\nclass UserStore implements IUserStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | null = null;\n    private _isLogging: boolean = false;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n\n    constructor() {\n        makeObservable<UserStore, '_isLogging' | '_isSignIn' | '_user' | '_userSocket' | '_socketID'>(this, {\n            _isLogging: observable,\n            _isSignIn: observable,\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: computed,\n            isSignIn: computed,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setIsSignIn: action,\n            setUser: action,\n            signInWithToken: action,\n            signIn: action,\n            signOut: action,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action,\n        })\n    }\n\n    public get isSignIn(): boolean {\n        return this._isSignIn;\n    }\n\n    public get user(): IUser | null {\n        return this._user;\n    }\n\n    public get isLogging(): boolean {\n        return this._isLogging;\n    }\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    }\n\n    public get socketID(): string | null {\n        return this._socketID;\n    }\n\n    public setIsSignIn(): void {\n        this._isSignIn = true;\n    }\n\n    public setUser(user: IUser): void {\n        this._user = user;\n    }\n\n    public setIsLogging(boolean: boolean): void {\n        this._isLogging = boolean;\n    }\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    }\n\n    public setSocketID(myID: string | null): void {\n        this._socketID = myID;\n    }\n\n    public saveSocketID(): void {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('entered', myID => {\n            this.setSocketID(myID);\n        });\n    }\n\n    \n\n    // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n    // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n    // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n    async signInWithToken() {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (!token) {\n                this.setIsLogging(false);\n                return;\n            } else if (token) {\n                const response = await serendyRepository.signInWidthToken();\n                if ((response.data.message === 'Invalid Token')) { // 토큰만료 또는 없음\n                    this.setIsLogging(false);\n                    return;\n                } else if ((response.data.message === 'SignIn Success')) {\n                    this.setUser(response.data.nickName);\n                    this.setIsSignIn();\n                    localStorage.setItem('SerendyToken', response.data.token);\n                    this.setIsLogging(false);\n                }\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다')\n        }\n    }\n\n    async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        this.setIsLogging(true);\n        try {\n            const response = await serendyRepository.signIn(userData);\n            if ((response.data.message === 'SignIn Fail')) {\n                this.setIsLogging(false);\n                setError();\n            } else if ((response.data.message === 'SignIn Success')) {\n                this.setUser(response.data.nickName);\n                this.setIsSignIn();\n                localStorage.setItem('SerendyToken', response.data.token);\n                this.setIsLogging(false);\n                push();\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        }\n    }\n\n    signOut(push: () => void): void {\n        this._isSignIn = false;\n        this._user = null;\n        localStorage.removeItem('SerendyToken');\n        push();\n    }\n}\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}