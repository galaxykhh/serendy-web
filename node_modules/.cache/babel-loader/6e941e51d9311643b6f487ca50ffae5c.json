{"ast":null,"code":"import { computed, makeObservable, observable } from \"mobx\";\n\nclass AuthStore {\n  constructor() {\n    this._isLogged = false;\n    this._user = {\n      nickName: ''\n    };\n    makeObservable(this, {\n      _isLogged: observable,\n      _user: observable,\n      isLogged: computed,\n      user: computed\n    });\n  }\n\n  get isLogged() {\n    return this._isLogged;\n  }\n\n  get user() {\n    return this._user;\n  } // setAccount(account: string): void {\n  //     this._account = account;\n  // };\n  // setPassword(password: string): void {\n  //     this._password = password;\n  // };\n\n\n}\n\nconst authStore = new AuthStore();\nexport default authStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/src/store/authStore.ts"],"names":["computed","makeObservable","observable","AuthStore","constructor","_isLogged","_user","nickName","isLogged","user","authStore"],"mappings":"AAAA,SAAiBA,QAAjB,EAA2BC,cAA3B,EAA2CC,UAA3C,QAA6D,MAA7D;;AAYA,MAAMC,SAAN,CAAsC;AAKlCC,EAAAA,WAAW,GAAG;AAAA,SAHNC,SAGM,GAHe,KAGf;AAAA,SAFNC,KAEM,GAFS;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAET;AACVN,IAAAA,cAAc,CAAmC,IAAnC,EAAyC;AACnDI,MAAAA,SAAS,EAAEH,UADwC;AAEnDI,MAAAA,KAAK,EAAEJ,UAF4C;AAGnDM,MAAAA,QAAQ,EAAER,QAHyC;AAInDS,MAAAA,IAAI,EAAET;AAJ6C,KAAzC,CAAd;AAMH;;AAEW,MAARQ,QAAQ,GAAY;AACpB,WAAO,KAAKH,SAAZ;AACH;;AAEO,MAAJI,IAAI,GAAU;AACd,WAAO,KAAKH,KAAZ;AACH,GApBiC,CAsBlC;AACA;AACA;AAEA;AACA;AACA;;;AA5BkC;;AA+BtC,MAAMI,SAAS,GAAG,IAAIP,SAAJ,EAAlB;AACA,eAAeO,SAAf","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport serendyRepository from \"../repository/serendyRepository\";\n\ninterface IUser {\n    nickName: string;\n}\n\ninterface IAuthStore {\n    isLogged: boolean;\n    user: IUser;\n}\n\nclass AuthStore implements IAuthStore {\n\n    private _isLogged: boolean = false;\n    private _user: IUser = { nickName: '' };\n\n    constructor() {\n        makeObservable<AuthStore, '_isLogged' | '_user'>(this, {\n            _isLogged: observable,\n            _user: observable,\n            isLogged: computed,\n            user: computed,\n        })\n    }\n\n    get isLogged(): boolean {\n        return this._isLogged;\n    }\n\n    get user(): IUser {\n        return this._user;\n    }\n\n    // setAccount(account: string): void {\n    //     this._account = account;\n    // };\n\n    // setPassword(password: string): void {\n    //     this._password = password;\n    // };\n}\n\nconst authStore = new AuthStore();\nexport default authStore;"]},"metadata":{},"sourceType":"module"}