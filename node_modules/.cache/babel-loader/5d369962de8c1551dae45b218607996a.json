{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport userStore from '../store/userStore';\nimport postRepository from '../repository/postRepository';\nexport const usePost = () => {\n  _s();\n\n  const [isSent, setIsSent] = useState(false);\n  const postArea = useRef(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sentPosts, setSentPosts] = useState([]);\n  const [receivedPosts, setReceivedPosts] = useState([]);\n  const [currentPost, setCurrentPost] = useState();\n\n  const handleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  const handlePost = async () => {\n    try {\n      var _userStore$user, _userStore$user2, _postArea$current;\n\n      const data = {\n        account: (_userStore$user = userStore.user) === null || _userStore$user === void 0 ? void 0 : _userStore$user.account,\n        nickName: (_userStore$user2 = userStore.user) === null || _userStore$user2 === void 0 ? void 0 : _userStore$user2.nickName,\n        content: (_postArea$current = postArea.current) === null || _postArea$current === void 0 ? void 0 : _postArea$current.value\n      };\n      const response = await postRepository.sendPost(data);\n\n      if (response.data.message === 'Send Success') {\n        setIsSent(true);\n      }\n    } catch (err) {\n      alert('서버가 점검중이에요');\n    }\n\n    ;\n  };\n\n  const getSentPosts = async () => {\n    setIsLoading(true);\n\n    try {\n      var _userStore$user3;\n\n      const response = await postRepository.getSentPosts((_userStore$user3 = userStore.user) === null || _userStore$user3 === void 0 ? void 0 : _userStore$user3.account);\n      const data = response.data;\n      setSentPosts(data);\n      setIsLoading(false);\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n\n    ;\n  };\n\n  const getReceivedPosts = async () => {\n    setIsLoading(true);\n\n    try {\n      var _userStore$user4;\n\n      const response = await postRepository.getReceivePosts((_userStore$user4 = userStore.user) === null || _userStore$user4 === void 0 ? void 0 : _userStore$user4.account);\n      const posts = response.data;\n      setReceivedPosts(posts);\n      setIsLoading(false);\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n\n    ;\n  };\n\n  const showSentOne = _id => {\n    const post = sentPosts.find(x => x._id === _id);\n    setCurrentPost(post);\n    console.log(post);\n  };\n\n  const showReceivedOne = _id => {\n    const post = receivedPosts.find(x => x._id === _id);\n    setCurrentPost(post);\n    console.log(post);\n  };\n\n  const sendComment = async () => {};\n\n  return {\n    isLoading,\n    isSent,\n    postArea,\n    sentPosts,\n    receivedPosts,\n    currentPost,\n    handleLoading,\n    setIsSent,\n    handlePost,\n    getSentPosts,\n    getReceivedPosts,\n    showSentOne,\n    showReceivedOne,\n    sendComment\n  };\n};\n\n_s(usePost, \"xyHVkB8uyl9hr72POwPjM1T9w0Q=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/usePost.ts"],"names":["useRef","useState","userStore","postRepository","usePost","isSent","setIsSent","postArea","isLoading","setIsLoading","sentPosts","setSentPosts","receivedPosts","setReceivedPosts","currentPost","setCurrentPost","handleLoading","handlePost","data","account","user","nickName","content","current","value","response","sendPost","message","err","alert","getSentPosts","console","log","getReceivedPosts","getReceivePosts","posts","showSentOne","_id","post","find","x","showReceivedOne","sendComment"],"mappings":"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","sourcesContent":["\nimport { useRef, useState } from 'react'\nimport userStore from '../store/userStore';\nimport postRepository from '../repository/postRepository';\nimport { IComment } from '../components/SenderPage/View';\n\nexport interface ISendPost {\n    account: string | null | undefined;\n    nickName: string | null | undefined;\n    content: string | undefined;\n}\n\nexport interface ICurrentPost {\n    _id: string;\n    toAccount: string;\n    nickName: string;\n    fromAccount: string;\n    content: string;\n    comment: IComment | undefined;\n}\n\nexport const usePost = () => {\n    const [isSent, setIsSent] = useState<boolean>(false);\n    const postArea = useRef<HTMLTextAreaElement>(null);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [sentPosts, setSentPosts] = useState<any[]>([]);\n    const [receivedPosts, setReceivedPosts] = useState<any[]>([]);\n    const [currentPost, setCurrentPost] = useState<ICurrentPost>();\n\n    const handleLoading = (): void => {\n        setIsLoading(!isLoading);\n    };\n\n    const handlePost = async (): Promise<void> => {\n        try {\n            const data = {\n                account: userStore.user?.account,\n                nickName: userStore.user?.nickName,\n                content: postArea.current?.value,\n            }\n            const response = await postRepository.sendPost(data);\n            if ((response.data.message === 'Send Success')) {\n                setIsSent(true);\n            }\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    const getSentPosts = async (): Promise<void> => {\n        setIsLoading(true);\n        try {\n            const response = await postRepository.getSentPosts(userStore.user?.account);\n            const data = response.data;\n            setSentPosts(data);\n            setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            return;\n        };\n    };\n\n    const getReceivedPosts = async (): Promise<void> => {\n        setIsLoading(true);\n        try {\n            const response = await postRepository.getReceivePosts(userStore.user?.account);\n            const posts = response.data;\n            setReceivedPosts(posts);\n            setIsLoading(false);\n        } catch(err) {\n            console.log(err);\n            return;\n        };\n    };\n\n    const showSentOne = (_id: string): void => {\n        const post = sentPosts.find(x => x._id === _id);\n        setCurrentPost(post);\n        console.log(post);\n    };\n\n    const showReceivedOne = (_id: string): void => {\n        const post = receivedPosts.find(x => x._id === _id);\n        setCurrentPost(post);\n        console.log(post);\n    };\n\n    const sendComment = async (): Promise<void> => {\n        \n    }\n\n    return {\n        isLoading,\n        isSent,\n        postArea,\n        sentPosts,\n        receivedPosts,\n        currentPost,\n        handleLoading,\n        setIsSent,\n        handlePost,\n        getSentPosts,\n        getReceivedPosts,\n        showSentOne,\n        showReceivedOne,\n        sendComment,\n    };\n};"]},"metadata":{},"sourceType":"module"}