{"ast":null,"code":"import _regeneratorRuntime from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/hyeonghan/VSCode/React/Serendy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{action,computed,makeObservable,observable}from\"mobx\";import authRepository from'../repository/authRepository';var UserStore=/*#__PURE__*/function(){function UserStore(){_classCallCheck(this,UserStore);this._isSignIn=false;this._user=null;this._isLogging=false;this._userSocket=null;this._socketID=null;makeObservable(this,{_isLogging:observable,_isSignIn:observable,_user:observable,_userSocket:observable,_socketID:observable,isLogging:computed,isSignIn:computed,user:computed,userSocket:computed,socketID:computed,setIsSignIn:action,setUser:action,signInWithToken:action,signIn:action,signOut:action,changePW:action,setIsLogging:action,setUserSocket:action,setSocketID:action});}_createClass(UserStore,[{key:\"isSignIn\",get:function get(){return this._isSignIn;}},{key:\"user\",get:function get(){return this._user;}},{key:\"isLogging\",get:function get(){return this._isLogging;}},{key:\"userSocket\",get:function get(){return this._userSocket;}},{key:\"socketID\",get:function get(){return this._socketID;}},{key:\"setIsSignIn\",value:function setIsSignIn(status){this._isSignIn=status;}},{key:\"setUser\",value:function setUser(user){this._user=user;}},{key:\"setIsLogging\",value:function setIsLogging(boolean){this._isLogging=boolean;}},{key:\"setUserSocket\",value:function setUserSocket(data){this._userSocket=data;}},{key:\"setSocketID\",value:function setSocketID(myID){this._socketID=myID;}},{key:\"saveSocketID\",value:function saveSocketID(){var _this$userSocket,_this$userSocket2,_this=this;(_this$userSocket=this.userSocket)===null||_this$userSocket===void 0?void 0:_this$userSocket.emit('enter');(_this$userSocket2=this.userSocket)===null||_this$userSocket2===void 0?void 0:_this$userSocket2.on('entered',function(myID){_this.setSocketID(myID);});}// 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n// 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n// App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n},{key:\"signInWithToken\",value:function(){var _signInWithToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(push){var token,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:this.setIsLogging(true);_context.prev=1;token=localStorage.getItem('SerendyToken');if(token){_context.next=8;break;}this.setIsLogging(false);return _context.abrupt(\"return\");case 8:if(!token){_context.next=18;break;}_context.next=11;return authRepository.signInWidthToken();case 11:response=_context.sent;if(!(response.data.message==='Invalid Token')){_context.next=17;break;}// 토큰만료 또는 없음\nthis.setIsLogging(false);return _context.abrupt(\"return\");case 17:if(response.data.message==='SignIn Success'){this.setUser({account:response.data.account,nickName:response.data.nickName});this.setIsSignIn(true);localStorage.setItem('SerendyToken',response.data.token);this.setIsLogging(false);push();}case 18:_context.next=24;break;case 20:_context.prev=20;_context.t0=_context[\"catch\"](1);this.setIsLogging(false);alert('서버 점검중입니다');case 24:case\"end\":return _context.stop();}}},_callee,this,[[1,20]]);}));function signInWithToken(_x){return _signInWithToken.apply(this,arguments);}return signInWithToken;}()},{key:\"signIn\",value:function(){var _signIn=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userData,setError,push){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:this.setIsLogging(true);_context2.prev=1;_context2.next=4;return authRepository.signIn(userData);case 4:response=_context2.sent;if(response.data.message==='SignIn Fail'){this.setIsLogging(false);setError();}else if(response.data.message==='SignIn Success'){this.setUser({account:response.data.account,nickName:response.data.nickName});this.setIsSignIn(true);localStorage.setItem('SerendyToken',response.data.token);this.setIsLogging(false);push();}_context2.next=12;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](1);this.setIsLogging(false);alert('서버 점검중입니다');case 12:case\"end\":return _context2.stop();}}},_callee2,this,[[1,8]]);}));function signIn(_x2,_x3,_x4){return _signIn.apply(this,arguments);}return signIn;}()},{key:\"signOut\",value:function signOut(push){this.setIsSignIn(false);this.setUser({account:null,nickName:null});localStorage.removeItem('SerendyToken');push();}},{key:\"changePW\",value:function(){var _changePW=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data,push){var response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return authRepository.changePassword(data);case 3:response=_context3.sent;if(response.data.message==='Changed'){alert(\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uBCC0\\uACBD\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\n\\uB2E4\\uC2DC \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694\");this.signOut(push);}_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);alert('서버가 점검중이에요');case 10:;case 11:case\"end\":return _context3.stop();}}},_callee3,this,[[0,7]]);}));function changePW(_x5,_x6){return _changePW.apply(this,arguments);}return changePW;}()},{key:\"changeName\",value:function(){var _changeName=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(nickName,push){var response;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return authRepository.changeName(nickName);case 3:response=_context4.sent;if(response.data.message==='Changed'){alert(\"\\uB2C9\\uB124\\uC784\\uC774 \\uBCC0\\uACBD\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\n\\uB2E4\\uC2DC \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694\");this.signOut(push);}_context4.next=10;break;case 7:_context4.prev=7;_context4.t0=_context4[\"catch\"](0);alert('서버가 점검중이에요');case 10:;case 11:case\"end\":return _context4.stop();}}},_callee4,this,[[0,7]]);}));function changeName(_x7,_x8){return _changeName.apply(this,arguments);}return changeName;}()},{key:\"findPW\",value:function(){var _findPW=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data,push){var response;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return authRepository.findPW(data);case 3:response=_context5.sent;if(!(response.data.message==='Not Exist')){_context5.next=8;break;}return _context5.abrupt(\"return\",alert('일치하는 정보가 없습니다'));case 8:if(response.data.message==='Valid User'){alert(\"\\uC784\\uC2DC\\uB85C \\uC554\\uD638 \\uBA54\\uC138\\uC9C0\\uAC00\\n\\uBE44\\uBC00\\uBC88\\uD638\\uB85C \\uC124\\uC815\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\\n\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\\uC744 \\uAF2D \\uD574\\uC8FC\\uC138\\uC694\");push();}case 9:;_context5.next=15;break;case 12:_context5.prev=12;_context5.t0=_context5[\"catch\"](0);alert('서버가 점검중이에요');case 15:;case 16:case\"end\":return _context5.stop();}}},_callee5,null,[[0,12]]);}));function findPW(_x9,_x10){return _findPW.apply(this,arguments);}return findPW;}()}]);return UserStore;}();;var userStore=new UserStore();export default userStore;","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/store/userStore.ts"],"names":["action","computed","makeObservable","observable","authRepository","UserStore","_isSignIn","_user","_isLogging","_userSocket","_socketID","isLogging","isSignIn","user","userSocket","socketID","setIsSignIn","setUser","signInWithToken","signIn","signOut","changePW","setIsLogging","setUserSocket","setSocketID","status","boolean","data","myID","emit","on","push","token","localStorage","getItem","signInWidthToken","response","message","account","nickName","setItem","alert","userData","setError","removeItem","changePassword","changeName","findPW","userStore"],"mappings":"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","sourcesContent":["import { action, computed, makeObservable, observable } from \"mobx\";\nimport { ISignInData } from '../components/SignIn/SignInBox';\nimport { IPassword } from '../components/MyPage/ChangePWBox';\nimport authRepository from '../repository/authRepository';\nimport { Socket } from 'socket.io-client';\nimport { INickName } from '../components/MyPage/ChangeNameBox';\nimport { IFindPW } from '../components/FindPW/FindPWBox';\ninterface IUser {\n    account: string | null;\n    nickName: string | null;\n}\n\ninterface IUserStore {\n    isLogging: boolean;\n    isSignIn: boolean;\n    user: IUser | null;\n    userSocket: Socket | null;\n    socketID: string | null;\n}\n\nclass UserStore implements IUserStore {\n\n    private _isSignIn: boolean = false;\n    private _user: IUser | null = null;\n    private _isLogging: boolean = false;\n    private _userSocket: Socket | null = null;\n    private _socketID: string | null = null;\n\n    constructor() {\n        makeObservable<UserStore, '_isLogging' | '_isSignIn' | '_user' | '_userSocket' | '_socketID'>(this, {\n            _isLogging: observable,\n            _isSignIn: observable,\n            _user: observable,\n            _userSocket: observable,\n            _socketID: observable,\n            isLogging: computed,\n            isSignIn: computed,\n            user: computed,\n            userSocket: computed,\n            socketID: computed,\n            setIsSignIn: action,\n            setUser: action,\n            signInWithToken: action,\n            signIn: action,\n            signOut: action,\n            changePW: action,\n            setIsLogging: action,\n            setUserSocket: action,\n            setSocketID: action,\n        })\n    }\n\n    public get isSignIn(): boolean {\n        return this._isSignIn;\n    }\n\n    public get user(): IUser | null {\n        return this._user;\n    }\n\n    public get isLogging(): boolean {\n        return this._isLogging;\n    }\n\n    public get userSocket(): Socket | null {\n        return this._userSocket;\n    }\n\n    public get socketID(): string | null {\n        return this._socketID;\n    }\n\n    public setIsSignIn(status: boolean): void {\n        this._isSignIn = status;\n    }\n\n    public setUser(user: IUser): void {\n        this._user = user;\n    }\n\n    public setIsLogging(boolean: boolean): void {\n        this._isLogging = boolean;\n    }\n\n    public setUserSocket(data: Socket | null): void {\n        this._userSocket = data;\n    }\n\n    public setSocketID(myID: string | null): void {\n        this._socketID = myID;\n    }\n\n    public saveSocketID(): void {\n        this.userSocket?.emit('enter');\n        this.userSocket?.on('entered', myID => {\n            this.setSocketID(myID);\n        });\n    }\n    // 유효한 토큰을 가지고 있을 시 로그인을 유지하며 새로운 토큰을 발급받아 저장 (expiresIn 30m)\n    // 서버쪽 토큰 유효성검사를 하는 미들웨어에서 토큰이 만료되었거나 없으면 403을 띄우면서 종료되어서\n    // App 컴포넌트에서 쓰이는 이 메소드와 아래의 signIn 메소드를 따로 분리해서 만들었음.\n    async signInWithToken(push: () => void) {\n        this.setIsLogging(true);\n        try {\n            const token = localStorage.getItem('SerendyToken');\n            if (!token) {\n                this.setIsLogging(false);\n                return;\n            } else if (token) {\n                const response = await authRepository.signInWidthToken();\n                if ((response.data.message === 'Invalid Token')) { // 토큰만료 또는 없음\n                    this.setIsLogging(false);\n                    return;\n                } else if ((response.data.message === 'SignIn Success')) {\n                    this.setUser({\n                        account: response.data.account,\n                        nickName: response.data.nickName,\n                    });\n                    this.setIsSignIn(true);\n                    localStorage.setItem('SerendyToken', response.data.token);\n                    this.setIsLogging(false);\n                    push();\n                }\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다')\n        }\n    }\n\n    async signIn(userData: ISignInData, setError: () => void, push: () => void): Promise<void> {\n        this.setIsLogging(true);\n        try {\n            const response = await authRepository.signIn(userData);\n            if ((response.data.message === 'SignIn Fail')) {\n                this.setIsLogging(false);\n                setError();\n            } else if ((response.data.message === 'SignIn Success')) {\n                this.setUser({\n                    account: response.data.account,\n                    nickName: response.data.nickName,\n                });\n                this.setIsSignIn(true);\n                localStorage.setItem('SerendyToken', response.data.token);\n                this.setIsLogging(false);\n                push();\n            }\n        } catch(err) {\n            this.setIsLogging(false);\n            alert('서버 점검중입니다');\n        }\n    }\n\n    signOut(push: () => void): void {\n        this.setIsSignIn(false);\n        this.setUser({ account: null, nickName: null });\n        localStorage.removeItem('SerendyToken');\n        push();\n    }\n\n    async changePW(data: IPassword, push: () => void): Promise<void> {\n        try {\n            const response = await authRepository.changePassword(data);\n            if ((response.data.message === 'Changed')) {\n                alert(`비밀번호가 변경되었습니다\\n다시 로그인 해주세요`);\n                this.signOut(push);\n            }\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    async changeName(nickName: INickName, push: () => void): Promise<void> {\n        try {\n            const response = await authRepository.changeName(nickName);\n            if ((response.data.message === 'Changed')) {\n                alert(`닉네임이 변경되었습니다\\n다시 로그인 해주세요`)\n                this.signOut(push);\n            }\n        } catch(err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n\n    async findPW(data: IFindPW, push: () => void): Promise<void> {\n        try {\n            const response = await authRepository.findPW(data);\n            if ((response.data.message === 'Not Exist')) {\n                return alert('일치하는 정보가 없습니다');\n            } else if ((response.data.message === 'Valid User')) {\n                alert(`임시로 암호 메세지가\\n비밀번호로 설정되었습니다\\n비밀번호 변경을 꼭 해주세요`);\n                push();\n            };\n        } catch (err) {\n            alert('서버가 점검중이에요');\n        };\n    };\n};\n\nconst userStore = new UserStore();\nexport default userStore;"]},"metadata":{},"sourceType":"module"}