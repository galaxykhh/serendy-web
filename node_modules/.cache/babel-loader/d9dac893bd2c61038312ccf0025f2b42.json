{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport userStore from '../store/userStore';\nexport const useChat = () => {\n  _s();\n\n  const [isSearching, setIsSearching] = useState(false);\n  const [isMatched, setIsMatched] = useState(false);\n  const [display, setDisplay] = useState('hidden');\n  const [chatHistory, setChatHistory] = useState([]);\n  const sendBtn = useRef(null);\n  const inputBox = useRef(null);\n\n  const showChat = () => {\n    setDisplay('visible');\n  };\n\n  const handleBtn = () => {\n    setIsSearching(!isSearching);\n    setIsMatched(!isMatched); // 채팅개발하게되면 수정\n  };\n\n  const handleSearch = () => {\n    if (display === 'hidden') {\n      showChat();\n      handleBtn();\n    } else {\n      handleBtn();\n    }\n  };\n\n  const handleMatch = () => {\n    setIsMatched(true);\n  };\n\n  const sendMsg = msg => {\n    if (inputBox.current.value.length > 0) {\n      var _userStore$userSocket;\n\n      (_userStore$userSocket = userStore.userSocket) === null || _userStore$userSocket === void 0 ? void 0 : _userStore$userSocket.emit('chat', msg);\n      inputBox.current.value = '';\n    } else {\n      return;\n    }\n  };\n\n  const bindMsg = () => {\n    var _userStore$userSocket2;\n\n    (_userStore$userSocket2 = userStore.userSocket) === null || _userStore$userSocket2 === void 0 ? void 0 : _userStore$userSocket2.on('chat', msg => {\n      const Message = {\n        message: msg\n      };\n      chatHistory === null || chatHistory === void 0 ? void 0 : chatHistory.push(Message);\n    });\n  };\n\n  return {\n    isSearching,\n    isMatched,\n    display,\n    sendBtn,\n    inputBox,\n    chatHistory,\n    sendMsg,\n    handleSearch,\n    handleMatch,\n    bindMsg\n  };\n};\n\n_s(useChat, \"+aiQi6WTqufKmi3ghnexnxKE7h4=\");","map":{"version":3,"sources":["/Users/hyeonghan/VSCode/React/Serendy/client/src/Hooks/useChat.ts"],"names":["useState","useRef","userStore","useChat","isSearching","setIsSearching","isMatched","setIsMatched","display","setDisplay","chatHistory","setChatHistory","sendBtn","inputBox","showChat","handleBtn","handleSearch","handleMatch","sendMsg","msg","current","value","length","userSocket","emit","bindMsg","on","Message","message","push"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AAMA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAU,KAAV,CAA9C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAU,KAAV,CAA1C;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAiB,QAAjB,CAAtC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAU,EAAV,CAA9C;AACA,QAAMY,OAAO,GAAGX,MAAM,CAAoB,IAApB,CAAtB;AACA,QAAMY,QAAQ,GAAGZ,MAAM,CAAmB,IAAnB,CAAvB;;AAEA,QAAMa,QAAQ,GAAG,MAAY;AACzBL,IAAAA,UAAU,CAAC,SAAD,CAAV;AACH,GAFD;;AAIA,QAAMM,SAAS,GAAG,MAAY;AAC1BV,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACAG,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ,CAF0B,CAEA;AAC7B,GAHD;;AAKA,QAAMU,YAAY,GAAG,MAAY;AAC7B,QAAIR,OAAO,KAAK,QAAhB,EAA0B;AACtBM,MAAAA,QAAQ;AACRC,MAAAA,SAAS;AACZ,KAHD,MAGO;AACHA,MAAAA,SAAS;AACZ;AACJ,GAPD;;AASA,QAAME,WAAW,GAAG,MAAY;AAC5BV,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMW,OAAO,GAAIC,GAAD,IAAuB;AACnC,QAAIN,QAAQ,CAACO,OAAT,CAAkBC,KAAlB,CAAwBC,MAAxB,GAAiC,CAArC,EAAwC;AAAA;;AACpC,+BAAApB,SAAS,CAACqB,UAAV,gFAAsBC,IAAtB,CAA2B,MAA3B,EAAmCL,GAAnC;AACAN,MAAAA,QAAQ,CAACO,OAAT,CAAkBC,KAAlB,GAA0B,EAA1B;AACH,KAHD,MAGO;AACH;AACH;AACJ,GAPD;;AASA,QAAMI,OAAO,GAAG,MAAY;AAAA;;AACxB,8BAAAvB,SAAS,CAACqB,UAAV,kFAAsBG,EAAtB,CAAyB,MAAzB,EAAkCP,GAAD,IAAiB;AAC9C,YAAMQ,OAAO,GAAG;AACZC,QAAAA,OAAO,EAAET;AADG,OAAhB;AAGAT,MAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEmB,IAAb,CAAkBF,OAAlB;AACH,KALD;AAMH,GAPD;;AASA,SAAO;AACHvB,IAAAA,WADG;AAEHE,IAAAA,SAFG;AAGHE,IAAAA,OAHG;AAIHI,IAAAA,OAJG;AAKHC,IAAAA,QALG;AAMHH,IAAAA,WANG;AAOHQ,IAAAA,OAPG;AAQHF,IAAAA,YARG;AASHC,IAAAA,WATG;AAUHQ,IAAAA;AAVG,GAAP;AAYH,CA5DM;;GAAMtB,O","sourcesContent":["import { useState, useRef } from 'react'\nimport { VisibilityType } from '../type';\nimport userStore from '../store/userStore';\n\ninterface IChat {\n    message: string;\n}\n\nexport const useChat = () => {\n    const [isSearching, setIsSearching] = useState<boolean>(false);\n    const [isMatched, setIsMatched] = useState<boolean>(false);\n    const [display, setDisplay] = useState<VisibilityType>('hidden');\n    const [chatHistory, setChatHistory] = useState<IChat[]>([]);\n    const sendBtn = useRef<HTMLButtonElement>(null);\n    const inputBox = useRef<HTMLInputElement>(null);\n\n    const showChat = (): void => {\n        setDisplay('visible');\n    }\n\n    const handleBtn = (): void => {\n        setIsSearching(!isSearching);\n        setIsMatched(!isMatched); // 채팅개발하게되면 수정\n    };\n\n    const handleSearch = (): void => {\n        if (display === 'hidden') {\n            showChat();\n            handleBtn();\n        } else {\n            handleBtn();\n        }\n    };\n\n    const handleMatch = (): void => {\n        setIsMatched(true);\n    }\n\n    const sendMsg = (msg: string): void => {\n        if (inputBox.current!.value.length > 0) {\n            userStore.userSocket?.emit('chat', msg);\n            inputBox.current!.value = '';\n        } else {\n            return;\n        }\n    }\n\n    const bindMsg = (): void => {\n        userStore.userSocket?.on('chat', (msg: string) => {\n            const Message = {\n                message: msg,\n            }\n            chatHistory?.push(Message);\n        })\n    }\n\n    return {\n        isSearching,\n        isMatched,\n        display,\n        sendBtn,\n        inputBox,\n        chatHistory,\n        sendMsg,\n        handleSearch,\n        handleMatch,\n        bindMsg,\n    }\n}"]},"metadata":{},"sourceType":"module"}